// Generated code for Python source for module 'django.db.models.sql.query'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__db__models__sql__query is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__db__models__sql__query;
PyDictObject *_moduledict_django__db__models__sql__query;

// The module level variables.
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_AND( &_module_django__db__models__sql__query, &_python_str_plain_AND );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_Constraint( &_module_django__db__models__sql__query, &_python_str_plain_Constraint );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_DEFAULT_DB_ALIAS( &_module_django__db__models__sql__query, &_python_str_plain_DEFAULT_DB_ALIAS );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_Empty( &_module_django__db__models__sql__query, &_python_str_plain_Empty );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_EmptyResultSet( &_module_django__db__models__sql__query, &_python_str_plain_EmptyResultSet );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_EmptyWhere( &_module_django__db__models__sql__query, &_python_str_plain_EmptyWhere );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_EverythingNode( &_module_django__db__models__sql__query, &_python_str_plain_EverythingNode );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_ExpressionNode( &_module_django__db__models__sql__query, &_python_str_plain_ExpressionNode );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_ExtraWhere( &_module_django__db__models__sql__query, &_python_str_plain_ExtraWhere );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_FieldDoesNotExist( &_module_django__db__models__sql__query, &_python_str_plain_FieldDoesNotExist );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_FieldError( &_module_django__db__models__sql__query, &_python_str_plain_FieldError );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_JoinInfo( &_module_django__db__models__sql__query, &_python_str_plain_JoinInfo );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_LOOKUP_SEP( &_module_django__db__models__sql__query, &_python_str_plain_LOOKUP_SEP );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_MultiJoin( &_module_django__db__models__sql__query, &_python_str_plain_MultiJoin );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_Node( &_module_django__db__models__sql__query, &_python_str_plain_Node );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_OR( &_module_django__db__models__sql__query, &_python_str_plain_OR );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_ORDER_DIR( &_module_django__db__models__sql__query, &_python_str_plain_ORDER_DIR );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_ORDER_PATTERN( &_module_django__db__models__sql__query, &_python_str_plain_ORDER_PATTERN );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_PathInfo( &_module_django__db__models__sql__query, &_python_str_plain_PathInfo );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_QUERY_TERMS( &_module_django__db__models__sql__query, &_python_str_plain_QUERY_TERMS );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_Query( &_module_django__db__models__sql__query, &_python_str_plain_Query );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_RawQuery( &_module_django__db__models__sql__query, &_python_str_plain_RawQuery );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_SINGLE( &_module_django__db__models__sql__query, &_python_str_plain_SINGLE );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_SQLEvaluator( &_module_django__db__models__sql__query, &_python_str_plain_SQLEvaluator );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_SelectInfo( &_module_django__db__models__sql__query, &_python_str_plain_SelectInfo );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_SortedDict( &_module_django__db__models__sql__query, &_python_str_plain_SortedDict );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_WhereNode( &_module_django__db__models__sql__query, &_python_str_plain_WhereNode );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query___metaclass__( &_module_django__db__models__sql__query, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_add_to_dict( &_module_django__db__models__sql__query, &_python_str_plain_add_to_dict );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_alias_diff( &_module_django__db__models__sql__query, &_python_str_plain_alias_diff );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_base_aggregates_module( &_module_django__db__models__sql__query, &_python_str_plain_base_aggregates_module );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_connections( &_module_django__db__models__sql__query, &_python_str_plain_connections );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_copy( &_module_django__db__models__sql__query, &_python_str_plain_copy );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_force_text( &_module_django__db__models__sql__query, &_python_str_plain_force_text );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_is_reverse_o2o( &_module_django__db__models__sql__query, &_python_str_plain_is_reverse_o2o );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_refs_aggregate( &_module_django__db__models__sql__query, &_python_str_plain_refs_aggregate );
static PyObjectGlobalVariable_django__db__models__sql__query _mvar_django__db__models__sql__query_six( &_module_django__db__models__sql__query, &_python_str_plain_six );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_RawQuery_of_module_django__db__models__sql__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_column_meta, PyObjectLocalVariable &python_closure_converter );


NUITKA_LOCAL_MODULE PyObject *impl_class_2_Query_of_module_django__db__models__sql__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_q );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_aggregate, PyObjectLocalVariable &python_closure_alias, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalParameterVariableNoDel &python_closure_using, PyObjectLocalVariable &python_closure_val );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_alias, PyObjectLocalVariable &python_closure_rhs_used_joins );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_alias, PyObjectSharedLocalVariable &python_closure_aliases, PyObjectSharedLocalVariable &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_col, PyObjectSharedLocalVariable &python_closure_relabel_column );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_relabel_column, PyObjectLocalVariable &python_closure_s );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_relabel_column );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_a, PyObjectSharedLocalVariable &python_closure_change_map );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_count );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_a, PyObjectLocalParameterVariableNoDel &python_closure_reuse );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_i );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_cur_targets );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_k, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalVariable &python_closure_v );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_k, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalVariable &python_closure_v );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_r );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_r );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f, PyObjectLocalVariable &python_closure_select_alias );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_refcounts_after, PyObjectSharedLocalVariable &python_closure_refcounts_before );


static PyObject *MAKE_FUNCTION_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObjectSharedLocalVariable &python_closure_change_map );


// This structure is for attachment as self of function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query.
// It is allocated at the time the function object is created.
struct _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_change_map;
};

static void _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_3_get_order_dir_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_4_add_to_dict_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_5_is_reverse_o2o_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_6_alias_diff_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query(  );


static PyObject *MAKE_FUNCTION_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );
    PyObjectLocalVariable _python_var_convert_values( _python_str_plain_convert_values );
    PyObjectLocalVariable _python_var_get_columns( _python_str_plain_get_columns );
    PyObjectLocalVariable _python_var___iter__( _python_str_plain___iter__ );
    PyObjectLocalVariable _python_var___repr__( _python_str_plain___repr__ );
    PyObjectLocalVariable _python_var__execute_query( _python_str_plain__execute_query );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var___doc__.assign0( _python_str_digest_4cc1191b6f84f268c4bb350b466e85b0 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
    _python_var_clone.assign1( MAKE_FUNCTION_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
    _python_var_convert_values.assign1( MAKE_FUNCTION_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
    _python_var_get_columns.assign1( MAKE_FUNCTION_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
    _python_var___iter__.assign1( MAKE_FUNCTION_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
    _python_var___repr__.assign1( MAKE_FUNCTION_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
    _python_var__execute_query.assign1( MAKE_FUNCTION_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
    return _python_var__execute_query.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var_get_columns.updateLocalsDict( _python_var_convert_values.updateLocalsDict( _python_var_clone.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_sql, PyObject *_python_par_using, PyObject *_python_par_params )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_sql( _python_str_plain_sql, _python_par_sql );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );
    PyObjectLocalParameterVariableNoDel _python_var_params( _python_str_plain_params, _python_par_params );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query );
        }

        frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_a4556ca9672016e1825261fc109afaf1, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 40 );
        {
            PyObjectTempKeeper0 keeper_0;
            {
                PyObject *tmp_identifier = ( CHECK_IF_TRUE( keeper_0.assign( _python_var_params.asObject() ) ) ? keeper_0.asObject0() : _python_tuple_empty );
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_params );
        }
        }
        frame_guard.setLineNumber( 41 );
        {
                PyObject *tmp_identifier = _python_var_sql.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_sql );
        }
        frame_guard.setLineNumber( 42 );
        {
                PyObject *tmp_identifier = _python_var_using.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_using );
        }
        frame_guard.setLineNumber( 43 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_cursor );
        {
            frame_guard.setLineNumber( 47 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tuple_int_0_none_tuple ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_low_mark );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_high_mark );
            }
        }
        frame_guard.setLineNumber( 48 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_extra_select );
        frame_guard.setLineNumber( 49 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_aggregate_select );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_params.updateLocalsDict( _python_var_using.updateLocalsDict( _python_var_sql.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query );
           frame_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_sql = NULL;
    PyObject *_python_par_using = NULL;
    PyObject *_python_par_params = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_sql == key )
            {
                if (unlikely( _python_par_sql ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'sql'" );
                    goto error_exit;
                }

                _python_par_sql = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_params == key )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_sql, key ) )
            {
                if (unlikely( _python_par_sql ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'sql'" );
                    goto error_exit;
                }

                _python_par_sql = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_params, key ) )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_sql != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'sql'" );
             goto error_exit;
         }

        _python_par_sql = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
             goto error_exit;
         }

        _python_par_params = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_params == NULL )
    {
        _python_par_params = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_params );
    }


    return impl_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_sql, _python_par_using, _python_par_params );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_sql );
    Py_XDECREF( _python_par_using );
    Py_XDECREF( _python_par_params );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );

    // Actual function code.
    static PyFrameObject *frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query );
        }

        frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_d834c2e174fd87b95e4051eb317cb413, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 52 );
        {
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper1 make_tuple1;
            return ( call3.assign( _mvar_django__db__models__sql__query_RawQuery.asObject0() ), call4.assign( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_sql ) ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_using.asObject() ) ) ), CALL_FUNCTION( call3.asObject0(), call4.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_params ) ).asObject(), _python_str_plain_params ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query );
           frame_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clone() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clone() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clone() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clone() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clone() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clone() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clone() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clone() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clone() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clone() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clone() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clone() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clone() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clone() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_field, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );

    // Actual function code.
    static PyFrameObject *frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query );
        }

        frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_8bd5199875e87ce4f221ab8b487502fd, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 61 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_convert_values ) ), call2.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_field.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query );
           frame_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "convert_values() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "convert_values() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "convert_values() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_value, _python_par_field, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_converter( _python_str_plain_converter );
    PyObjectLocalVariable _python_var_column_meta( _python_str_plain_column_meta );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query );
        }

        frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_b032620346f81de22488d3bc19377735, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 64 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cursor ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 65 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__execute_query ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 66 );
        {
            PyObjectTempKeeper0 subscr1;
            _python_var_converter.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__sql__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_using ) ).asObject() ) ) ).asObject(), _python_str_plain_introspection ) ).asObject(), _python_str_plain_table_name_converter ) );
        }
        frame_guard.setLineNumber( 67 );
        return impl_listcontr_1_of_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cursor ) ).asObject(), _python_str_plain_description ) ).asObject() ), _python_var_column_meta, _python_var_converter );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_column_meta.updateLocalsDict( _python_var_converter.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query );
           frame_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_columns() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_columns() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_columns() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_columns() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_columns() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_columns() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_columns() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_columns() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_columns() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_columns() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_columns() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_column_meta,PyObjectLocalVariable &python_closure_converter )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 67 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 67 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_column_meta.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( python_closure_converter.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( python_closure_column_meta.asObject(), _python_int_0, 0 ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );

    // Actual function code.
    static PyFrameObject *frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query );
        }

        frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_5bb31d88deb10623c4666f8452b30d73, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 73 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__execute_query ) ).asObject() ) );
        frame_guard.setLineNumber( 74 );
        {
            PyObjectTempKeeper0 subscr1;
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__sql__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_using ) ).asObject() ) ) ).asObject(), _python_str_plain_features ) ).asObject(), _python_str_plain_can_use_chunked_reads ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 77 );
            _python_var_result.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cursor ) ).asObject() ) );
        }
        else
        {
            frame_guard.setLineNumber( 79 );
            _python_var_result.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cursor ) );
        }
        }
        frame_guard.setLineNumber( 80 );
        return MAKE_ITERATOR( _python_var_result.asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_result.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query );
           frame_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__iter__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query );
        }

        frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_d891e09ba3249b00cf3011c44ef2acc2, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 83 );
        {
            PyObjectTempKeeper1 op1;
            return BINARY_OPERATION_REMAINDER( _python_str_digest_f9924662bf796f7717e9b99ec299c35d, PyObjectTemporary( ( op1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_sql ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( TO_TUPLE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_params ) ).asObject() ) ).asObject() ) ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query );
           frame_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__repr__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query );
        }

        frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_c9115367106c9e3a7267efad7b43fee8, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 86 );
        {
            PyObjectTempKeeper0 subscr1;
            {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__sql__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_using ) ).asObject() ) ) ).asObject(), _python_str_plain_cursor ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_cursor );
        }
        }
        frame_guard.setLineNumber( 87 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cursor ) ).asObject(), _python_str_plain_execute ) ), call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_sql ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_params ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query );
           frame_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_execute_query() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_execute_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_execute_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_execute_query() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_execute_query() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_execute_query() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_execute_query() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_execute_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_execute_query() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_execute_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_execute_query() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_execute_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_execute_query() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_execute_query() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_execute_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_execute_query() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_execute_query() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_2_Query_of_module_django__db__models__sql__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_INNER( _python_str_plain_INNER );
    PyObjectLocalVariable _python_var_LOUTER( _python_str_plain_LOUTER );
    PyObjectLocalVariable _python_var_alias_prefix( _python_str_plain_alias_prefix );
    PyObjectLocalVariable _python_var_query_terms( _python_str_plain_query_terms );
    PyObjectLocalVariable _python_var_aggregates_module( _python_str_plain_aggregates_module );
    PyObjectLocalVariable _python_var_compiler( _python_str_plain_compiler );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );
    PyObjectLocalVariable _python_var_sql_with_params( _python_str_plain_sql_with_params );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );
    PyObjectLocalVariable _python_var_prepare( _python_str_plain_prepare );
    PyObjectLocalVariable _python_var_get_compiler( _python_str_plain_get_compiler );
    PyObjectLocalVariable _python_var_get_meta( _python_str_plain_get_meta );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );
    PyObjectLocalVariable _python_var_convert_values( _python_str_plain_convert_values );
    PyObjectLocalVariable _python_var_resolve_aggregate( _python_str_plain_resolve_aggregate );
    PyObjectLocalVariable _python_var_get_aggregation( _python_str_plain_get_aggregation );
    PyObjectLocalVariable _python_var_get_count( _python_str_plain_get_count );
    PyObjectLocalVariable _python_var_has_results( _python_str_plain_has_results );
    PyObjectLocalVariable _python_var_combine( _python_str_plain_combine );
    PyObjectLocalVariable _python_var_deferred_to_data( _python_str_plain_deferred_to_data );
    PyObjectLocalVariable _python_var_deferred_to_columns_cb( _python_str_plain_deferred_to_columns_cb );
    PyObjectLocalVariable _python_var_table_alias( _python_str_plain_table_alias );
    PyObjectLocalVariable _python_var_ref_alias( _python_str_plain_ref_alias );
    PyObjectLocalVariable _python_var_unref_alias( _python_str_plain_unref_alias );
    PyObjectLocalVariable _python_var_promote_joins( _python_str_plain_promote_joins );
    PyObjectLocalVariable _python_var_reset_refcounts( _python_str_plain_reset_refcounts );
    PyObjectLocalVariable _python_var_promote_disjunction( _python_str_plain_promote_disjunction );
    PyObjectLocalVariable _python_var_change_aliases( _python_str_plain_change_aliases );
    PyObjectLocalVariable _python_var_bump_prefix( _python_str_plain_bump_prefix );
    PyObjectLocalVariable _python_var_get_initial_alias( _python_str_plain_get_initial_alias );
    PyObjectLocalVariable _python_var_count_active_tables( _python_str_plain_count_active_tables );
    PyObjectLocalVariable _python_var_join( _python_str_plain_join );
    PyObjectLocalVariable _python_var_setup_inherited_models( _python_str_plain_setup_inherited_models );
    PyObjectLocalVariable _python_var_join_parent_model( _python_str_plain_join_parent_model );
    PyObjectLocalVariable _python_var_remove_inherited_models( _python_str_plain_remove_inherited_models );
    PyObjectLocalVariable _python_var_add_aggregate( _python_str_plain_add_aggregate );
    PyObjectLocalVariable _python_var_build_filter( _python_str_plain_build_filter );
    PyObjectLocalVariable _python_var_add_filter( _python_str_plain_add_filter );
    PyObjectLocalVariable _python_var_need_having( _python_str_plain_need_having );
    PyObjectLocalVariable _python_var_split_having_parts( _python_str_plain_split_having_parts );
    PyObjectLocalVariable _python_var_add_q( _python_str_plain_add_q );
    PyObjectLocalVariable _python_var__add_q( _python_str_plain__add_q );
    PyObjectLocalVariable _python_var_names_to_path( _python_str_plain_names_to_path );
    PyObjectLocalVariable _python_var_setup_joins( _python_str_plain_setup_joins );
    PyObjectLocalVariable _python_var_trim_joins( _python_str_plain_trim_joins );
    PyObjectLocalVariable _python_var_split_exclude( _python_str_plain_split_exclude );
    PyObjectLocalVariable _python_var_set_empty( _python_str_plain_set_empty );
    PyObjectLocalVariable _python_var_is_empty( _python_str_plain_is_empty );
    PyObjectLocalVariable _python_var_set_limits( _python_str_plain_set_limits );
    PyObjectLocalVariable _python_var_clear_limits( _python_str_plain_clear_limits );
    PyObjectLocalVariable _python_var_can_filter( _python_str_plain_can_filter );
    PyObjectLocalVariable _python_var_clear_select_clause( _python_str_plain_clear_select_clause );
    PyObjectLocalVariable _python_var_clear_select_fields( _python_str_plain_clear_select_fields );
    PyObjectLocalVariable _python_var_add_distinct_fields( _python_str_plain_add_distinct_fields );
    PyObjectLocalVariable _python_var_add_fields( _python_str_plain_add_fields );
    PyObjectLocalVariable _python_var_add_ordering( _python_str_plain_add_ordering );
    PyObjectLocalVariable _python_var_clear_ordering( _python_str_plain_clear_ordering );
    PyObjectLocalVariable _python_var_set_group_by( _python_str_plain_set_group_by );
    PyObjectLocalVariable _python_var_add_count_column( _python_str_plain_add_count_column );
    PyObjectLocalVariable _python_var_add_select_related( _python_str_plain_add_select_related );
    PyObjectLocalVariable _python_var_add_extra( _python_str_plain_add_extra );
    PyObjectLocalVariable _python_var_clear_deferred_loading( _python_str_plain_clear_deferred_loading );
    PyObjectLocalVariable _python_var_add_deferred_loading( _python_str_plain_add_deferred_loading );
    PyObjectLocalVariable _python_var_add_immediate_loading( _python_str_plain_add_immediate_loading );
    PyObjectLocalVariable _python_var_get_loaded_field_names( _python_str_plain_get_loaded_field_names );
    PyObjectLocalVariable _python_var_get_loaded_field_names_cb( _python_str_plain_get_loaded_field_names_cb );
    PyObjectLocalVariable _python_var_set_aggregate_mask( _python_str_plain_set_aggregate_mask );
    PyObjectLocalVariable _python_var_set_extra_mask( _python_str_plain_set_extra_mask );
    PyObjectLocalVariable _python_var__aggregate_select( _python_str_plain__aggregate_select );
    PyObjectLocalVariable _python_var_aggregate_select( _python_str_plain_aggregate_select );
    PyObjectLocalVariable _python_var__extra_select( _python_str_plain__extra_select );
    PyObjectLocalVariable _python_var_extra_select( _python_str_plain_extra_select );
    PyObjectLocalVariable _python_var_trim_start( _python_str_plain_trim_start );
    PyObjectLocalVariable _python_var_is_nullable( _python_str_plain_is_nullable );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var___doc__.assign0( _python_str_digest_24dffcdb05f5524a0ad92f9cbbf2f81f );
    _python_var_INNER.assign0( _python_str_digest_6b5704e00879a8be10d9e891667321dd );
    _python_var_LOUTER.assign0( _python_str_digest_5c53620daf1dd47624d9e7d28de3d799 );
    _python_var_alias_prefix.assign0( _python_str_plain_T );
    static PyFrameObject *frame_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_7f65f30d20af52f98733f2c974755999, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 100 );
        _python_var_query_terms.assign0( _mvar_django__db__models__sql__query_QUERY_TERMS.asObject0() );
        frame_guard.setLineNumber( 101 );
        _python_var_aggregates_module.assign0( _mvar_django__db__models__sql__query_base_aggregates_module.asObject0() );
        _python_var_compiler.assign0( _python_str_plain_SQLCompiler );
        frame_guard.setLineNumber( 105 );
        _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( MAKE_TUPLE1( _mvar_django__db__models__sql__query_WhereNode.asObject0() ) ) );
        _python_var___str__.assign1( MAKE_FUNCTION_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_sql_with_params.assign1( MAKE_FUNCTION_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_prepare.assign1( MAKE_FUNCTION_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_get_compiler.assign1( MAKE_FUNCTION_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_get_meta.assign1( MAKE_FUNCTION_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_clone.assign1( MAKE_FUNCTION_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_convert_values.assign1( MAKE_FUNCTION_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_resolve_aggregate.assign1( MAKE_FUNCTION_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_get_aggregation.assign1( MAKE_FUNCTION_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_get_count.assign1( MAKE_FUNCTION_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_has_results.assign1( MAKE_FUNCTION_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_combine.assign1( MAKE_FUNCTION_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_deferred_to_data.assign1( MAKE_FUNCTION_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_deferred_to_columns_cb.assign1( MAKE_FUNCTION_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_table_alias.assign1( MAKE_FUNCTION_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_ref_alias.assign1( MAKE_FUNCTION_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_unref_alias.assign1( MAKE_FUNCTION_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_promote_joins.assign1( MAKE_FUNCTION_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_reset_refcounts.assign1( MAKE_FUNCTION_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_promote_disjunction.assign1( MAKE_FUNCTION_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_change_aliases.assign1( MAKE_FUNCTION_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_bump_prefix.assign1( MAKE_FUNCTION_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_get_initial_alias.assign1( MAKE_FUNCTION_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_count_active_tables.assign1( MAKE_FUNCTION_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_join.assign1( MAKE_FUNCTION_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_setup_inherited_models.assign1( MAKE_FUNCTION_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_join_parent_model.assign1( MAKE_FUNCTION_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_remove_inherited_models.assign1( MAKE_FUNCTION_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_aggregate.assign1( MAKE_FUNCTION_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_build_filter.assign1( MAKE_FUNCTION_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_filter.assign1( MAKE_FUNCTION_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_need_having.assign1( MAKE_FUNCTION_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_split_having_parts.assign1( MAKE_FUNCTION_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_q.assign1( MAKE_FUNCTION_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var__add_q.assign1( MAKE_FUNCTION_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_names_to_path.assign1( MAKE_FUNCTION_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_setup_joins.assign1( MAKE_FUNCTION_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_trim_joins.assign1( MAKE_FUNCTION_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_split_exclude.assign1( MAKE_FUNCTION_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_set_empty.assign1( MAKE_FUNCTION_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_is_empty.assign1( MAKE_FUNCTION_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_set_limits.assign1( MAKE_FUNCTION_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_clear_limits.assign1( MAKE_FUNCTION_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_can_filter.assign1( MAKE_FUNCTION_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_clear_select_clause.assign1( MAKE_FUNCTION_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_clear_select_fields.assign1( MAKE_FUNCTION_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_distinct_fields.assign1( MAKE_FUNCTION_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_fields.assign1( MAKE_FUNCTION_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_ordering.assign1( MAKE_FUNCTION_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_clear_ordering.assign1( MAKE_FUNCTION_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_set_group_by.assign1( MAKE_FUNCTION_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_count_column.assign1( MAKE_FUNCTION_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_select_related.assign1( MAKE_FUNCTION_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_extra.assign1( MAKE_FUNCTION_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_clear_deferred_loading.assign1( MAKE_FUNCTION_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_deferred_loading.assign1( MAKE_FUNCTION_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_add_immediate_loading.assign1( MAKE_FUNCTION_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_get_loaded_field_names.assign1( MAKE_FUNCTION_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_get_loaded_field_names_cb.assign1( MAKE_FUNCTION_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_set_aggregate_mask.assign1( MAKE_FUNCTION_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var_set_extra_mask.assign1( MAKE_FUNCTION_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        _python_var__aggregate_select.assign1( MAKE_FUNCTION_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        frame_guard.setLineNumber( 1790 );
        _python_var_aggregate_select.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var__aggregate_select.asObject() ) );
        _python_var__extra_select.assign1( MAKE_FUNCTION_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
        frame_guard.setLineNumber( 1803 );
        _python_var_extra_select.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var__extra_select.asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_is_nullable.updateLocalsDict( _python_var_trim_start.updateLocalsDict( _python_var_extra_select.updateLocalsDict( _python_var__extra_select.updateLocalsDict( _python_var_aggregate_select.updateLocalsDict( _python_var__aggregate_select.updateLocalsDict( _python_var_set_extra_mask.updateLocalsDict( _python_var_set_aggregate_mask.updateLocalsDict( _python_var_get_loaded_field_names_cb.updateLocalsDict( _python_var_get_loaded_field_names.updateLocalsDict( _python_var_add_immediate_loading.updateLocalsDict( _python_var_add_deferred_loading.updateLocalsDict( _python_var_clear_deferred_loading.updateLocalsDict( _python_var_add_extra.updateLocalsDict( _python_var_add_select_related.updateLocalsDict( _python_var_add_count_column.updateLocalsDict( _python_var_set_group_by.updateLocalsDict( _python_var_clear_ordering.updateLocalsDict( _python_var_add_ordering.updateLocalsDict( _python_var_add_fields.updateLocalsDict( _python_var_add_distinct_fields.updateLocalsDict( _python_var_clear_select_fields.updateLocalsDict( _python_var_clear_select_clause.updateLocalsDict( _python_var_can_filter.updateLocalsDict( _python_var_clear_limits.updateLocalsDict( _python_var_set_limits.updateLocalsDict( _python_var_is_empty.updateLocalsDict( _python_var_set_empty.updateLocalsDict( _python_var_split_exclude.updateLocalsDict( _python_var_trim_joins.updateLocalsDict( _python_var_setup_joins.updateLocalsDict( _python_var_names_to_path.updateLocalsDict( _python_var__add_q.updateLocalsDict( _python_var_add_q.updateLocalsDict( _python_var_split_having_parts.updateLocalsDict( _python_var_need_having.updateLocalsDict( _python_var_add_filter.updateLocalsDict( _python_var_build_filter.updateLocalsDict( _python_var_add_aggregate.updateLocalsDict( _python_var_remove_inherited_models.updateLocalsDict( _python_var_join_parent_model.updateLocalsDict( _python_var_setup_inherited_models.updateLocalsDict( _python_var_join.updateLocalsDict( _python_var_count_active_tables.updateLocalsDict( _python_var_get_initial_alias.updateLocalsDict( _python_var_bump_prefix.updateLocalsDict( _python_var_change_aliases.updateLocalsDict( _python_var_promote_disjunction.updateLocalsDict( _python_var_reset_refcounts.updateLocalsDict( _python_var_promote_joins.updateLocalsDict( _python_var_unref_alias.updateLocalsDict( _python_var_ref_alias.updateLocalsDict( _python_var_table_alias.updateLocalsDict( _python_var_deferred_to_columns_cb.updateLocalsDict( _python_var_deferred_to_data.updateLocalsDict( _python_var_combine.updateLocalsDict( _python_var_has_results.updateLocalsDict( _python_var_get_count.updateLocalsDict( _python_var_get_aggregation.updateLocalsDict( _python_var_resolve_aggregate.updateLocalsDict( _python_var_convert_values.updateLocalsDict( _python_var_clone.updateLocalsDict( _python_var_get_meta.updateLocalsDict( _python_var_get_compiler.updateLocalsDict( _python_var_prepare.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var_sql_with_params.updateLocalsDict( _python_var___str__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_compiler.updateLocalsDict( _python_var_aggregates_module.updateLocalsDict( _python_var_query_terms.updateLocalsDict( _python_var_alias_prefix.updateLocalsDict( _python_var_LOUTER.updateLocalsDict( _python_var_INNER.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_class_2_Query_of_module_django__db__models__sql__query );
           frame_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        throw;
    }
    _python_var_trim_start.assign1( MAKE_FUNCTION_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
    _python_var_is_nullable.assign1( MAKE_FUNCTION_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query(  ) );
    return _python_var_is_nullable.updateLocalsDict( _python_var_trim_start.updateLocalsDict( _python_var_extra_select.updateLocalsDict( _python_var__extra_select.updateLocalsDict( _python_var_aggregate_select.updateLocalsDict( _python_var__aggregate_select.updateLocalsDict( _python_var_set_extra_mask.updateLocalsDict( _python_var_set_aggregate_mask.updateLocalsDict( _python_var_get_loaded_field_names_cb.updateLocalsDict( _python_var_get_loaded_field_names.updateLocalsDict( _python_var_add_immediate_loading.updateLocalsDict( _python_var_add_deferred_loading.updateLocalsDict( _python_var_clear_deferred_loading.updateLocalsDict( _python_var_add_extra.updateLocalsDict( _python_var_add_select_related.updateLocalsDict( _python_var_add_count_column.updateLocalsDict( _python_var_set_group_by.updateLocalsDict( _python_var_clear_ordering.updateLocalsDict( _python_var_add_ordering.updateLocalsDict( _python_var_add_fields.updateLocalsDict( _python_var_add_distinct_fields.updateLocalsDict( _python_var_clear_select_fields.updateLocalsDict( _python_var_clear_select_clause.updateLocalsDict( _python_var_can_filter.updateLocalsDict( _python_var_clear_limits.updateLocalsDict( _python_var_set_limits.updateLocalsDict( _python_var_is_empty.updateLocalsDict( _python_var_set_empty.updateLocalsDict( _python_var_split_exclude.updateLocalsDict( _python_var_trim_joins.updateLocalsDict( _python_var_setup_joins.updateLocalsDict( _python_var_names_to_path.updateLocalsDict( _python_var__add_q.updateLocalsDict( _python_var_add_q.updateLocalsDict( _python_var_split_having_parts.updateLocalsDict( _python_var_need_having.updateLocalsDict( _python_var_add_filter.updateLocalsDict( _python_var_build_filter.updateLocalsDict( _python_var_add_aggregate.updateLocalsDict( _python_var_remove_inherited_models.updateLocalsDict( _python_var_join_parent_model.updateLocalsDict( _python_var_setup_inherited_models.updateLocalsDict( _python_var_join.updateLocalsDict( _python_var_count_active_tables.updateLocalsDict( _python_var_get_initial_alias.updateLocalsDict( _python_var_bump_prefix.updateLocalsDict( _python_var_change_aliases.updateLocalsDict( _python_var_promote_disjunction.updateLocalsDict( _python_var_reset_refcounts.updateLocalsDict( _python_var_promote_joins.updateLocalsDict( _python_var_unref_alias.updateLocalsDict( _python_var_ref_alias.updateLocalsDict( _python_var_table_alias.updateLocalsDict( _python_var_deferred_to_columns_cb.updateLocalsDict( _python_var_deferred_to_data.updateLocalsDict( _python_var_combine.updateLocalsDict( _python_var_has_results.updateLocalsDict( _python_var_get_count.updateLocalsDict( _python_var_get_aggregation.updateLocalsDict( _python_var_resolve_aggregate.updateLocalsDict( _python_var_convert_values.updateLocalsDict( _python_var_clone.updateLocalsDict( _python_var_get_meta.updateLocalsDict( _python_var_get_compiler.updateLocalsDict( _python_var_prepare.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var_sql_with_params.updateLocalsDict( _python_var___str__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_compiler.updateLocalsDict( _python_var_aggregates_module.updateLocalsDict( _python_var_query_terms.updateLocalsDict( _python_var_alias_prefix.updateLocalsDict( _python_var_LOUTER.updateLocalsDict( _python_var_INNER.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_model, PyObject *_python_par_where )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_where( _python_str_plain_where, _python_par_where );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_d88f25302e97bccd73d2cac836b7dd39, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 106 );
        {
                PyObject *tmp_identifier = _python_var_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 107 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_alias_refcount );
        frame_guard.setLineNumber( 112 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_alias_map );
        frame_guard.setLineNumber( 113 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_table_map );
        frame_guard.setLineNumber( 114 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_join_map );
        frame_guard.setLineNumber( 115 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_default_cols );
        frame_guard.setLineNumber( 116 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_default_ordering );
        frame_guard.setLineNumber( 117 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_standard_ordering );
        frame_guard.setLineNumber( 118 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_ordering_aliases );
        frame_guard.setLineNumber( 119 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_used_aliases );
        }
        frame_guard.setLineNumber( 120 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_filter_is_sticky );
        frame_guard.setLineNumber( 121 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_included_inherited_models );
        frame_guard.setLineNumber( 128 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_select );
        frame_guard.setLineNumber( 131 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_related_select_cols );
        frame_guard.setLineNumber( 132 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_tables );
        frame_guard.setLineNumber( 133 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( _python_var_where.asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_where );
        }
        frame_guard.setLineNumber( 134 );
        {
                PyObject *tmp_identifier = _python_var_where.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_where_class );
        }
        frame_guard.setLineNumber( 135 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_group_by );
        frame_guard.setLineNumber( 136 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( _python_var_where.asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_having );
        }
        frame_guard.setLineNumber( 137 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_order_by );
        {
            frame_guard.setLineNumber( 138 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tuple_int_0_none_tuple ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_low_mark );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_high_mark );
            }
        }
        frame_guard.setLineNumber( 139 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_distinct );
        frame_guard.setLineNumber( 140 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_distinct_fields );
        frame_guard.setLineNumber( 141 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_select_for_update );
        frame_guard.setLineNumber( 142 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_select_for_update_nowait );
        frame_guard.setLineNumber( 143 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_select_related );
        frame_guard.setLineNumber( 146 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_SortedDict.asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_aggregates );
        }
        frame_guard.setLineNumber( 147 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_aggregate_select_mask );
        frame_guard.setLineNumber( 148 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__aggregate_select_cache );
        frame_guard.setLineNumber( 152 );
        SET_ATTRIBUTE( _python_int_pos_5, _python_var_self.asObject(), _python_str_plain_max_depth );
        frame_guard.setLineNumber( 156 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_SortedDict.asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_extra );
        }
        frame_guard.setLineNumber( 157 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_extra_select_mask );
        frame_guard.setLineNumber( 158 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__extra_select_cache );
        frame_guard.setLineNumber( 160 );
        SET_ATTRIBUTE( _python_tuple_empty, _python_var_self.asObject(), _python_str_plain_extra_tables );
        frame_guard.setLineNumber( 161 );
        SET_ATTRIBUTE( _python_tuple_empty, _python_var_self.asObject(), _python_str_plain_extra_order_by );
        frame_guard.setLineNumber( 166 );
        {
                PyObjectTemporary tmp_identifier( MAKE_TUPLE2( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) ).asObject(), Py_True ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_deferred_loading );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_where.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_where = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_where == key )
            {
                if (unlikely( _python_par_where ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'where'" );
                    goto error_exit;
                }

                _python_par_where = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_where, key ) )
            {
                if (unlikely( _python_par_where ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'where'" );
                    goto error_exit;
                }

                _python_par_where = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_where != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'where'" );
             goto error_exit;
         }

        _python_par_where = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_where == NULL )
    {
        _python_par_where = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_where );
    }


    return impl_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_model, _python_par_where );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_where );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_sql( _python_str_plain_sql );
    PyObjectLocalVariable _python_var_params( _python_str_plain_params );

    // Actual function code.
    static PyFrameObject *frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___str___of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_03cd9a39bcb1c9fac506e997468c55b0, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 176 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_sql_with_params ) ).asObject() ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_sql.assign0( _python_tmp_element_1.asObject() );
            _python_var_params.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 177 );
        {
            PyObjectTempKeeper0 op1;
            return ( op1.assign( _python_var_sql.asObject() ), BINARY_OPERATION_REMAINDER( op1.asObject0(), _python_var_params.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_sql.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_2d18ff1176b8f71d98800f710d66778d, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 184 );
        {
            PyObjectTempKeeper1 call1;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _mvar_django__db__models__sql__query_DEFAULT_DB_ALIAS.asObject0() ) ) ).asObject(), _python_str_plain_as_sql ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "sql_with_params() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "sql_with_params() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "sql_with_params() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "sql_with_params() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "sql_with_params() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "sql_with_params() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "sql_with_params() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "sql_with_params() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "sql_with_params() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "sql_with_params() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "sql_with_params() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "sql_with_params() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "sql_with_params() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "sql_with_params() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "sql_with_params() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "sql_with_params() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "sql_with_params() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );

    // Actual function code.
    static PyFrameObject *frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_8061374deafb918594c87082ec2bccc0, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 187 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_result.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clone ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_memo.asObject(), _python_str_plain_memo ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 188 );
        {
                PyObject *tmp_identifier = _python_var_result.asObject();
                PyObject *tmp_subscribed = _python_var_memo.asObject();
                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_id ), _python_var_self.asObject() ) ).asObject() );
        }
        frame_guard.setLineNumber( 189 );
        return _python_var_result.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memo.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_result.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memo == key )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memo, key ) )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_memo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memo );

    return NULL;
}

static PyObject *dparse_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_20cc1afafe4e335f4b8017e97c336d50, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 192 );
        return _python_var_self.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prepare() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prepare() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prepare() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prepare() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "prepare() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "prepare() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prepare() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prepare() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "prepare() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prepare() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_using, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_aggregate( _python_str_plain_aggregate );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_84f65ded3593f0887b850d6612c23300, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 195 );
        if ( ( ( _python_var_using.asObject() == Py_None ) && ( _python_var_connection.asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 196 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_2b52a506854cb4464c0e7a117f563308 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 197 );
        if ( CHECK_IF_TRUE( _python_var_using.asObject() ) )
        {
            frame_guard.setLineNumber( 198 );
            {
                PyObjectTempKeeper0 subscr1;
                _python_var_connection.assign1( ( subscr1.assign( _mvar_django__db__models__sql__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_using.asObject() ) ) );
            }
        }
        {
            frame_guard.setLineNumber( 201 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 201 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 201 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_aggregate.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 202 );
                {
                    PyObjectTempKeeper1 call3;
                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_check_aggregate_support ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_aggregate.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 204 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 call8;
            PyObjectTempKeeper0 call9;
            return ( call7.assign( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_compiler ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_compiler ) ).asObject() ) ) ), call8.assign( _python_var_self.asObject() ), call9.assign( _python_var_connection.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), call9.asObject0(), _python_var_using.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_alias.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_using = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_compiler() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_compiler() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_compiler() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_compiler() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_compiler() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_compiler() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_compiler() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_compiler() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_compiler() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_compiler() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_compiler() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_compiler() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_compiler() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_compiler() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_using == NULL )
    {
        _python_par_using = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_using );
    }
    if ( _python_par_connection == NULL )
    {
        _python_par_connection = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_connection );
    }


    return impl_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_using, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_using );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_3f809ad93c8353df91274a1aa2e83bf4, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 212 );
        return LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_meta() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_meta() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_meta() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_meta() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_meta() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_meta() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_meta() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_meta() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_meta() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_meta() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_meta() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_meta() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_meta() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_meta() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_meta() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_meta() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_meta() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_klass, PyObject *_python_par_memo, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_klass( _python_str_plain_klass, _python_par_klass );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_7e9067c7685939c6861d20d5e6b6a144, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 219 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_Empty.asObject0() ) );
        frame_guard.setLineNumber( 220 );
        {
            PyObjectTempKeeper0 keeper_0;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_klass.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain___class__ );
        }
        }
        frame_guard.setLineNumber( 221 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 222 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_alias_refcount );
        }
        frame_guard.setLineNumber( 223 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_alias_map );
        }
        frame_guard.setLineNumber( 224 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_table_map ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_table_map );
        }
        frame_guard.setLineNumber( 225 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_join_map );
        }
        frame_guard.setLineNumber( 226 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default_cols ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_default_cols );
        }
        frame_guard.setLineNumber( 227 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default_ordering ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_default_ordering );
        }
        frame_guard.setLineNumber( 228 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_standard_ordering ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_standard_ordering );
        }
        frame_guard.setLineNumber( 229 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_included_inherited_models ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_included_inherited_models );
        }
        frame_guard.setLineNumber( 230 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_obj.asObject(), _python_str_plain_ordering_aliases );
        frame_guard.setLineNumber( 231 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_select );
        }
        frame_guard.setLineNumber( 232 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_obj.asObject(), _python_str_plain_related_select_cols );
        frame_guard.setLineNumber( 233 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_tables );
        }
        frame_guard.setLineNumber( 234 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_clone ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_where );
        }
        frame_guard.setLineNumber( 235 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_where_class );
        }
        frame_guard.setLineNumber( 236 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_group_by ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 237 );
            SET_ATTRIBUTE( Py_None, _python_var_obj.asObject(), _python_str_plain_group_by );
        }
        else
        {
            frame_guard.setLineNumber( 239 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_group_by ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_group_by );
            }
        }
        frame_guard.setLineNumber( 240 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_having ) ).asObject(), _python_str_plain_clone ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_having );
        }
        frame_guard.setLineNumber( 241 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_order_by ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_order_by );
        }
        {
            frame_guard.setLineNumber( 242 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ).asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_obj.asObject(), _python_str_plain_low_mark );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_obj.asObject(), _python_str_plain_high_mark );
            }
        }
        frame_guard.setLineNumber( 243 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_distinct ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_distinct );
        }
        frame_guard.setLineNumber( 244 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_distinct_fields ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_distinct_fields );
        }
        frame_guard.setLineNumber( 245 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select_for_update ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_select_for_update );
        }
        frame_guard.setLineNumber( 246 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select_for_update_nowait ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_select_for_update_nowait );
        }
        frame_guard.setLineNumber( 247 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select_related ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_select_related );
        }
        frame_guard.setLineNumber( 248 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_obj.asObject(), _python_str_plain_related_select_cols );
        frame_guard.setLineNumber( 249 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_aggregates );
        }
        frame_guard.setLineNumber( 250 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select_mask ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 251 );
            SET_ATTRIBUTE( Py_None, _python_var_obj.asObject(), _python_str_plain_aggregate_select_mask );
        }
        else
        {
            frame_guard.setLineNumber( 253 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select_mask ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_aggregate_select_mask );
            }
        }
        frame_guard.setLineNumber( 259 );
        SET_ATTRIBUTE( Py_None, _python_var_obj.asObject(), _python_str_plain__aggregate_select_cache );
        frame_guard.setLineNumber( 260 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_depth ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_max_depth );
        }
        frame_guard.setLineNumber( 261 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_extra );
        }
        frame_guard.setLineNumber( 262 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_select_mask ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 263 );
            SET_ATTRIBUTE( Py_None, _python_var_obj.asObject(), _python_str_plain_extra_select_mask );
        }
        else
        {
            frame_guard.setLineNumber( 265 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_select_mask ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_extra_select_mask );
            }
        }
        frame_guard.setLineNumber( 266 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__extra_select_cache ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 267 );
            SET_ATTRIBUTE( Py_None, _python_var_obj.asObject(), _python_str_plain__extra_select_cache );
        }
        else
        {
            frame_guard.setLineNumber( 269 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__extra_select_cache ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain__extra_select_cache );
            }
        }
        frame_guard.setLineNumber( 270 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_tables ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_extra_tables );
        }
        frame_guard.setLineNumber( 271 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_order_by ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_extra_order_by );
        }
        frame_guard.setLineNumber( 272 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 make_tuple5;
            {
                PyObjectTemporary tmp_identifier( ( make_tuple5.assign( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_copy.asObject0(), _python_str_plain_copy ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deferred_loading ) ).asObject(), _python_int_0, 0 ) ).asObject() ) ) ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deferred_loading ) ).asObject(), _python_int_pos_1, 1 ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_deferred_loading );
        }
        }
        frame_guard.setLineNumber( 273 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter_is_sticky ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_used_aliases ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 274 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_used_aliases ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_used_aliases );
            }
        }
        else
        {
            frame_guard.setLineNumber( 276 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_used_aliases );
            }
        }
        frame_guard.setLineNumber( 277 );
        SET_ATTRIBUTE( Py_False, _python_var_obj.asObject(), _python_str_plain_filter_is_sticky );
        frame_guard.setLineNumber( 279 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain___dict__ ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 280 );
        if ( HAS_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__setup_query ) )
        {
            frame_guard.setLineNumber( 281 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__setup_query ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 282 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_memo.updateLocalsDict( _python_var_klass.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_klass = NULL;
    PyObject *_python_par_memo = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "clone() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument klass was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_klass );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_klass == NULL );

            _python_par_klass = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_klass );

            kw_found += 1;
        }
    }

    // Check if argument memo was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_memo );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_memo == NULL );

            _python_par_memo = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_memo );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clone() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clone() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clone() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clone() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clone() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clone() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clone() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clone() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clone() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clone() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_klass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'klass'" );
             goto error_exit;
         }

        _python_par_klass = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clone() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_klass == NULL )
    {
        _python_par_klass = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_klass );
    }
    if ( _python_par_memo == NULL )
    {
        _python_par_memo = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_memo );
    }


    return impl_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_klass, _python_par_memo, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_klass );
    Py_XDECREF( _python_par_memo );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_field, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );

    // Actual function code.
    static PyFrameObject *frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_3e721f9503b96daff79393c87295a36c, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 291 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_convert_values ) ), call2.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_field.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "convert_values() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "convert_values() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "convert_values() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "convert_values() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "convert_values() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "convert_values() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_value, _python_par_field, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_aggregate, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_aggregate( _python_str_plain_aggregate, _python_par_aggregate );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );

    // Actual function code.
    static PyFrameObject *frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_40c721dccc11dbd2cfcdf3797bb5aeef, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 300 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 301 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_is_ordinal ) ).asObject() ) )
            {
                return INCREASE_REFCOUNT( _python_int_0 );
            }
            frame_guard.setLineNumber( 304 );
            return _python_var_value.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 305 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_is_ordinal ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 307 );
                return TO_INT( _python_var_value.asObject() );
            }
            else
            {
                frame_guard.setLineNumber( 308 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_is_computed ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 310 );
                    return TO_FLOAT( _python_var_value.asObject() );
                }
                else
                {
                    frame_guard.setLineNumber( 313 );
                    {
                        PyObjectTempKeeper1 call1;
                        PyObjectTempKeeper0 call2;
                        PyObjectTempKeeper1 call3;
                        return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_convert_values ) ), call2.assign( _python_var_value.asObject() ), call3.assign( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_field ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), _python_var_connection.asObject() ) );
                    }
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_aggregate = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolve_aggregate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_aggregate == key )
            {
                if (unlikely( _python_par_aggregate ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'aggregate'" );
                    goto error_exit;
                }

                _python_par_aggregate = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_aggregate, key ) )
            {
                if (unlikely( _python_par_aggregate ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'aggregate'" );
                    goto error_exit;
                }

                _python_par_aggregate = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolve_aggregate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "resolve_aggregate() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_aggregate != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'aggregate'" );
             goto error_exit;
         }

        _python_par_aggregate = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_aggregate() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_value, _python_par_aggregate, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_aggregate );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );
    PyObjectLocalVariable _python_var_AggregateQuery( _python_str_plain_AggregateQuery );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_aggregate( _python_str_plain_aggregate );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );
    PyObjectLocalVariable _python_var_q( _python_str_plain_q );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_b4b11291f47abd455dd5763a3722386e, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 319 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select ) ).asObject() ) )) )
        {
            return PyDict_New();
        }
        frame_guard.setLineNumber( 325 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_group_by ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 326 );
            _python_var_AggregateQuery.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_2314435326e2135a8801de0dba78339a, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, PyObjectTemporary( _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_q.updateLocalsDict( _python_var_result.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_AggregateQuery.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_AggregateQuery_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_AggregateQuery ) );
            frame_guard.setLineNumber( 327 );
            {
                PyObjectTempKeeper0 call1;
                _python_var_query.assign1( ( call1.assign( _python_var_AggregateQuery.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 329 );
            _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clone ) ).asObject() ) );
            {
                frame_guard.setLineNumber( 333 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 333 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 333 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                            _python_var_aggregate.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 334 );
                    if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_is_summary ) ).asObject() ) )
                    {
                        frame_guard.setLineNumber( 335 );
                        {
                                PyObject *tmp_identifier = _python_var_aggregate.asObject();
                                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_aggregate_select ) );
                                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_alias.asObject() );
                        }
                        frame_guard.setLineNumber( 336 );
                        {
                                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_aggregate_select ) );
                                DEL_SUBSCRIPT( tmp_subscribed.asObject(), _python_var_alias.asObject() );
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 338 );
            try
            {
                frame_guard.setLineNumber( 339 );
                {
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper0 call4;
                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_add_subquery ) ), call4.assign( _python_var_obj.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_using.asObject() ) ) );
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( _mvar_django__db__models__sql__query_EmptyResultSet.asObject0() ) )
                {
                    frame_guard.detachFrame();
                    frame_guard.setLineNumber( 341 );
                    return TO_DICT( PyObjectTemporary( impl_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_aggregate_select ) ).asObject() ) ) ).asObject(), NULL );
                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 346 );
            _python_var_query.assign0( _python_var_self.asObject() );
            frame_guard.setLineNumber( 347 );
            SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_select );
            frame_guard.setLineNumber( 348 );
            SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_default_cols );
            frame_guard.setLineNumber( 349 );
            SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_extra );
            frame_guard.setLineNumber( 350 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_remove_inherited_models ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 352 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_clear_ordering ) ).asObject(), Py_True ) );
        frame_guard.setLineNumber( 353 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_clear_limits ) ).asObject() ) );
        frame_guard.setLineNumber( 354 );
        SET_ATTRIBUTE( Py_False, _python_var_query.asObject(), _python_str_plain_select_for_update );
        frame_guard.setLineNumber( 355 );
        SET_ATTRIBUTE( Py_False, _python_var_query.asObject(), _python_str_plain_select_related );
        frame_guard.setLineNumber( 356 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_query.asObject(), _python_str_plain_related_select_cols );
        frame_guard.setLineNumber( 358 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper1 call8;
            _python_var_result.assign1( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_using.asObject() ) ) ).asObject(), _python_str_plain_execute_sql ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _mvar_django__db__models__sql__query_SINGLE.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 359 );
        if ( ( _python_var_result.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 360 );
            _python_var_result.assign1( impl_listcontr_2_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_aggregate_select ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ), _python_var_q ) );
        }
        frame_guard.setLineNumber( 362 );
        {
            PyObjectTempKeeper1 call11;
            return TO_DICT( PyObjectTemporary( impl_listcontr_3_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( ( call11.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_aggregate_select ) ).asObject(), _python_str_plain_items ) ).asObject() ) ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_zip ), call11.asObject0(), _python_var_result.asObject() ) ) ).asObject() ), _python_var_aggregate, _python_var_alias, _python_var_self, _python_var_using, _python_var_val ) ).asObject(), NULL );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_q.updateLocalsDict( _python_var_result.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_AggregateQuery.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_aggregation() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_aggregation() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_aggregation() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_aggregation() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_aggregation() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_aggregation() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_aggregation() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_aggregation() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_aggregation() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_aggregation() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_aggregation() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_aggregation() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_aggregation() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_aggregation() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_aggregation() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_aggregation() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_aggregation() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_aggregation() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_aggregation() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_aggregation() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_alias;
};

static void _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_alias.setVariableName( _python_str_plain_alias );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query );
            }

            frame_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_004fea034e6160e35771def62e9a63a8, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 342 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 342 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_alias.assign0( _python_tmp_iter_value.asObject() );
                        YIELD_VALUE( generator, MAKE_TUPLE2( _python_context->python_var_alias.asObject(), Py_None ) );

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_c46d42d9a3e21e50bda0a76c851ca406,
            _python_context,
            _context_generator_genexpr_1_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_q )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 360 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 360 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_q.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), Py_None ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_aggregate,PyObjectLocalVariable &python_closure_alias,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalParameterVariableNoDel &python_closure_using,PyObjectLocalVariable &python_closure_val )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 363 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 363 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 363 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    {
                        frame_guard.setLineNumber( 363 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_element_1.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        python_closure_alias.assign0( _python_tmp_element_1.asObject() );
                        python_closure_aggregate.assign0( _python_tmp_element_2.asObject() );
                    }
                    python_closure_val.assign0( _python_tmp_element_2.asObject() );
                }
                {
                    PyObjectTempKeeper1 call5;
                    PyObjectTempKeeper1 call6;
                    PyObjectTempKeeper0 make_tuple3;
                    PyObjectTempKeeper0 make_tuple8;
                    PyObjectTempKeeper0 subscr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple8.assign( python_closure_alias.asObject() ), MAKE_TUPLE2( make_tuple8.asObject0(), PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_resolve_aggregate ) ), call6.assign( ( make_tuple3.assign( python_closure_val.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), python_closure_aggregate.asObject() ) ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__sql__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), python_closure_using.asObject() ) ) ).asObject(), _python_str_plain_connection ) ).asObject() ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_AggregateQuery( _python_str_plain_AggregateQuery );
    PyObjectLocalVariable _python_var_subquery( _python_str_plain_subquery );
    PyObjectLocalVariable _python_var_number( _python_str_plain_number );

    // Actual function code.
    static PyFrameObject *frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_eb35799297297558d251a1199ace9607, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 372 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clone ) ).asObject() ) );
        frame_guard.setLineNumber( 373 );
        if ( ( RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ) ).asObject(), _python_int_pos_1 ) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select ) ).asObject() ) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_distinct ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_distinct_fields ) ).asObject() ) ) ) ) )
        {
            frame_guard.setLineNumber( 377 );
            _python_var_AggregateQuery.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_2314435326e2135a8801de0dba78339a, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, PyObjectTemporary( _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_number.updateLocalsDict( _python_var_subquery.updateLocalsDict( _python_var_AggregateQuery.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ).asObject(), _python_list_str_plain_AggregateQuery_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_AggregateQuery ) );
            frame_guard.setLineNumber( 378 );
            _python_var_subquery.assign0( _python_var_obj.asObject() );
            frame_guard.setLineNumber( 379 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_subquery.asObject(), _python_str_plain_clear_ordering ) ).asObject(), Py_True ) );
            frame_guard.setLineNumber( 380 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_subquery.asObject(), _python_str_plain_clear_limits ) ).asObject() ) );
            frame_guard.setLineNumber( 382 );
            {
                PyObjectTempKeeper0 call1;
                _python_var_obj.assign1( ( call1.assign( _python_var_AggregateQuery.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_model ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 383 );
            try
            {
                frame_guard.setLineNumber( 384 );
                {
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper1 call4;
                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_add_subquery ) ), call4.assign( MAKE_TUPLE1( _python_var_subquery.asObject() ) ), CALL_FUNCTION( call3.asObject0(), call4.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_using.asObject(), _python_str_plain_using ) ).asObject() ) ) );
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( _mvar_django__db__models__sql__query_EmptyResultSet.asObject0() ) )
                {
                    frame_guard.detachFrame();
                    return INCREASE_REFCOUNT( _python_int_0 );
                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        frame_guard.setLineNumber( 391 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_add_count_column ) ).asObject() ) );
        frame_guard.setLineNumber( 392 );
        {
            PyObjectTempKeeper1 call6;
            _python_var_number.assign1( LOOKUP_SUBSCRIPT( PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_get_aggregation ) ), CALL_FUNCTION( call6.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_using.asObject(), _python_str_plain_using ) ).asObject() ) ) ).asObject(), Py_None ) );
        }
        frame_guard.setLineNumber( 397 );
        {
            PyObjectTempKeeper0 op9;
            _python_var_number.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_max ), _python_int_0, PyObjectTemporary( ( op9.assign( _python_var_number.asObject() ), BINARY_OPERATION_SUB( op9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ).asObject() ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 398 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 399 );
            {
                PyObjectTempKeeper0 call14;
                PyObjectTempKeeper1 op11;
                _python_var_number.assign1( ( call14.assign( _python_var_number.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_min ), call14.asObject0(), PyObjectTemporary( ( op11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ), BINARY_OPERATION_SUB( op11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ).asObject() ) ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 401 );
        return _python_var_number.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_number.updateLocalsDict( _python_var_subquery.updateLocalsDict( _python_var_AggregateQuery.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_count() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_count() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_count() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_count() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_count() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_count() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_count() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_count() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_count() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_count() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_count() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_count() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_count() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_count() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_count() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_count() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_count() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_count() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );
    PyObjectLocalVariable _python_var_q( _python_str_plain_q );
    PyObjectLocalVariable _python_var_compiler( _python_str_plain_compiler );

    // Actual function code.
    static PyFrameObject *frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_1acb2e34295feff7d6f42c4a9f409cd9, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 404 );
        _python_var_q.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clone ) ).asObject() ) );
        frame_guard.setLineNumber( 405 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q.asObject(), _python_str_plain_clear_select_clause ) ).asObject() ) );
        frame_guard.setLineNumber( 406 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_POSARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q.asObject(), _python_str_plain_add_extra ) ).asObject(), PyObjectTemporary( MAKE_TUPLE6( PyObjectTemporary( PyDict_Copy( _python_dict_5268827fe25d043c696340679639cf67 ) ).asObject(), Py_None, Py_None, Py_None, Py_None, Py_None ) ).asObject() ) );
        frame_guard.setLineNumber( 407 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q.asObject(), _python_str_plain_set_extra_mask ) ).asObject(), PyObjectTemporary( LIST_COPY( _python_list_str_plain_a_list ) ).asObject() ) );
        frame_guard.setLineNumber( 408 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q.asObject(), _python_str_plain_clear_ordering ) ).asObject(), Py_True ) );
        frame_guard.setLineNumber( 409 );
        DECREASE_REFCOUNT( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q.asObject(), _python_str_plain_set_limits ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_9af0905ad080f311628ca23621b19221 ) ).asObject() ) );
        frame_guard.setLineNumber( 410 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_compiler.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_q.asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_using.asObject(), _python_str_plain_using ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 411 );
        {
            PyObjectTempKeeper1 call4;
            return INCREASE_REFCOUNT( TO_BOOL( PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_compiler.asObject(), _python_str_plain_execute_sql ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _mvar_django__db__models__sql__query_SINGLE.asObject0() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_compiler.updateLocalsDict( _python_var_q.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "has_results() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "has_results() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "has_results() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "has_results() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "has_results() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "has_results() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "has_results() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "has_results() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "has_results() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "has_results() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "has_results() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "has_results() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "has_results() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "has_results() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "has_results() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "has_results() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "has_results() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "has_results() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "has_results() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "has_results() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_rhs, PyObject *_python_par_connector )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_rhs( _python_str_plain_rhs, _python_par_rhs );
    PyObjectLocalParameterVariableNoDel _python_var_connector( _python_str_plain_connector, _python_par_connector );
    PyObjectLocalVariable _python_var_change_map( _python_str_plain_change_map );
    PyObjectLocalVariable _python_var_conjunction( _python_str_plain_conjunction );
    PyObjectLocalVariable _python_var_reuse( _python_str_plain_reuse );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_table( _python_str_plain_table );
    PyObjectLocalVariable _python_var__( _python_str_plain__ );
    PyObjectLocalVariable _python_var_join_type( _python_str_plain_join_type );
    PyObjectLocalVariable _python_var_lhs( _python_str_plain_lhs );
    PyObjectLocalVariable _python_var_join_cols( _python_str_plain_join_cols );
    PyObjectLocalVariable _python_var_nullable( _python_str_plain_nullable );
    PyObjectLocalVariable _python_var_join_field( _python_str_plain_join_field );
    PyObjectLocalVariable _python_var_promote( _python_str_plain_promote );
    PyObjectLocalVariable _python_var_new_alias( _python_str_plain_new_alias );
    PyObjectLocalVariable _python_var_rhs_used_joins( _python_str_plain_rhs_used_joins );
    PyObjectLocalVariable _python_var_to_promote( _python_str_plain_to_promote );
    PyObjectLocalVariable _python_var_w( _python_str_plain_w );
    PyObjectLocalVariable _python_var_col( _python_str_plain_col );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_new_col( _python_str_plain_new_col );
    PyObjectLocalVariable _python_var_extra_select_mask( _python_str_plain_extra_select_mask );

    // Actual function code.
    static PyFrameObject *frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_4c5bdc54c829bdb87a27cdcaffc349c4, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 422 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( (!( ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_model ) ).asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 422 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_cc8cd9761f7406066568056596db5ac7 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 424 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 424 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_bb5fc3af99c8d20b7994edd66d0263fd ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 426 );
        {
            PyObjectTempKeeper1 cmp3;
            if ( (!( ( cmp3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_distinct ) ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_distinct ) ).asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 426 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_451431b27a896a2f3a28be0700a31384 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 428 );
        {
            PyObjectTempKeeper1 cmp5;
            if ( (!( ( cmp5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_distinct_fields ) ), RICH_COMPARE_BOOL_EQ( cmp5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_distinct_fields ) ).asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 428 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_143693553a739fd04d124fa70e16c965 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 431 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_remove_inherited_models ) ).asObject() ) );
        _python_var_change_map.assign1( PyDict_New() );
        frame_guard.setLineNumber( 434 );
        {
            PyObjectTempKeeper0 cmp7;
            _python_var_conjunction.assign1( ( cmp7.assign( _python_var_connector.asObject() ), RICH_COMPARE_EQ( cmp7.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 448 );
        _python_var_reuse.assign1( ( CHECK_IF_TRUE( _python_var_conjunction.asObject() ) ? CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) : CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject() ) ) );
        frame_guard.setLineNumber( 451 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_initial_alias ) ).asObject() ) );
        {
            frame_guard.setLineNumber( 454 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_tables ) ).asObject(), 1, PY_SSIZE_T_MAX ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 454 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_alias.assign0( _python_tmp_iter_value.asObject() );
                }
                {
                    frame_guard.setLineNumber( 455 );
                    PyObject *_tmp_python_tmp_source_iter;
                    {
                        PyObjectTempKeeper1 subscr9;
                        _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( subscr9.assign( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_var_alias.asObject() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                    PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                    PyObjectTemporary _python_tmp_element_5( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 4 ) );
                    PyObjectTemporary _python_tmp_element_6( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 5 ) );
                    PyObjectTemporary _python_tmp_element_7( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 6 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 7 );
                    _python_var_table.assign0( _python_tmp_element_1.asObject() );
                    _python_var__.assign0( _python_tmp_element_2.asObject() );
                    _python_var_join_type.assign0( _python_tmp_element_3.asObject() );
                    _python_var_lhs.assign0( _python_tmp_element_4.asObject() );
                    _python_var_join_cols.assign0( _python_tmp_element_5.asObject() );
                    _python_var_nullable.assign0( _python_tmp_element_6.asObject() );
                    _python_var_join_field.assign0( _python_tmp_element_7.asObject() );
                }
                frame_guard.setLineNumber( 456 );
                {
                    PyObjectTempKeeper0 cmp11;
                    _python_var_promote.assign1( ( cmp11.assign( _python_var_join_type.asObject() ), RICH_COMPARE_EQ( cmp11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 459 );
                {
                    PyObjectTempKeeper1 call13;
                    PyObjectTempKeeper0 call14;
                    _python_var_lhs.assign1( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_change_map.asObject(), _python_str_plain_get ) ), call14.assign( _python_var_lhs.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), _python_var_lhs.asObject() ) ) );
                }
                frame_guard.setLineNumber( 460 );
                {
                    PyObjectTempKeeper1 call27;
                    PyObjectTempKeeper1 call28;
                    PyObjectTempKeeper0 make_dict16;
                    PyObjectTempKeeper0 make_dict18;
                    PyObjectTempKeeper0 make_dict20;
                    PyObjectTempKeeper0 make_tuple24;
                    PyObjectTempKeeper0 make_tuple25;
                    _python_var_new_alias.assign1( ( call27.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join ) ), call28.assign( MAKE_TUPLE1( PyObjectTemporary( ( make_tuple24.assign( _python_var_lhs.asObject() ), make_tuple25.assign( _python_var_table.asObject() ), MAKE_TUPLE3( make_tuple24.asObject0(), make_tuple25.asObject0(), _python_var_join_cols.asObject() ) ) ).asObject() ) ), CALL_FUNCTION( call27.asObject0(), call28.asObject0(), PyObjectTemporary( ( make_dict16.assign( _python_var_reuse.asObject() ), make_dict18.assign( UNARY_OPERATION( UNARY_NOT, _python_var_conjunction.asObject() ) ), make_dict20.assign( _python_var_nullable.asObject() ), MAKE_DICT4( make_dict16.asObject0(), _python_str_plain_reuse, make_dict18.asObject0(), _python_str_plain_outer_if_first, make_dict20.asObject0(), _python_str_plain_nullable, _python_var_join_field.asObject(), _python_str_plain_join_field ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 464 );
                if ( CHECK_IF_TRUE( _python_var_promote.asObject() ) )
                {
                    frame_guard.setLineNumber( 465 );
                    {
                        PyObjectTempKeeper1 call30;
                        DECREASE_REFCOUNT( ( call30.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_joins ) ), CALL_FUNCTION_WITH_ARGS( call30.asObject0(), PyObjectTemporary( MAKE_LIST1( _python_var_new_alias.asObject1() ) ).asObject() ) ) );
                    }
                }
                frame_guard.setLineNumber( 469 );
                {
                    PyObjectTempKeeper1 call32;
                    DECREASE_REFCOUNT( ( call32.assign( LOOKUP_ATTRIBUTE( _python_var_reuse.asObject(), _python_str_plain_discard ) ), CALL_FUNCTION_WITH_ARGS( call32.asObject0(), _python_var_new_alias.asObject() ) ) );
                }
                frame_guard.setLineNumber( 470 );
                {
                        PyObject *tmp_identifier = _python_var_new_alias.asObject();
                        PyObject *tmp_subscribed = _python_var_change_map.asObject();
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, _python_var_alias.asObject() );
                }
                frame_guard.setLineNumber( 471 );
                {
                    PyObjectTempKeeper1 subscr36;
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( subscr36.assign( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_alias_refcount ) ), LOOKUP_SUBSCRIPT( subscr36.asObject0(), _python_var_alias.asObject() ) ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 476 );
                    {
                        PyObjectTempKeeper1 call34;
                        DECREASE_REFCOUNT( ( call34.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unref_alias ) ), CALL_FUNCTION_WITH_ARGS( call34.asObject0(), _python_var_new_alias.asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 482 );
        if ( (!( CHECK_IF_TRUE( _python_var_conjunction.asObject() ) )) )
        {
            frame_guard.setLineNumber( 483 );
            _python_var_rhs_used_joins.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_change_map.asObject(), _python_str_plain_values ) ).asObject() ) ).asObject() ) );
            frame_guard.setLineNumber( 484 );
            _python_var_to_promote.assign1( impl_listcontr_1_of_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject() ), _python_var_alias, _python_var_rhs_used_joins ) );
            frame_guard.setLineNumber( 486 );
            {
                PyObjectTempKeeper1 call38;
                DECREASE_REFCOUNT( ( call38.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_joins ) ), CALL_FUNCTION_WITH_ARGS( call38.asObject0(), _python_var_to_promote.asObject(), Py_True ) ) );
            }
        }
        frame_guard.setLineNumber( 490 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_where ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 491 );
            _python_var_w.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_clone ) ).asObject() ) );
            frame_guard.setLineNumber( 492 );
            {
                PyObjectTempKeeper1 call41;
                DECREASE_REFCOUNT( ( call41.assign( LOOKUP_ATTRIBUTE( _python_var_w.asObject(), _python_str_plain_relabel_aliases ) ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), _python_var_change_map.asObject() ) ) );
            }
            frame_guard.setLineNumber( 493 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 497 );
                {
                    PyObjectTempKeeper1 call43;
                    PyObjectTempKeeper1 call44;
                    DECREASE_REFCOUNT( ( call43.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), call44.assign( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_EverythingNode.asObject0() ) ), CALL_FUNCTION_WITH_ARGS( call43.asObject0(), call44.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 498 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 500 );
                _python_var_w.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) ).asObject() ) );
                frame_guard.setLineNumber( 501 );
                {
                    PyObjectTempKeeper1 call46;
                    PyObjectTempKeeper1 call47;
                    DECREASE_REFCOUNT( ( call46.assign( LOOKUP_ATTRIBUTE( _python_var_w.asObject(), _python_str_plain_add ) ), call47.assign( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_EverythingNode.asObject0() ) ), CALL_FUNCTION_WITH_ARGS( call46.asObject0(), call47.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 503 );
                _python_var_w.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 504 );
        {
            PyObjectTempKeeper1 call49;
            PyObjectTempKeeper0 call50;
            DECREASE_REFCOUNT( ( call49.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), call50.assign( _python_var_w.asObject() ), CALL_FUNCTION_WITH_ARGS( call49.asObject0(), call50.asObject0(), _python_var_connector.asObject() ) ) );
        }
        frame_guard.setLineNumber( 507 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_select );
        {
            frame_guard.setLineNumber( 508 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_select ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 508 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 508 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_col.assign0( _python_tmp_element_1.asObject() );
                        _python_var_field.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 509 );
                if ( BUILTIN_ISINSTANCE_BOOL( _python_var_col.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 510 );
                    {
                        PyObjectTempKeeper1 call52;
                        PyObjectTempKeeper1 call53;
                        PyObjectTempKeeper1 make_tuple55;
                        _python_var_new_col.assign1( ( make_tuple55.assign( ( call52.assign( LOOKUP_ATTRIBUTE( _python_var_change_map.asObject(), _python_str_plain_get ) ), call53.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_col.asObject(), _python_int_0, 0 ) ), CALL_FUNCTION_WITH_ARGS( call52.asObject0(), call53.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_col.asObject(), _python_int_0, 0 ) ).asObject() ) ) ), MAKE_TUPLE2( make_tuple55.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_col.asObject(), _python_int_pos_1, 1 ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 511 );
                    {
                        PyObjectTempKeeper0 call57;
                        PyObjectTempKeeper0 call58;
                        PyObjectTempKeeper1 call60;
                        DECREASE_REFCOUNT( ( call60.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call60.asObject0(), PyObjectTemporary( ( call57.assign( _mvar_django__db__models__sql__query_SelectInfo.asObject0() ), call58.assign( _python_var_new_col.asObject() ), CALL_FUNCTION_WITH_ARGS( call57.asObject0(), call58.asObject0(), _python_var_field.asObject() ) ) ).asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 513 );
                    {
                        PyObjectTempKeeper1 call62;
                        _python_var_new_col.assign1( ( call62.assign( LOOKUP_ATTRIBUTE( _python_var_col.asObject(), _python_str_plain_relabeled_clone ) ), CALL_FUNCTION_WITH_ARGS( call62.asObject0(), _python_var_change_map.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 514 );
                    {
                        PyObjectTempKeeper0 call64;
                        PyObjectTempKeeper0 call65;
                        PyObjectTempKeeper1 call67;
                        DECREASE_REFCOUNT( ( call67.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call67.asObject0(), PyObjectTemporary( ( call64.assign( _mvar_django__db__models__sql__query_SelectInfo.asObject0() ), call65.assign( _python_var_new_col.asObject() ), CALL_FUNCTION_WITH_ARGS( call64.asObject0(), call65.asObject0(), _python_var_field.asObject() ) ) ).asObject() ) ) );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 516 );
        {
            PyObjectTempKeeper0 cmp69;
            if ( ( cmp69.assign( _python_var_connector.asObject() ), RICH_COMPARE_BOOL_EQ( cmp69.asObject0(), _mvar_django__db__models__sql__query_OR.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 520 );
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_extra ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 521 );
                {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_4e088793428709e4126ec884ac1691b2 ) ).asObject() ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
        }
        }
        frame_guard.setLineNumber( 523 );
        {
            PyObjectTempKeeper1 call71;
            DECREASE_REFCOUNT( ( call71.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call71.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_extra ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 524 );
        _python_var_extra_select_mask.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
        frame_guard.setLineNumber( 525 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_select_mask ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 526 );
            {
                PyObjectTempKeeper1 call73;
                DECREASE_REFCOUNT( ( call73.assign( LOOKUP_ATTRIBUTE( _python_var_extra_select_mask.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call73.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_select_mask ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 527 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_extra_select_mask ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 528 );
            {
                PyObjectTempKeeper1 call75;
                DECREASE_REFCOUNT( ( call75.assign( LOOKUP_ATTRIBUTE( _python_var_extra_select_mask.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call75.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_extra_select_mask ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 529 );
        if ( CHECK_IF_TRUE( _python_var_extra_select_mask.asObject() ) )
        {
            frame_guard.setLineNumber( 530 );
            {
                PyObjectTempKeeper1 call77;
                DECREASE_REFCOUNT( ( call77.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_set_extra_mask ) ), CALL_FUNCTION_WITH_ARGS( call77.asObject0(), _python_var_extra_select_mask.asObject() ) ) );
            }
        }
        {
            frame_guard.setLineNumber( 531 );
            PyObjectTemporary _python_tmp_inplace_start( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_tables ) );
            PyObject *_tmp_python_tmp_inplace_end;
            {
                PyObjectTempKeeper0 op79;
                _tmp_python_tmp_inplace_end = ( op79.assign( _python_tmp_inplace_start.asObject() ), BINARY_OPERATION( PyNumber_InPlaceAdd, op79.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_extra_tables ) ).asObject() ) );
            }
            PyObjectTemporary _python_tmp_inplace_end( _tmp_python_tmp_inplace_end );
            if ( ( _python_tmp_inplace_start.asObject() != _python_tmp_inplace_end.asObject() ) )
            {
                frame_guard.setLineNumber( 531 );
                {
                        PyObject *tmp_identifier = _python_tmp_inplace_end.asObject();
                        SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_extra_tables );
                }
            }
        }
        frame_guard.setLineNumber( 535 );
        {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_order_by ) ).asObject() ) ? LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_order_by ) ).asObject(), 0, PY_SSIZE_T_MAX ) : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_order_by ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_order_by );
        }
        frame_guard.setLineNumber( 536 );
        {
            PyObjectTempKeeper1 keeper_1;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_1.assign( LOOKUP_ATTRIBUTE( _python_var_rhs.asObject(), _python_str_plain_extra_order_by ) ) ) ? keeper_1.asObject() : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_order_by ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_extra_order_by );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connector.updateLocalsDict( _python_var_rhs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_extra_select_mask.updateLocalsDict( _python_var_new_col.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_col.updateLocalsDict( _python_var_w.updateLocalsDict( _python_var_to_promote.updateLocalsDict( _python_var_rhs_used_joins.updateLocalsDict( _python_var_new_alias.updateLocalsDict( _python_var_promote.updateLocalsDict( _python_var_join_field.updateLocalsDict( _python_var_nullable.updateLocalsDict( _python_var_join_cols.updateLocalsDict( _python_var_lhs.updateLocalsDict( _python_var_join_type.updateLocalsDict( _python_var__.updateLocalsDict( _python_var_table.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_reuse.updateLocalsDict( _python_var_conjunction.updateLocalsDict( _python_var_change_map.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_rhs = NULL;
    PyObject *_python_par_connector = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "combine() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_rhs == key )
            {
                if (unlikely( _python_par_rhs ))
                {
                    PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'rhs'" );
                    goto error_exit;
                }

                _python_par_rhs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connector == key )
            {
                if (unlikely( _python_par_connector ))
                {
                    PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'connector'" );
                    goto error_exit;
                }

                _python_par_connector = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_rhs, key ) )
            {
                if (unlikely( _python_par_rhs ))
                {
                    PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'rhs'" );
                    goto error_exit;
                }

                _python_par_rhs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connector, key ) )
            {
                if (unlikely( _python_par_connector ))
                {
                    PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'connector'" );
                    goto error_exit;
                }

                _python_par_connector = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "combine() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "combine() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "combine() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "combine() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "combine() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "combine() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "combine() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "combine() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "combine() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "combine() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "combine() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "combine() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "combine() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_rhs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'rhs'" );
             goto error_exit;
         }

        _python_par_rhs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connector != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "combine() got multiple values for keyword argument 'connector'" );
             goto error_exit;
         }

        _python_par_connector = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_rhs, _python_par_connector );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_rhs );
    Py_XDECREF( _python_par_connector );

    return NULL;
}

static PyObject *dparse_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_alias,PyObjectLocalVariable &python_closure_rhs_used_joins )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 484 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 484 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_alias.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( cmp1.assign( python_closure_alias.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), python_closure_rhs_used_joins.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 484 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_alias.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_target, PyObject *_python_par_callback )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_target( _python_str_plain_target, _python_par_target );
    PyObjectLocalParameterVariableNoDel _python_var_callback( _python_str_plain_callback, _python_par_callback );
    PyObjectLocalVariable _python_var_field_names( _python_str_plain_field_names );
    PyObjectLocalVariable _python_var_defer( _python_str_plain_defer );
    PyObjectLocalVariable _python_var_orig_opts( _python_str_plain_orig_opts );
    PyObjectLocalVariable _python_var_seen( _python_str_plain_seen );
    PyObjectLocalVariable _python_var_must_include( _python_str_plain_must_include );
    PyObjectLocalVariable _python_var_field_name( _python_str_plain_field_name );
    PyObjectLocalVariable _python_var_parts( _python_str_plain_parts );
    PyObjectLocalVariable _python_var_cur_model( _python_str_plain_cur_model );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_old_model( _python_str_plain_old_model );
    PyObjectLocalVariable _python_var_source( _python_str_plain_source );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_model( _python_str_plain_model );
    PyObjectLocalVariable _python_var__( _python_str_plain__ );
    PyObjectLocalVariable _python_var_workset( _python_str_plain_workset );
    PyObjectLocalVariable _python_var_values( _python_str_plain_values );
    PyObjectLocalVariable _python_var_m( _python_str_plain_m );

    // Actual function code.
    static PyFrameObject *frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_11c2118da5c6f1789e2653a1bd35a2ed, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 552 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deferred_loading ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_field_names.assign0( _python_tmp_element_1.asObject() );
            _python_var_defer.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 553 );
        if ( (!( CHECK_IF_TRUE( _python_var_field_names.asObject() ) )) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 555 );
        _python_var_orig_opts.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_meta ) ).asObject() ) );
        _python_var_seen.assign1( PyDict_New() );
        frame_guard.setLineNumber( 557 );
        {
            PyObjectTempKeeper1 make_dict1;
            _python_var_must_include.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( MAKE_LIST1( LOOKUP_ATTRIBUTE( _python_var_orig_opts.asObject(), _python_str_plain_pk ) ) ).asObject() ) ), MAKE_DICT1( make_dict1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_orig_opts.asObject(), _python_str_plain_concrete_model ) ).asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 558 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_field_names.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 558 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_field_name.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 559 );
                {
                    PyObjectTempKeeper1 call3;
                    _python_var_parts.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_field_name.asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 560 );
                _python_var_cur_model.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) );
                frame_guard.setLineNumber( 561 );
                _python_var_opts.assign0( _python_var_orig_opts.asObject() );
                {
                    frame_guard.setLineNumber( 562 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_INDEX_SLICE( _python_var_parts.asObject(), 0, -1 ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 562 );
                            PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_2 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                            _python_var_name.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 563 );
                        _python_var_old_model.assign0( _python_var_cur_model.asObject() );
                        frame_guard.setLineNumber( 564 );
                        {
                            PyObjectTempKeeper1 call5;
                            _python_var_source.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_name.asObject() ) ) ).asObject(), _python_int_0, 0 ) );
                        }
                        frame_guard.setLineNumber( 565 );
                        {
                            PyObjectTempKeeper0 call7;
                            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call7.assign( _mvar_django__db__models__sql__query_is_reverse_o2o.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_source.asObject() ) ) ).asObject() ) )
                        {
                            frame_guard.setLineNumber( 566 );
                            _python_var_cur_model.assign1( LOOKUP_ATTRIBUTE( _python_var_source.asObject(), _python_str_plain_model ) );
                        }
                        else
                        {
                            frame_guard.setLineNumber( 568 );
                            _python_var_cur_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_source.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) );
                        }
                        }
                        frame_guard.setLineNumber( 569 );
                        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_cur_model.asObject(), _python_str_plain__meta ) );
                        frame_guard.setLineNumber( 573 );
                        {
                            PyObjectTempKeeper0 call13;
                            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call13.assign( _mvar_django__db__models__sql__query_is_reverse_o2o.asObject0() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_source.asObject() ) ) ).asObject() ) )) )
                        {
                            frame_guard.setLineNumber( 574 );
                            {
                                PyObjectTempKeeper1 call11;
                                PyObjectTempKeeper0 subscr9;
                                DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr9.assign( _python_var_must_include.asObject() ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_var_old_model.asObject() ) ) ).asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_source.asObject() ) ) );
                            }
                        }
                        }
                        frame_guard.setLineNumber( 575 );
                        {
                            PyObjectTempKeeper0 call15;
                            PyObjectTempKeeper0 call16;
                            PyObjectTempKeeper0 call17;
                            DECREASE_REFCOUNT( ( call15.assign( _mvar_django__db__models__sql__query_add_to_dict.asObject0() ), call16.assign( _python_var_must_include.asObject() ), call17.assign( _python_var_cur_model.asObject() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), call16.asObject0(), call17.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_pk ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
                {
                    frame_guard.setLineNumber( 576 );
                    PyObject *_tmp_python_tmp_source_iter;
                    {
                        PyObjectTempKeeper1 call19;
                        _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_parts.asObject(), _python_int_neg_1, -1 ) ).asObject() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                    PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
                    _python_var_field.assign0( _python_tmp_element_1.asObject() );
                    _python_var_model.assign0( _python_tmp_element_2.asObject() );
                    _python_var__.assign0( _python_tmp_element_3.asObject() );
                    _python_var__.assign0( _python_tmp_element_4.asObject() );
                }
                frame_guard.setLineNumber( 577 );
                if ( ( _python_var_model.asObject() == Py_None ) )
                {
                    frame_guard.setLineNumber( 578 );
                    _python_var_model.assign0( _python_var_cur_model.asObject() );
                }
                frame_guard.setLineNumber( 579 );
                {
                    PyObjectTempKeeper0 call25;
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call25.assign( _mvar_django__db__models__sql__query_is_reverse_o2o.asObject0() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_field.asObject() ) ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 580 );
                    {
                        PyObjectTempKeeper0 call21;
                        PyObjectTempKeeper0 call22;
                        PyObjectTempKeeper0 call23;
                        DECREASE_REFCOUNT( ( call21.assign( _mvar_django__db__models__sql__query_add_to_dict.asObject0() ), call22.assign( _python_var_seen.asObject() ), call23.assign( _python_var_model.asObject() ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), call22.asObject0(), call23.asObject0(), _python_var_field.asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 582 );
        if ( CHECK_IF_TRUE( _python_var_defer.asObject() ) )
        {
            _python_var_workset.assign1( PyDict_New() );
            {
                frame_guard.setLineNumber( 588 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call27;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call27.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_var_seen.asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 588 );
                        PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_3 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                        {
                            frame_guard.setLineNumber( 588 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_model.assign0( _python_tmp_element_1.asObject() );
                            _python_var_values.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    {
                        frame_guard.setLineNumber( 589 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_fields_with_model ) ).asObject() ) ).asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 589 );
                                PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_4 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                                {
                                    frame_guard.setLineNumber( 589 );
                                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                    _python_var_field.assign0( _python_tmp_element_1.asObject() );
                                    _python_var_m.assign0( _python_tmp_element_2.asObject() );
                                }
                            }
                            frame_guard.setLineNumber( 590 );
                            {
                                PyObjectTempKeeper0 cmp29;
                                if ( ( cmp29.assign( _python_var_field.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp29.asObject0(), _python_var_values.asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 591 );
                                CONSIDER_THREADING(); continue;
                            }
                            }
                            frame_guard.setLineNumber( 592 );
                            {
                                PyObjectTempKeeper0 call31;
                                PyObjectTempKeeper0 call32;
                                PyObjectTempKeeper0 call33;
                                PyObjectTempKeeper0 keeper_0;
                                DECREASE_REFCOUNT( ( call31.assign( _mvar_django__db__models__sql__query_add_to_dict.asObject0() ), call32.assign( _python_var_workset.asObject() ), call33.assign( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_m.asObject() ) ) ? keeper_0.asObject0() : _python_var_model.asObject() ) ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), call32.asObject0(), call33.asObject0(), _python_var_field.asObject() ) ) );
                            }

                           CONSIDER_THREADING();
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
            {
                frame_guard.setLineNumber( 593 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call35;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call35.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), _python_var_must_include.asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 593 );
                        PyObject *_tmp_unpack_5 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_5 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_5 );
                        {
                            frame_guard.setLineNumber( 593 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_model.assign0( _python_tmp_element_1.asObject() );
                            _python_var_values.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 598 );
                    {
                        PyObjectTempKeeper0 cmp41;
                        if ( ( cmp41.assign( _python_var_model.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp41.asObject0(), _python_var_workset.asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 599 );
                        {
                            PyObjectTempKeeper1 call39;
                            PyObjectTempKeeper0 subscr37;
                            DECREASE_REFCOUNT( ( call39.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr37.assign( _python_var_workset.asObject() ), LOOKUP_SUBSCRIPT( subscr37.asObject0(), _python_var_model.asObject() ) ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), _python_var_values.asObject() ) ) );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            {
                frame_guard.setLineNumber( 600 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call43;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call43.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call43.asObject0(), _python_var_workset.asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 600 );
                        PyObject *_tmp_unpack_6 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_6 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_6 );
                        {
                            frame_guard.setLineNumber( 600 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_model.assign0( _python_tmp_element_1.asObject() );
                            _python_var_values.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 601 );
                    {
                        PyObjectTempKeeper0 call45;
                        PyObjectTempKeeper0 call46;
                        PyObjectTempKeeper0 call47;
                        DECREASE_REFCOUNT( ( call45.assign( _python_var_callback.asObject() ), call46.assign( _python_var_target.asObject() ), call47.assign( _python_var_model.asObject() ), CALL_FUNCTION_WITH_ARGS( call45.asObject0(), call46.asObject0(), call47.asObject0(), _python_var_values.asObject() ) ) );
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        else
        {
            {
                frame_guard.setLineNumber( 603 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call49;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call49.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call49.asObject0(), _python_var_must_include.asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 603 );
                        PyObject *_tmp_unpack_7 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_7 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_7 );
                        {
                            frame_guard.setLineNumber( 603 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_model.assign0( _python_tmp_element_1.asObject() );
                            _python_var_values.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 604 );
                    {
                        PyObjectTempKeeper0 cmp55;
                        if ( ( cmp55.assign( _python_var_model.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp55.asObject0(), _python_var_seen.asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 605 );
                        {
                            PyObjectTempKeeper1 call53;
                            PyObjectTempKeeper0 subscr51;
                            DECREASE_REFCOUNT( ( call53.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr51.assign( _python_var_seen.asObject() ), LOOKUP_SUBSCRIPT( subscr51.asObject0(), _python_var_model.asObject() ) ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call53.asObject0(), _python_var_values.asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 610 );
                        {
                                PyObject *tmp_identifier = _python_var_values.asObject();
                                PyObject *tmp_subscribed = _python_var_seen.asObject();
                                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, _python_var_model.asObject() );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            {
                frame_guard.setLineNumber( 614 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_orig_opts.asObject(), _python_str_plain_get_parent_list ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 614 );
                        PyObject *_tmp_unpack_8 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_8 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_8 );
                        _python_var_model.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 615 );
                    {
                        PyObjectTempKeeper0 cmp57;
                        if ( ( cmp57.assign( _python_var_model.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp57.asObject0(), _python_var_seen.asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 616 );
                        {
                                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
                                PyObject *tmp_subscribed = _python_var_seen.asObject();
                                SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_var_model.asObject() );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            {
                frame_guard.setLineNumber( 617 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call59;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call59.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call59.asObject0(), _python_var_seen.asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 617 );
                        PyObject *_tmp_unpack_9 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_9 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_9 );
                        {
                            frame_guard.setLineNumber( 617 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_model.assign0( _python_tmp_element_1.asObject() );
                            _python_var_values.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 618 );
                    {
                        PyObjectTempKeeper0 call61;
                        PyObjectTempKeeper0 call62;
                        PyObjectTempKeeper0 call63;
                        DECREASE_REFCOUNT( ( call61.assign( _python_var_callback.asObject() ), call62.assign( _python_var_target.asObject() ), call63.assign( _python_var_model.asObject() ), CALL_FUNCTION_WITH_ARGS( call61.asObject0(), call62.asObject0(), call63.asObject0(), _python_var_values.asObject() ) ) );
                    }

                   CONSIDER_THREADING();
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_callback.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_m.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var_workset.updateLocalsDict( _python_var__.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_old_model.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_cur_model.updateLocalsDict( _python_var_parts.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_must_include.updateLocalsDict( _python_var_seen.updateLocalsDict( _python_var_orig_opts.updateLocalsDict( _python_var_defer.updateLocalsDict( _python_var_field_names.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_target = NULL;
    PyObject *_python_par_callback = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_data() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_target == key )
            {
                if (unlikely( _python_par_target ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'target'" );
                    goto error_exit;
                }

                _python_par_target = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_callback == key )
            {
                if (unlikely( _python_par_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'callback'" );
                    goto error_exit;
                }

                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_target, key ) )
            {
                if (unlikely( _python_par_target ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'target'" );
                    goto error_exit;
                }

                _python_par_target = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_callback, key ) )
            {
                if (unlikely( _python_par_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'callback'" );
                    goto error_exit;
                }

                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "deferred_to_data() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "deferred_to_data() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "deferred_to_data() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "deferred_to_data() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "deferred_to_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_data() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_data() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "deferred_to_data() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_data() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_data() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_target != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'target'" );
             goto error_exit;
         }

        _python_par_target = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_callback != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "deferred_to_data() got multiple values for keyword argument 'callback'" );
             goto error_exit;
         }

        _python_par_callback = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_target, _python_par_callback );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_target );
    Py_XDECREF( _python_par_callback );

    return NULL;
}

static PyObject *dparse_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_target, PyObject *_python_par_model, PyObject *_python_par_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_target( _python_str_plain_target, _python_par_target );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalVariable _python_var_table( _python_str_plain_table );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );

    // Actual function code.
    static PyFrameObject *frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_8554a25ea296ccaaeeefaf361ca0337d, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 626 );
        _python_var_table.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_db_table ) );
        frame_guard.setLineNumber( 627 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_table.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), _python_var_target.asObject() ) ) )
        {
            frame_guard.setLineNumber( 628 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
                    PyObject *tmp_subscribed = _python_var_target.asObject();
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_var_table.asObject() );
            }
        }
        }
        {
            frame_guard.setLineNumber( 629 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_fields.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 629 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_field.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 630 );
                {
                    PyObjectTempKeeper1 call5;
                    PyObjectTempKeeper0 subscr3;
                    DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr3.assign( _python_var_target.asObject() ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_table.asObject() ) ) ).asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_column ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_fields.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_table.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_target = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_target == key )
            {
                if (unlikely( _python_par_target ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'target'" );
                    goto error_exit;
                }

                _python_par_target = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_target, key ) )
            {
                if (unlikely( _python_par_target ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'target'" );
                    goto error_exit;
                }

                _python_par_target = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "deferred_to_columns_cb() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_target != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'target'" );
             goto error_exit;
         }

        _python_par_target = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "deferred_to_columns_cb() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_target, _python_par_model, _python_par_fields );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_target );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_fields );

    return NULL;
}

static PyObject *dparse_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_table_name, PyObject *_python_par_create )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_table_name( _python_str_plain_table_name, _python_par_table_name );
    PyObjectLocalParameterVariableNoDel _python_var_create( _python_str_plain_create, _python_par_create );
    PyObjectLocalVariable _python_var_current( _python_str_plain_current );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );

    // Actual function code.
    static PyFrameObject *frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_3e9ab172228c2ece1fb6e08e0add4538, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 641 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_current.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_table_map ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_table_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 642 );
        if ( ( (!( CHECK_IF_TRUE( _python_var_create.asObject() ) )) && CHECK_IF_TRUE( _python_var_current.asObject() ) ) )
        {
            frame_guard.setLineNumber( 643 );
            _python_var_alias.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_current.asObject(), _python_int_0, 0 ) );
            {
                frame_guard.setLineNumber( 644 );
                PyObjectTemporary _python_tmp_inplace_target( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) );
                PyObject *_python_tmp_inplace_subscript = _python_var_alias.asObject();
                {
                    PyObjectTempKeeper0 subscr3;
                    {
                        PyObjectTemporary tmp_identifier( BINARY_OPERATION( PyNumber_InPlaceAdd, PyObjectTemporary( ( subscr3.assign( _python_tmp_inplace_target.asObject() ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_tmp_inplace_subscript ) ) ).asObject(), _python_int_pos_1 ) );
                        PyObject *tmp_subscribed = _python_tmp_inplace_target.asObject();
                        SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_tmp_inplace_subscript );
                }
                }
            }
            frame_guard.setLineNumber( 645 );
            return MAKE_TUPLE2( _python_var_alias.asObject(), Py_False );
        }
        frame_guard.setLineNumber( 648 );
        if ( CHECK_IF_TRUE( _python_var_current.asObject() ) )
        {
            frame_guard.setLineNumber( 649 );
            {
                PyObjectTempKeeper1 make_tuple5;
                _python_var_alias.assign1( BINARY_OPERATION_REMAINDER( _python_str_digest_754278f1f770a5f41d9cde40f144d1da, PyObjectTemporary( ( make_tuple5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_prefix ) ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ).asObject() ) ).asObject(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) );
            }
            frame_guard.setLineNumber( 650 );
            {
                PyObjectTempKeeper1 call7;
                DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_current.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_alias.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 653 );
            _python_var_alias.assign0( _python_var_table_name.asObject() );
            frame_guard.setLineNumber( 654 );
            {
                    PyObjectTemporary tmp_identifier( MAKE_LIST1( _python_var_alias.asObject1() ) );
                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_table_map ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _python_var_alias.asObject() );
            }
        }
        frame_guard.setLineNumber( 655 );
        {
                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) );
                SET_SUBSCRIPT( _python_int_pos_1, tmp_subscribed.asObject(), _python_var_alias.asObject() );
        }
        frame_guard.setLineNumber( 656 );
        {
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_alias.asObject() ) ) );
        }
        frame_guard.setLineNumber( 657 );
        return MAKE_TUPLE2( _python_var_alias.asObject(), Py_True );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_create.updateLocalsDict( _python_var_table_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_current.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_table_name = NULL;
    PyObject *_python_par_create = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "table_alias() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_table_name == key )
            {
                if (unlikely( _python_par_table_name ))
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'table_name'" );
                    goto error_exit;
                }

                _python_par_table_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_create == key )
            {
                if (unlikely( _python_par_create ))
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'create'" );
                    goto error_exit;
                }

                _python_par_create = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_table_name, key ) )
            {
                if (unlikely( _python_par_table_name ))
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'table_name'" );
                    goto error_exit;
                }

                _python_par_table_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_create, key ) )
            {
                if (unlikely( _python_par_create ))
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'create'" );
                    goto error_exit;
                }

                _python_par_create = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "table_alias() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "table_alias() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "table_alias() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "table_alias() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "table_alias() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "table_alias() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "table_alias() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "table_alias() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "table_alias() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "table_alias() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "table_alias() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "table_alias() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_table_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'table_name'" );
             goto error_exit;
         }

        _python_par_table_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_create != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "table_alias() got multiple values for keyword argument 'create'" );
             goto error_exit;
         }

        _python_par_create = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_create == NULL )
    {
        _python_par_create = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_create );
    }


    return impl_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_table_name, _python_par_create );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_table_name );
    Py_XDECREF( _python_par_create );

    return NULL;
}

static PyObject *dparse_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_alias )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );

    // Actual function code.
    static PyFrameObject *frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_08d909c18eceb91136c053daea302fe7, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 661 );
            PyObjectTemporary _python_tmp_inplace_target( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) );
            PyObject *_python_tmp_inplace_subscript = _python_var_alias.asObject();
            {
                PyObjectTempKeeper0 subscr1;
                {
                    PyObjectTemporary tmp_identifier( BINARY_OPERATION( PyNumber_InPlaceAdd, PyObjectTemporary( ( subscr1.assign( _python_tmp_inplace_target.asObject() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_tmp_inplace_subscript ) ) ).asObject(), _python_int_pos_1 ) );
                    PyObject *tmp_subscribed = _python_tmp_inplace_target.asObject();
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_tmp_inplace_subscript );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_alias.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_alias = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "ref_alias() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "ref_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "ref_alias() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "ref_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "ref_alias() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "ref_alias() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "ref_alias() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "ref_alias() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "ref_alias() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "ref_alias() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "ref_alias() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "ref_alias() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "ref_alias() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "ref_alias() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "ref_alias() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "ref_alias() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "ref_alias() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "ref_alias() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "ref_alias() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "ref_alias() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_alias );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_alias );

    return NULL;
}

static PyObject *dparse_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_alias, PyObject *_python_par_amount )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalParameterVariableNoDel _python_var_amount( _python_str_plain_amount, _python_par_amount );

    // Actual function code.
    static PyFrameObject *frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_3635c18d6581dbcdbb3a620d2b4c9e7b, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 665 );
            PyObjectTemporary _python_tmp_inplace_target( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) );
            PyObject *_python_tmp_inplace_subscript = _python_var_alias.asObject();
            {
                PyObjectTempKeeper1 op3;
                PyObjectTempKeeper0 subscr1;
                {
                    PyObjectTemporary tmp_identifier( ( op3.assign( ( subscr1.assign( _python_tmp_inplace_target.asObject() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_tmp_inplace_subscript ) ) ), BINARY_OPERATION( PyNumber_InPlaceSubtract, op3.asObject0(), _python_var_amount.asObject() ) ) );
                    PyObject *tmp_subscribed = _python_tmp_inplace_target.asObject();
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_tmp_inplace_subscript );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_amount.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_alias = NULL;
    PyObject *_python_par_amount = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "unref_alias() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_amount == key )
            {
                if (unlikely( _python_par_amount ))
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'amount'" );
                    goto error_exit;
                }

                _python_par_amount = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_amount, key ) )
            {
                if (unlikely( _python_par_amount ))
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'amount'" );
                    goto error_exit;
                }

                _python_par_amount = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "unref_alias() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "unref_alias() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "unref_alias() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "unref_alias() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "unref_alias() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "unref_alias() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "unref_alias() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "unref_alias() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "unref_alias() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "unref_alias() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "unref_alias() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "unref_alias() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_amount != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "unref_alias() got multiple values for keyword argument 'amount'" );
             goto error_exit;
         }

        _python_par_amount = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_amount == NULL )
    {
        _python_par_amount = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_amount );
    }


    return impl_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_alias, _python_par_amount );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_alias );
    Py_XDECREF( _python_par_amount );

    return NULL;
}

static PyObject *dparse_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_aliases, PyObject *_python_par_unconditional )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable _python_var_aliases( _python_str_plain_aliases, _python_par_aliases );
    PyObjectLocalParameterVariableNoDel _python_var_unconditional( _python_str_plain_unconditional, _python_par_unconditional );
    PyObjectSharedLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_parent_alias( _python_str_plain_parent_alias );
    PyObjectLocalVariable _python_var_parent_louter( _python_str_plain_parent_louter );
    PyObjectLocalVariable _python_var_already_louter( _python_str_plain_already_louter );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );

    // Actual function code.
    static PyFrameObject *frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_e09f1f4247862596b7690fc93a3b119b, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 682 );
        _python_var_aliases.assign1( TO_LIST( _python_var_aliases.asObject() ) );
        frame_guard.setLineNumber( 683 );
        while( true )
        {
            frame_guard.setLineNumber( 683 );
            if ( (!( CHECK_IF_TRUE( _python_var_aliases.asObject() ) )) )
            {
                frame_guard.setLineNumber( 683 );
                break;
            }
            frame_guard.setLineNumber( 684 );
            _python_var_alias.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_aliases.asObject(), _python_str_plain_pop ) ).asObject(), _python_int_0 ) );
            frame_guard.setLineNumber( 685 );
            {
                PyObjectTempKeeper1 subscr1;
                if ( ( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), _python_str_plain_join_cols ) ).asObject(), _python_int_0, 0 ) ).asObject(), _python_int_pos_1, 1 ) ).asObject() == Py_None ) )
            {
                frame_guard.setLineNumber( 689 );
                CONSIDER_THREADING(); continue;
            }
            }
            frame_guard.setLineNumber( 690 );
            {
                PyObjectTempKeeper1 subscr3;
                _python_var_parent_alias.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), _python_str_plain_lhs_alias ) );
            }
            frame_guard.setLineNumber( 691 );
            {
                PyObjectTempKeeper1 cmp7;
                PyObjectTempKeeper0 keeper_0;
                PyObjectTempKeeper1 subscr5;
                _python_var_parent_louter.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_parent_alias.asObject() ) ) ? ( cmp7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), _python_var_parent_alias.asObject() ) ) ).asObject(), _python_str_plain_join_type ) ), RICH_COMPARE_EQ( cmp7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject() ) ) : INCREASE_REFCOUNT( keeper_0.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 693 );
            {
                PyObjectTempKeeper1 cmp11;
                PyObjectTempKeeper1 subscr9;
                _python_var_already_louter.assign1( ( cmp11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), _python_str_plain_join_type ) ), RICH_COMPARE_EQ( cmp11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 694 );
            {
                PyObjectTempKeeper1 subscr20;
                if ( ( ( CHECK_IF_TRUE( _python_var_unconditional.asObject() ) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr20.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr20.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), _python_str_plain_nullable ) ).asObject() ) || CHECK_IF_TRUE( _python_var_parent_louter.asObject() ) ) ) && (!( CHECK_IF_TRUE( _python_var_already_louter.asObject() ) )) ) )
            {
                frame_guard.setLineNumber( 696 );
                {
                    PyObjectTempKeeper1 call15;
                    PyObjectTempKeeper1 subscr13;
                    _python_var_data.assign1( ( call15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr13.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), _python_str_plain__replace ) ), CALL_FUNCTION( call15.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject(), _python_str_plain_join_type ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 697 );
                {
                        PyObject *tmp_identifier = _python_var_data.asObject();
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) );
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_alias.asObject() );
                }
                frame_guard.setLineNumber( 700 );
                {
                    PyObjectTempKeeper1 call18;
                    DECREASE_REFCOUNT( ( call18.assign( LOOKUP_ATTRIBUTE( _python_var_aliases.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), PyObjectTemporary( impl_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ).asObject(), _python_str_plain_keys ) ).asObject() ) ).asObject() ), _python_var_alias, _python_var_aliases, _python_var_self ) ).asObject() ) ) );
                }
            }
            }

           CONSIDER_THREADING();
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_unconditional.updateLocalsDict( _python_var_aliases.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_already_louter.updateLocalsDict( _python_var_parent_louter.updateLocalsDict( _python_var_parent_alias.updateLocalsDict( _python_var_alias.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_aliases = NULL;
    PyObject *_python_par_unconditional = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "promote_joins() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_aliases == key )
            {
                if (unlikely( _python_par_aliases ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'aliases'" );
                    goto error_exit;
                }

                _python_par_aliases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_unconditional == key )
            {
                if (unlikely( _python_par_unconditional ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'unconditional'" );
                    goto error_exit;
                }

                _python_par_unconditional = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_aliases, key ) )
            {
                if (unlikely( _python_par_aliases ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'aliases'" );
                    goto error_exit;
                }

                _python_par_aliases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_unconditional, key ) )
            {
                if (unlikely( _python_par_unconditional ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'unconditional'" );
                    goto error_exit;
                }

                _python_par_unconditional = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "promote_joins() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "promote_joins() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "promote_joins() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "promote_joins() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "promote_joins() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "promote_joins() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "promote_joins() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "promote_joins() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "promote_joins() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "promote_joins() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "promote_joins() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "promote_joins() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_aliases != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'aliases'" );
             goto error_exit;
         }

        _python_par_aliases = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_unconditional != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "promote_joins() got multiple values for keyword argument 'unconditional'" );
             goto error_exit;
         }

        _python_par_unconditional = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_unconditional == NULL )
    {
        _python_par_unconditional = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_unconditional );
    }


    return impl_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_aliases, _python_par_unconditional );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_aliases );
    Py_XDECREF( _python_par_unconditional );

    return NULL;
}

static PyObject *dparse_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_alias;
    PyObjectClosureVariable python_closure_aliases;
    PyObjectClosureVariable python_closure_self;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_join;
};

static void _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_join.setVariableName( _python_str_plain_join );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query );
            }

            frame_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_1b21f27827ea29c15cca1a8f14fa1d8f, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 701 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 701 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_join.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper1 cmp3;
                            PyObjectTempKeeper0 cmp5;
                            PyObjectTempKeeper1 subscr1;
                            if ( ( ( cmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_context->python_var_join.asObject() ) ) ).asObject(), _python_str_plain_lhs_alias ) ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), _python_context->python_closure_alias.asObject() ) ) && ( cmp5.assign( _python_context->python_var_join.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp5.asObject0(), _python_context->python_closure_aliases.asObject() ) ) ) )
                        {
                            frame_guard.setLineNumber( 701 );
                            YIELD_VALUE( generator, _python_context->python_var_join.asObject1() );
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_alias, PyObjectSharedLocalVariable &python_closure_aliases, PyObjectSharedLocalVariable &python_closure_self )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_t;
    _python_context->python_closure_alias.shareWith( python_closure_alias );
    _python_context->python_closure_aliases.shareWith( python_closure_aliases );
    _python_context->python_closure_self.shareWith( python_closure_self );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_4c1ec1e823576b6078302df35809b874,
            _python_context,
            _context_generator_genexpr_1_of_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_to_counts )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_to_counts( _python_str_plain_to_counts, _python_par_to_counts );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_cur_refcount( _python_str_plain_cur_refcount );
    PyObjectLocalVariable _python_var_unref_amount( _python_str_plain_unref_amount );

    // Actual function code.
    static PyFrameObject *frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_7af494f9d4052e5b42efb2bb9a048835, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 710 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) ).asObject(), _python_str_plain_copy ) ).asObject() ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 710 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 710 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_cur_refcount.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 711 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 op4;
                    _python_var_unref_amount.assign1( ( op4.assign( _python_var_cur_refcount.asObject() ), BINARY_OPERATION_SUB( op4.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_to_counts.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_alias.asObject(), _python_int_0 ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 712 );
                {
                    PyObjectTempKeeper1 call6;
                    PyObjectTempKeeper0 call7;
                    DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unref_alias ) ), call7.assign( _python_var_alias.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_unref_amount.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_to_counts.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_unref_amount.updateLocalsDict( _python_var_cur_refcount.updateLocalsDict( _python_var_alias.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_to_counts = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "reset_refcounts() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reset_refcounts() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_to_counts == key )
            {
                if (unlikely( _python_par_to_counts ))
                {
                    PyErr_Format( PyExc_TypeError, "reset_refcounts() got multiple values for keyword argument 'to_counts'" );
                    goto error_exit;
                }

                _python_par_to_counts = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reset_refcounts() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_to_counts, key ) )
            {
                if (unlikely( _python_par_to_counts ))
                {
                    PyErr_Format( PyExc_TypeError, "reset_refcounts() got multiple values for keyword argument 'to_counts'" );
                    goto error_exit;
                }

                _python_par_to_counts = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "reset_refcounts() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reset_refcounts() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "reset_refcounts() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "reset_refcounts() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reset_refcounts() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "reset_refcounts() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reset_refcounts() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "reset_refcounts() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reset_refcounts() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "reset_refcounts() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "reset_refcounts() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "reset_refcounts() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "reset_refcounts() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "reset_refcounts() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_to_counts != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "reset_refcounts() got multiple values for keyword argument 'to_counts'" );
             goto error_exit;
         }

        _python_par_to_counts = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_to_counts );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_to_counts );

    return NULL;
}

static PyObject *dparse_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_aliases_before, PyObject *_python_par_alias_usage_counts, PyObject *_python_par_num_childs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_aliases_before( _python_str_plain_aliases_before, _python_par_aliases_before );
    PyObjectLocalParameterVariableNoDel _python_var_alias_usage_counts( _python_str_plain_alias_usage_counts, _python_par_alias_usage_counts );
    PyObjectLocalParameterVariableNoDel _python_var_num_childs( _python_str_plain_num_childs, _python_par_num_childs );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_use_count( _python_str_plain_use_count );

    // Actual function code.
    static PyFrameObject *frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_627027f7e380afe088e491ed6733c398, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 723 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_alias_usage_counts.asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 723 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 723 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_use_count.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 724 );
                {
                    PyObjectTempKeeper0 cmp3;
                    PyObjectTempKeeper0 cmp5;
                    if ( ( ( cmp3.assign( _python_var_use_count.asObject() ), RICH_COMPARE_BOOL_LT( cmp3.asObject0(), _python_var_num_childs.asObject() ) ) && ( cmp5.assign( _python_var_alias.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp5.asObject0(), _python_var_aliases_before.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 725 );
                    {
                        PyObjectTempKeeper1 call1;
                        DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_joins ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( MAKE_LIST1( _python_var_alias.asObject1() ) ).asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_num_childs.updateLocalsDict( _python_var_alias_usage_counts.updateLocalsDict( _python_var_aliases_before.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_use_count.updateLocalsDict( _python_var_alias.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_aliases_before = NULL;
    PyObject *_python_par_alias_usage_counts = NULL;
    PyObject *_python_par_num_childs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "promote_disjunction() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_aliases_before == key )
            {
                if (unlikely( _python_par_aliases_before ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'aliases_before'" );
                    goto error_exit;
                }

                _python_par_aliases_before = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias_usage_counts == key )
            {
                if (unlikely( _python_par_alias_usage_counts ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'alias_usage_counts'" );
                    goto error_exit;
                }

                _python_par_alias_usage_counts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_num_childs == key )
            {
                if (unlikely( _python_par_num_childs ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'num_childs'" );
                    goto error_exit;
                }

                _python_par_num_childs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_aliases_before, key ) )
            {
                if (unlikely( _python_par_aliases_before ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'aliases_before'" );
                    goto error_exit;
                }

                _python_par_aliases_before = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias_usage_counts, key ) )
            {
                if (unlikely( _python_par_alias_usage_counts ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'alias_usage_counts'" );
                    goto error_exit;
                }

                _python_par_alias_usage_counts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_num_childs, key ) )
            {
                if (unlikely( _python_par_num_childs ))
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'num_childs'" );
                    goto error_exit;
                }

                _python_par_num_childs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "promote_disjunction() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "promote_disjunction() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "promote_disjunction() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "promote_disjunction() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "promote_disjunction() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "promote_disjunction() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "promote_disjunction() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "promote_disjunction() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "promote_disjunction() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "promote_disjunction() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "promote_disjunction() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "promote_disjunction() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_aliases_before != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'aliases_before'" );
             goto error_exit;
         }

        _python_par_aliases_before = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_alias_usage_counts != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'alias_usage_counts'" );
             goto error_exit;
         }

        _python_par_alias_usage_counts = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_num_childs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "promote_disjunction() got multiple values for keyword argument 'num_childs'" );
             goto error_exit;
         }

        _python_par_num_childs = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_aliases_before, _python_par_alias_usage_counts, _python_par_num_childs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_aliases_before );
    Py_XDECREF( _python_par_alias_usage_counts );
    Py_XDECREF( _python_par_num_childs );

    return NULL;
}

static PyObject *dparse_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_change_map )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable _python_var_change_map( _python_str_plain_change_map, _python_par_change_map );
    PyObjectSharedLocalVariable _python_var_relabel_column( _python_str_plain_relabel_column );
    PyObjectLocalVariable _python_var_ident( _python_str_plain_ident );
    PyObjectLocalVariable _python_var_aliases( _python_str_plain_aliases );
    PyObjectLocalVariable _python_var_old_alias( _python_str_plain_old_alias );
    PyObjectLocalVariable _python_var_new_alias( _python_str_plain_new_alias );
    PyObjectLocalVariable _python_var_alias_data( _python_str_plain_alias_data );
    PyObjectLocalVariable _python_var_table_aliases( _python_str_plain_table_aliases );
    PyObjectLocalVariable _python_var_pos( _python_str_plain_pos );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_key( _python_str_plain_key );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );
    PyObjectLocalVariable _python_var_lhs( _python_str_plain_lhs );
    PyObjectLocalVariable _python_var_col( _python_str_plain_col );
    PyObjectLocalVariable _python_var_s( _python_str_plain_s );
    PyObjectLocalVariable _python_var_a( _python_str_plain_a );

    // Actual function code.
    static PyFrameObject *frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_8da0ab4975fcbb205c7058c3b14244eb, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 733 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 cmp3;
            if ( (!( ( cmp3.assign( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_change_map.asObject(), _python_str_plain_keys ) ).asObject() ) ).asObject() ) ).asObject(), _python_str_plain_intersection ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_change_map.asObject(), _python_str_plain_values ) ).asObject() ) ).asObject() ) ).asObject() ) ) ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) ).asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 733 );
            RAISE_EXCEPTION_WITH_TYPE( PyExc_AssertionError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
        _python_var_relabel_column.assign1( MAKE_FUNCTION_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( _python_var_change_map ) );
        frame_guard.setLineNumber( 743 );
        {
            PyObjectTempKeeper1 call5;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_relabel_aliases ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_change_map.asObject() ) ) );
        }
        frame_guard.setLineNumber( 744 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_having ) ).asObject(), _python_str_plain_relabel_aliases ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_change_map.asObject() ) ) );
        }
        frame_guard.setLineNumber( 745 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_group_by ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 746 );
            {
                    PyObjectTemporary tmp_identifier( impl_listcontr_2_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_group_by ) ).asObject() ), _python_var_col, _python_var_relabel_column ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_group_by );
            }
        }
        frame_guard.setLineNumber( 747 );
        {
                PyObjectTemporary tmp_identifier( impl_listcontr_3_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ), _python_var_relabel_column, _python_var_s ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_select );
        }
        frame_guard.setLineNumber( 749 );
        {
            PyObjectTempKeeper0 call9;
            {
                PyObjectTemporary tmp_identifier( ( call9.assign( _mvar_django__db__models__sql__query_SortedDict.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( impl_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ), _python_var_relabel_column ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_aggregates );
        }
        }
        {
            frame_guard.setLineNumber( 753 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 753 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 753 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_ident.assign0( _python_tmp_element_1.asObject() );
                        _python_var_aliases.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 754 );
                {
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) );
                        DEL_SUBSCRIPT( tmp_subscribed.asObject(), _python_var_ident.asObject() );
                }
                frame_guard.setLineNumber( 755 );
                _python_var_aliases.assign1( TO_TUPLE( PyObjectTemporary( impl_listcontr_5_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( _python_var_aliases.asObject() ), _python_var_a, _python_var_change_map ) ).asObject() ) );
                frame_guard.setLineNumber( 756 );
                {
                    PyObjectTempKeeper1 call11;
                    PyObjectTempKeeper1 call12;
                    PyObjectTempKeeper1 op14;
                    _python_var_ident.assign1( ( op14.assign( MAKE_TUPLE1( PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_change_map.asObject(), _python_str_plain_get ) ), call12.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_ident.asObject(), _python_int_0, 0 ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), call12.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_ident.asObject(), _python_int_0, 0 ) ).asObject() ) ) ).asObject() ) ), BINARY_OPERATION_ADD( op14.asObject0(), PyObjectTemporary( LOOKUP_INDEX_SLICE( _python_var_ident.asObject(), 1, PY_SSIZE_T_MAX ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 757 );
                {
                        PyObject *tmp_identifier = _python_var_aliases.asObject();
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) );
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_ident.asObject() );
                }

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 758 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 call16;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call16.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), _python_var_change_map.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 758 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 758 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_old_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_new_alias.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 759 );
                {
                    PyObjectTempKeeper1 subscr18;
                    _python_var_alias_data.assign1( ( subscr18.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr18.asObject0(), _python_var_old_alias.asObject() ) ) );
                }
                frame_guard.setLineNumber( 760 );
                {
                    PyObjectTempKeeper1 call20;
                    _python_var_alias_data.assign1( ( call20.assign( LOOKUP_ATTRIBUTE( _python_var_alias_data.asObject(), _python_str_plain__replace ) ), CALL_FUNCTION( call20.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_new_alias.asObject(), _python_str_plain_rhs_alias ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 761 );
                {
                    PyObjectTempKeeper1 subscr23;
                    {
                        PyObjectTemporary tmp_identifier( ( subscr23.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) ), LOOKUP_SUBSCRIPT( subscr23.asObject0(), _python_var_old_alias.asObject() ) ) );
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _python_var_new_alias.asObject() );
                }
                }
                frame_guard.setLineNumber( 762 );
                {
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) );
                        DEL_SUBSCRIPT( tmp_subscribed.asObject(), _python_var_old_alias.asObject() );
                }
                frame_guard.setLineNumber( 763 );
                {
                        PyObject *tmp_identifier = _python_var_alias_data.asObject();
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) );
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_new_alias.asObject() );
                }
                frame_guard.setLineNumber( 764 );
                {
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) );
                        DEL_SUBSCRIPT( tmp_subscribed.asObject(), _python_var_old_alias.asObject() );
                }
                frame_guard.setLineNumber( 766 );
                {
                    PyObjectTempKeeper1 subscr25;
                    _python_var_table_aliases.assign1( ( subscr25.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_table_map ) ), LOOKUP_SUBSCRIPT( subscr25.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_alias_data.asObject(), _python_str_plain_table_name ) ).asObject() ) ) );
                }
                {
                    frame_guard.setLineNumber( 767 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_table_aliases.asObject() ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 767 );
                            PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_3 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                            {
                                frame_guard.setLineNumber( 767 );
                                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_var_pos.assign0( _python_tmp_element_1.asObject() );
                                _python_var_alias.assign0( _python_tmp_element_2.asObject() );
                            }
                        }
                        frame_guard.setLineNumber( 768 );
                        {
                            PyObjectTempKeeper0 cmp27;
                            if ( ( cmp27.assign( _python_var_alias.asObject() ), RICH_COMPARE_BOOL_EQ( cmp27.asObject0(), _python_var_old_alias.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 769 );
                            {
                                    PyObject *tmp_identifier = _python_var_new_alias.asObject();
                                    PyObject *tmp_subscribed = _python_var_table_aliases.asObject();
                                    SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, _python_var_pos.asObject() );
                            }
                            frame_guard.setLineNumber( 770 );
                            break;
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
                {
                    frame_guard.setLineNumber( 771 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject() ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 771 );
                            PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_4 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                            {
                                frame_guard.setLineNumber( 771 );
                                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_var_pos.assign0( _python_tmp_element_1.asObject() );
                                _python_var_alias.assign0( _python_tmp_element_2.asObject() );
                            }
                        }
                        frame_guard.setLineNumber( 772 );
                        {
                            PyObjectTempKeeper0 cmp29;
                            if ( ( cmp29.assign( _python_var_alias.asObject() ), RICH_COMPARE_BOOL_EQ( cmp29.asObject0(), _python_var_old_alias.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 773 );
                            {
                                    PyObject *tmp_identifier = _python_var_new_alias.asObject();
                                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) );
                                    SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_pos.asObject() );
                            }
                            frame_guard.setLineNumber( 774 );
                            break;
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 775 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_included_inherited_models ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 775 );
                    PyObject *_tmp_unpack_5 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_5 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_5 );
                    {
                        frame_guard.setLineNumber( 775 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_key.assign0( _python_tmp_element_1.asObject() );
                        _python_var_alias.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 776 );
                {
                    PyObjectTempKeeper0 cmp33;
                    if ( ( cmp33.assign( _python_var_alias.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp33.asObject0(), _python_var_change_map.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 777 );
                    {
                        PyObjectTempKeeper0 subscr31;
                        {
                            PyObjectTemporary tmp_identifier( ( subscr31.assign( _python_var_change_map.asObject() ), LOOKUP_SUBSCRIPT( subscr31.asObject0(), _python_var_alias.asObject() ) ) );
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_included_inherited_models ) );
                            SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _python_var_key.asObject() );
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 780 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 call35;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call35.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ).asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 780 );
                    PyObject *_tmp_unpack_6 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_6 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_6 );
                    {
                        frame_guard.setLineNumber( 780 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_data.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 781 );
                _python_var_lhs.assign1( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_lhs_alias ) );
                frame_guard.setLineNumber( 782 );
                {
                    PyObjectTempKeeper0 cmp42;
                    if ( ( cmp42.assign( _python_var_lhs.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp42.asObject0(), _python_var_change_map.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 783 );
                    {
                        PyObjectTempKeeper1 call39;
                        PyObjectTempKeeper0 subscr37;
                        _python_var_data.assign1( ( call39.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain__replace ) ), CALL_FUNCTION( call39.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( ( subscr37.assign( _python_var_change_map.asObject() ), LOOKUP_SUBSCRIPT( subscr37.asObject0(), _python_var_lhs.asObject() ) ) ).asObject(), _python_str_plain_lhs_alias ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 784 );
                    {
                            PyObject *tmp_identifier = _python_var_data.asObject();
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) );
                            SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_alias.asObject() );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_change_map.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_a.updateLocalsDict( _python_var_s.updateLocalsDict( _python_var_col.updateLocalsDict( _python_var_lhs.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_key.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_pos.updateLocalsDict( _python_var_table_aliases.updateLocalsDict( _python_var_alias_data.updateLocalsDict( _python_var_new_alias.updateLocalsDict( _python_var_old_alias.updateLocalsDict( _python_var_aliases.updateLocalsDict( _python_var_ident.updateLocalsDict( _python_var_relabel_column.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_change_map = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "change_aliases() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "change_aliases() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_change_map == key )
            {
                if (unlikely( _python_par_change_map ))
                {
                    PyErr_Format( PyExc_TypeError, "change_aliases() got multiple values for keyword argument 'change_map'" );
                    goto error_exit;
                }

                _python_par_change_map = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "change_aliases() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_change_map, key ) )
            {
                if (unlikely( _python_par_change_map ))
                {
                    PyErr_Format( PyExc_TypeError, "change_aliases() got multiple values for keyword argument 'change_map'" );
                    goto error_exit;
                }

                _python_par_change_map = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "change_aliases() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "change_aliases() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "change_aliases() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "change_aliases() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "change_aliases() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "change_aliases() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "change_aliases() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "change_aliases() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "change_aliases() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "change_aliases() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "change_aliases() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "change_aliases() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "change_aliases() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "change_aliases() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_change_map != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "change_aliases() got multiple values for keyword argument 'change_map'" );
             goto error_exit;
         }

        _python_par_change_map = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_change_map );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_change_map );

    return NULL;
}

static PyObject *dparse_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_col )
{
    // The context of the function.
    struct _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_col( _python_str_plain_col, _python_par_col );
    PyObjectLocalVariable _python_var_old_alias( _python_str_plain_old_alias );

    // Actual function code.
    static PyFrameObject *frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_5d27e52ad6f9e2f0ca53090dcceaff60, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 736 );
        if ( BUILTIN_ISINSTANCE_BOOL( _python_var_col.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 737 );
            _python_var_old_alias.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_col.asObject(), _python_int_0, 0 ) );
            frame_guard.setLineNumber( 738 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call2;
                PyObjectTempKeeper1 make_tuple4;
                return ( make_tuple4.assign( ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_change_map.asObject(), _python_str_plain_get ) ), call2.assign( _python_var_old_alias.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_old_alias.asObject() ) ) ), MAKE_TUPLE2( make_tuple4.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_col.asObject(), _python_int_pos_1, 1 ) ).asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 740 );
            {
                PyObjectTempKeeper1 call6;
                return ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_col.asObject(), _python_str_plain_relabeled_clone ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_context->python_closure_change_map.asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_col.updateLocalsDict( _python_context->python_closure_change_map.updateLocalsDict( _python_var_old_alias.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_col = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "relabel_column() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_col == key )
            {
                if (unlikely( _python_par_col ))
                {
                    PyErr_Format( PyExc_TypeError, "relabel_column() got multiple values for keyword argument 'col'" );
                    goto error_exit;
                }

                _python_par_col = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_col, key ) )
            {
                if (unlikely( _python_par_col ))
                {
                    PyErr_Format( PyExc_TypeError, "relabel_column() got multiple values for keyword argument 'col'" );
                    goto error_exit;
                }

                _python_par_col = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "relabel_column() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "relabel_column() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "relabel_column() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "relabel_column() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "relabel_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "relabel_column() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "relabel_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "relabel_column() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "relabel_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "relabel_column() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "relabel_column() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "relabel_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "relabel_column() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_col != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "relabel_column() got multiple values for keyword argument 'col'" );
             goto error_exit;
         }

        _python_par_col = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_col );

error_exit:;

    Py_XDECREF( _python_par_col );

    return NULL;
}

static PyObject *dparse_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_col,PyObjectSharedLocalVariable &python_closure_relabel_column )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 746 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 746 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_col.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( python_closure_relabel_column.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_col.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectSharedLocalVariable &python_closure_relabel_column,PyObjectLocalVariable &python_closure_s )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 747 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 747 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_s.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper0 call3;
                    PyObjectTempKeeper1 call4;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call3.assign( _mvar_django__db__models__sql__query_SelectInfo.asObject0() ), call4.assign( ( call1.assign( python_closure_relabel_column.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_s.asObject(), _python_str_plain_col ) ).asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_s.asObject(), _python_str_plain_field ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}



struct _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_relabel_column;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_key;
    PyObjectLocalVariable python_var_col;
};

static void _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_key.setVariableName( _python_str_plain_key );
        _python_context->python_var_col.setVariableName( _python_str_plain_col );

        // Actual function code.
        static PyFrameObject *frame_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
            }

            frame_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_a67f5917fedcd681541a006e7a71984f, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 750 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 750 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 750 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_context->python_var_key.assign0( _python_tmp_element_1.asObject() );
                            _python_context->python_var_col.assign0( _python_tmp_element_2.asObject() );
                        }
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper0 make_tuple3;
                            YIELD_VALUE( generator, ( make_tuple3.assign( _python_context->python_var_key.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( ( call1.assign( _python_context->python_closure_relabel_column.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_col.asObject() ) ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_relabel_column )
{
    // Create context if any
    struct _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t;
    _python_context->python_closure_relabel_column.shareWith( python_closure_relabel_column );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_8b1b8fcdba00f769a0bef6845412f3be,
            _python_context,
            _context_generator_genexpr_4_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_a,PyObjectSharedLocalVariable &python_closure_change_map )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 755 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 755 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_a.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call2;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( python_closure_change_map.asObject(), _python_str_plain_get ) ), call2.assign( python_closure_a.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), python_closure_a.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_exceptions )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_exceptions( _python_str_plain_exceptions, _python_par_exceptions );
    PyObjectLocalVariable _python_var_current( _python_str_plain_current );
    PyObjectLocalVariable _python_var_prefix( _python_str_plain_prefix );
    PyObjectLocalVariable _python_var_change_map( _python_str_plain_change_map );
    PyObjectLocalVariable _python_var_pos( _python_str_plain_pos );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_new_alias( _python_str_plain_new_alias );

    // Actual function code.
    static PyFrameObject *frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_8bd54f469e923695605371c4b8858a7e, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 799 );
        _python_var_current.assign1( BUILTIN_ORD( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_prefix ) ).asObject() ) );
        frame_guard.setLineNumber( 800 );
        if ( (!( RICH_COMPARE_BOOL_LT( _python_var_current.asObject(), _python_int_pos_90 ) )) )
        {
            frame_guard.setLineNumber( 800 );
            RAISE_EXCEPTION_WITH_TYPE( PyExc_AssertionError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        frame_guard.setLineNumber( 801 );
        _python_var_prefix.assign1( BUILTIN_CHR( PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_current.asObject(), _python_int_pos_1 ) ).asObject() ) );
        frame_guard.setLineNumber( 802 );
        {
                PyObject *tmp_identifier = _python_var_prefix.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_alias_prefix );
        }
        frame_guard.setLineNumber( 803 );
        _python_var_change_map.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_SortedDict.asObject0() ) );
        {
            frame_guard.setLineNumber( 804 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 804 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 804 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_pos.assign0( _python_tmp_element_1.asObject() );
                        _python_var_alias.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 805 );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( cmp1.assign( _python_var_alias.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), _python_var_exceptions.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 806 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 807 );
                {
                    PyObjectTempKeeper0 make_tuple3;
                    _python_var_new_alias.assign1( BINARY_OPERATION_REMAINDER( _python_str_digest_754278f1f770a5f41d9cde40f144d1da, PyObjectTemporary( ( make_tuple3.assign( _python_var_prefix.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_pos.asObject() ) ) ).asObject() ) );
                }
                frame_guard.setLineNumber( 808 );
                {
                        PyObject *tmp_identifier = _python_var_new_alias.asObject();
                        PyObject *tmp_subscribed = _python_var_change_map.asObject();
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, _python_var_alias.asObject() );
                }
                frame_guard.setLineNumber( 809 );
                {
                        PyObject *tmp_identifier = _python_var_new_alias.asObject();
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) );
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_pos.asObject() );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 810 );
        {
            PyObjectTempKeeper1 call5;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_change_aliases ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_change_map.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_exceptions.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_new_alias.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_pos.updateLocalsDict( _python_var_change_map.updateLocalsDict( _python_var_prefix.updateLocalsDict( _python_var_current.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_exceptions = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bump_prefix() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bump_prefix() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exceptions == key )
            {
                if (unlikely( _python_par_exceptions ))
                {
                    PyErr_Format( PyExc_TypeError, "bump_prefix() got multiple values for keyword argument 'exceptions'" );
                    goto error_exit;
                }

                _python_par_exceptions = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bump_prefix() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exceptions, key ) )
            {
                if (unlikely( _python_par_exceptions ))
                {
                    PyErr_Format( PyExc_TypeError, "bump_prefix() got multiple values for keyword argument 'exceptions'" );
                    goto error_exit;
                }

                _python_par_exceptions = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bump_prefix() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bump_prefix() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "bump_prefix() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "bump_prefix() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bump_prefix() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "bump_prefix() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bump_prefix() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "bump_prefix() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bump_prefix() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "bump_prefix() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "bump_prefix() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "bump_prefix() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "bump_prefix() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bump_prefix() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_exceptions != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bump_prefix() got multiple values for keyword argument 'exceptions'" );
             goto error_exit;
         }

        _python_par_exceptions = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_exceptions == NULL )
    {
        _python_par_exceptions = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_exceptions );
    }


    return impl_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_exceptions );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_exceptions );

    return NULL;
}

static PyObject *dparse_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );

    // Actual function code.
    static PyFrameObject *frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_da05fd414b4cb7b7390ce072a58189b5, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 817 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 818 );
            _python_var_alias.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject(), _python_int_0, 0 ) );
            frame_guard.setLineNumber( 819 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_ref_alias ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_alias.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 821 );
            {
                PyObjectTempKeeper1 call3;
                _python_var_alias.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( MAKE_TUPLE3( Py_None, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_meta ) ).asObject() ) ).asObject(), _python_str_plain_db_table ) ).asObject(), Py_None ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 822 );
        return _python_var_alias.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_alias.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_initial_alias() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_initial_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_initial_alias() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_initial_alias() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_initial_alias() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_initial_alias() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_initial_alias() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_initial_alias() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_initial_alias() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_initial_alias() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_initial_alias() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_initial_alias() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_initial_alias() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_initial_alias() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_initial_alias() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_initial_alias() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_initial_alias() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_count( _python_str_plain_count );

    // Actual function code.
    static PyFrameObject *frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_51eaf0ff9fd3488b817d4e4750019a69, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 830 );
        return BUILTIN_LEN( PyObjectTemporary( impl_listcontr_1_of_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) ).asObject(), _python_str_plain_values ) ).asObject() ) ).asObject() ), _python_var_count ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_count.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "count_active_tables() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "count_active_tables() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "count_active_tables() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "count_active_tables() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "count_active_tables() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "count_active_tables() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "count_active_tables() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "count_active_tables() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "count_active_tables() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "count_active_tables() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "count_active_tables() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "count_active_tables() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "count_active_tables() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "count_active_tables() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "count_active_tables() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "count_active_tables() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "count_active_tables() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_count )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 830 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 830 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_count.assign0( _python_tmp_iter_value.asObject() );
                if ( CHECK_IF_TRUE( python_closure_count.asObject() ) )
                {
                    frame_guard.setLineNumber( 830 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), _python_int_pos_1 ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_connection, PyObject *_python_par_reuse, PyObject *_python_par_outer_if_first, PyObject *_python_par_nullable, PyObject *_python_par_join_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_reuse( _python_str_plain_reuse, _python_par_reuse );
    PyObjectLocalParameterVariableNoDel _python_var_outer_if_first( _python_str_plain_outer_if_first, _python_par_outer_if_first );
    PyObjectLocalParameterVariableNoDel _python_var_nullable( _python_str_plain_nullable, _python_par_nullable );
    PyObjectLocalParameterVariableNoDel _python_var_join_field( _python_str_plain_join_field, _python_par_join_field );
    PyObjectLocalVariable _python_var_lhs( _python_str_plain_lhs );
    PyObjectLocalVariable _python_var_table( _python_str_plain_table );
    PyObjectLocalVariable _python_var_join_cols( _python_str_plain_join_cols );
    PyObjectLocalVariable _python_var_existing( _python_str_plain_existing );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var__( _python_str_plain__ );
    PyObjectLocalVariable _python_var_join_type( _python_str_plain_join_type );
    PyObjectLocalVariable _python_var_join( _python_str_plain_join );
    PyObjectLocalVariable _python_var_a( _python_str_plain_a );

    // Actual function code.
    static PyFrameObject *frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_27_join_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_ec7887d2b44b60c41607d5f7f53fc643, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 859 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_var_connection.asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
            _python_var_lhs.assign0( _python_tmp_element_1.asObject() );
            _python_var_table.assign0( _python_tmp_element_2.asObject() );
            _python_var_join_cols.assign0( _python_tmp_element_3.asObject() );
        }
        frame_guard.setLineNumber( 860 );
        if ( (!( ( ( _python_var_lhs.asObject() == Py_None ) || ( _python_var_join_field.asObject() != Py_None ) ) )) )
        {
            frame_guard.setLineNumber( 860 );
            RAISE_EXCEPTION_WITH_TYPE( PyExc_AssertionError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        frame_guard.setLineNumber( 861 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_existing.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_connection.asObject(), _python_tuple_empty ) ) );
        }
        frame_guard.setLineNumber( 862 );
        if ( ( _python_var_reuse.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 863 );
            _python_var_reuse.assign0( _python_var_existing.asObject() );
        }
        else
        {
            frame_guard.setLineNumber( 865 );
            _python_var_reuse.assign1( impl_listcontr_1_of_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( _python_var_existing.asObject() ), _python_var_a, _python_var_reuse ) );
        }
        {
            frame_guard.setLineNumber( 866 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_reuse.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 866 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_alias.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 867 );
                {
                    PyObjectTempKeeper1 cmp6;
                    PyObjectTempKeeper1 subscr4;
                    if ( ( CHECK_IF_TRUE( _python_var_join_field.asObject() ) && ( cmp6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr4.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), _python_str_plain_join_field ) ), RICH_COMPARE_BOOL_NE( cmp6.asObject0(), _python_var_join_field.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 872 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 873 );
                {
                    PyObjectTempKeeper1 call8;
                    DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_ref_alias ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_alias.asObject() ) ) );
                }
                frame_guard.setLineNumber( 874 );
                return _python_var_alias.asObject1();

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 877 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call10;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_table_alias ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_table.asObject(), Py_True ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_alias.assign0( _python_tmp_element_1.asObject() );
            _python_var__.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 878 );
        if ( (!( CHECK_IF_TRUE( _python_var_lhs.asObject() ) )) )
        {
            _python_var_join_type.assign0( Py_None );
        }
        else
        {
            frame_guard.setLineNumber( 882 );
            {
                PyObjectTempKeeper1 cmp15;
                PyObjectTempKeeper1 subscr13;
                if ( ( CHECK_IF_TRUE( _python_var_outer_if_first.asObject() ) || ( cmp15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr13.asObject0(), _python_var_lhs.asObject() ) ) ).asObject(), _python_str_plain_join_type ) ), RICH_COMPARE_BOOL_EQ( cmp15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 885 );
                _python_var_join_type.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) );
            }
            else
            {
                frame_guard.setLineNumber( 887 );
                _python_var_join_type.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_INNER ) );
            }
            }
        }
        frame_guard.setLineNumber( 888 );
        {
            PyObjectTempKeeper0 call24;
            PyObjectTempKeeper0 keeper_3;
            PyObjectTempKeeper0 make_tuple17;
            PyObjectTempKeeper0 make_tuple18;
            PyObjectTempKeeper0 make_tuple19;
            PyObjectTempKeeper0 make_tuple20;
            PyObjectTempKeeper0 make_tuple21;
            PyObjectTempKeeper0 make_tuple22;
            _python_var_join.assign1( ( call24.assign( _mvar_django__db__models__sql__query_JoinInfo.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call24.asObject0(), PyObjectTemporary( ( make_tuple17.assign( _python_var_table.asObject() ), make_tuple18.assign( _python_var_alias.asObject() ), make_tuple19.assign( _python_var_join_type.asObject() ), make_tuple20.assign( _python_var_lhs.asObject() ), make_tuple21.assign( ( CHECK_IF_TRUE( keeper_3.assign( _python_var_join_cols.asObject() ) ) ? keeper_3.asObject0() : _python_tuple_tuple_none_none_tuple_tuple ) ), make_tuple22.assign( _python_var_nullable.asObject() ), MAKE_TUPLE7( make_tuple17.asObject0(), make_tuple18.asObject0(), make_tuple19.asObject0(), make_tuple20.asObject0(), make_tuple21.asObject0(), make_tuple22.asObject0(), _python_var_join_field.asObject() ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 890 );
        {
                PyObject *tmp_identifier = _python_var_join.asObject();
                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) );
                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_alias.asObject() );
        }
        frame_guard.setLineNumber( 891 );
        {
            PyObjectTempKeeper0 cmp30;
            if ( ( cmp30.assign( _python_var_connection.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp30.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) ).asObject() ) ) )
        {
            {
                frame_guard.setLineNumber( 892 );
                PyObjectTemporary _python_tmp_inplace_target( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) );
                PyObject *_python_tmp_inplace_subscript = _python_var_connection.asObject();
                {
                    PyObjectTempKeeper1 op28;
                    PyObjectTempKeeper0 subscr26;
                    {
                        PyObjectTemporary tmp_identifier( ( op28.assign( ( subscr26.assign( _python_tmp_inplace_target.asObject() ), LOOKUP_SUBSCRIPT( subscr26.asObject0(), _python_tmp_inplace_subscript ) ) ), BINARY_OPERATION( PyNumber_InPlaceAdd, op28.asObject0(), PyObjectTemporary( MAKE_TUPLE1( _python_var_alias.asObject() ) ).asObject() ) ) );
                        PyObject *tmp_subscribed = _python_tmp_inplace_target.asObject();
                        SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_tmp_inplace_subscript );
                }
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 894 );
            {
                    PyObjectTemporary tmp_identifier( MAKE_TUPLE1( _python_var_alias.asObject() ) );
                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_map ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _python_var_connection.asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 895 );
        return _python_var_alias.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_join_field.updateLocalsDict( _python_var_nullable.updateLocalsDict( _python_var_outer_if_first.updateLocalsDict( _python_var_reuse.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_a.updateLocalsDict( _python_var_join.updateLocalsDict( _python_var_join_type.updateLocalsDict( _python_var__.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_existing.updateLocalsDict( _python_var_join_cols.updateLocalsDict( _python_var_table.updateLocalsDict( _python_var_lhs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_reuse = NULL;
    PyObject *_python_par_outer_if_first = NULL;
    PyObject *_python_par_nullable = NULL;
    PyObject *_python_par_join_field = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "join() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_reuse == key )
            {
                if (unlikely( _python_par_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'reuse'" );
                    goto error_exit;
                }

                _python_par_reuse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_outer_if_first == key )
            {
                if (unlikely( _python_par_outer_if_first ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'outer_if_first'" );
                    goto error_exit;
                }

                _python_par_outer_if_first = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_nullable == key )
            {
                if (unlikely( _python_par_nullable ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'nullable'" );
                    goto error_exit;
                }

                _python_par_nullable = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_join_field == key )
            {
                if (unlikely( _python_par_join_field ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'join_field'" );
                    goto error_exit;
                }

                _python_par_join_field = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_reuse, key ) )
            {
                if (unlikely( _python_par_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'reuse'" );
                    goto error_exit;
                }

                _python_par_reuse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_outer_if_first, key ) )
            {
                if (unlikely( _python_par_outer_if_first ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'outer_if_first'" );
                    goto error_exit;
                }

                _python_par_outer_if_first = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_nullable, key ) )
            {
                if (unlikely( _python_par_nullable ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'nullable'" );
                    goto error_exit;
                }

                _python_par_nullable = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_join_field, key ) )
            {
                if (unlikely( _python_par_join_field ))
                {
                    PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'join_field'" );
                    goto error_exit;
                }

                _python_par_join_field = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "join() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "join() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "join() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "join() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "join() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "join() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "join() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "join() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "join() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "join() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "join() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "join() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "join() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_reuse != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'reuse'" );
             goto error_exit;
         }

        _python_par_reuse = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_outer_if_first != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'outer_if_first'" );
             goto error_exit;
         }

        _python_par_outer_if_first = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_nullable != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'nullable'" );
             goto error_exit;
         }

        _python_par_nullable = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_join_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join() got multiple values for keyword argument 'join_field'" );
             goto error_exit;
         }

        _python_par_join_field = INCREASE_REFCOUNT( args[ 5 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_reuse == NULL )
    {
        _python_par_reuse = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_reuse );
    }
    if ( _python_par_outer_if_first == NULL )
    {
        _python_par_outer_if_first = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_outer_if_first );
    }
    if ( _python_par_nullable == NULL )
    {
        _python_par_nullable = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_nullable );
    }
    if ( _python_par_join_field == NULL )
    {
        _python_par_join_field = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_join_field );
    }


    return impl_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_connection, _python_par_reuse, _python_par_outer_if_first, _python_par_nullable, _python_par_join_field );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_reuse );
    Py_XDECREF( _python_par_outer_if_first );
    Py_XDECREF( _python_par_nullable );
    Py_XDECREF( _python_par_join_field );

    return NULL;
}

static PyObject *dparse_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_a,PyObjectLocalParameterVariableNoDel &python_closure_reuse )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 865 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 865 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_a.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( cmp1.assign( python_closure_a.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), python_closure_reuse.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 865 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_a.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_root_alias( _python_str_plain_root_alias );
    PyObjectLocalVariable _python_var_seen( _python_str_plain_seen );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_model( _python_str_plain_model );

    // Actual function code.
    static PyFrameObject *frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_1dcdf89a1d3f29a83f572aa5bd134aac, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 909 );
        _python_var_opts.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_meta ) ).asObject() ) );
        frame_guard.setLineNumber( 910 );
        _python_var_root_alias.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject(), _python_int_0, 0 ) );
        frame_guard.setLineNumber( 911 );
        _python_var_seen.assign1( MAKE_DICT1( _python_var_root_alias.asObject(), Py_None ) );
        {
            frame_guard.setLineNumber( 913 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_fields_with_model ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 913 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 913 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_field.assign0( _python_tmp_element_1.asObject() );
                        _python_var_model.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 914 );
                {
                    PyObjectTempKeeper0 cmp6;
                    if ( ( cmp6.assign( _python_var_model.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp6.asObject0(), _python_var_seen.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 915 );
                    {
                        PyObjectTempKeeper1 call1;
                        PyObjectTempKeeper0 call2;
                        PyObjectTempKeeper0 call3;
                        PyObjectTempKeeper0 call4;
                        DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join_parent_model ) ), call2.assign( _python_var_opts.asObject() ), call3.assign( _python_var_model.asObject() ), call4.assign( _python_var_root_alias.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), _python_var_seen.asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 916 );
        {
                PyObject *tmp_identifier = _python_var_seen.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_included_inherited_models );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_seen.updateLocalsDict( _python_var_root_alias.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "setup_inherited_models() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_inherited_models() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_inherited_models() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "setup_inherited_models() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "setup_inherited_models() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_inherited_models() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_opts, PyObject *_python_par_model, PyObject *_python_par_alias, PyObject *_python_par_seen )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_opts( _python_str_plain_opts, _python_par_opts );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalParameterVariableNoDel _python_var_seen( _python_str_plain_seen, _python_par_seen );
    PyObjectLocalVariable _python_var_int_opts( _python_str_plain_int_opts );
    PyObjectLocalVariable _python_var_chain( _python_str_plain_chain );
    PyObjectLocalVariable _python_var_int_model( _python_str_plain_int_model );
    PyObjectLocalVariable _python_var_link_field( _python_str_plain_link_field );
    PyObjectLocalVariable _python_var_connection( _python_str_plain_connection );

    // Actual function code.
    static PyFrameObject *frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_5c835998168ebeaab246f8fef7d54d4a, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 927 );
        {
            PyObjectTempKeeper0 cmp3;
            if ( ( cmp3.assign( _python_var_model.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), _python_var_seen.asObject() ) ) )
        {
            frame_guard.setLineNumber( 928 );
            {
                PyObjectTempKeeper0 subscr1;
                return ( subscr1.assign( _python_var_seen.asObject() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_model.asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 929 );
        _python_var_int_opts.assign0( _python_var_opts.asObject() );
        frame_guard.setLineNumber( 930 );
        {
            PyObjectTempKeeper1 call5;
            _python_var_chain.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_base_chain ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_model.asObject() ) ) );
        }
        frame_guard.setLineNumber( 931 );
        if ( ( _python_var_chain.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 932 );
            return _python_var_alias.asObject1();
        }
        {
            frame_guard.setLineNumber( 933 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_chain.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 933 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_int_model.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 934 );
                {
                    PyObjectTempKeeper0 cmp9;
                    if ( ( cmp9.assign( _python_var_int_model.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp9.asObject0(), _python_var_seen.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 935 );
                    {
                        PyObjectTempKeeper0 subscr7;
                        return ( subscr7.assign( _python_var_seen.asObject() ), LOOKUP_SUBSCRIPT( subscr7.asObject0(), _python_var_int_model.asObject() ) );
                    }
                }
                }
                frame_guard.setLineNumber( 940 );
                {
                    PyObjectTempKeeper1 subscr11;
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( subscr11.assign( LOOKUP_ATTRIBUTE( _python_var_int_opts.asObject(), _python_str_plain_parents ) ), LOOKUP_SUBSCRIPT( subscr11.asObject0(), _python_var_int_model.asObject() ) ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 941 );
                    _python_var_int_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_int_model.asObject(), _python_str_plain__meta ) );
                    frame_guard.setLineNumber( 942 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 943 );
                {
                    PyObjectTempKeeper1 call13;
                    _python_var_link_field.assign1( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_int_opts.asObject(), _python_str_plain_get_ancestor_link ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_int_model.asObject() ) ) );
                }
                frame_guard.setLineNumber( 944 );
                _python_var_int_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_int_model.asObject(), _python_str_plain__meta ) );
                frame_guard.setLineNumber( 945 );
                {
                    PyObjectTempKeeper0 make_tuple15;
                    PyObjectTempKeeper1 make_tuple16;
                    _python_var_connection.assign1( ( make_tuple15.assign( _python_var_alias.asObject() ), make_tuple16.assign( LOOKUP_ATTRIBUTE( _python_var_int_opts.asObject(), _python_str_plain_db_table ) ), MAKE_TUPLE3( make_tuple15.asObject0(), make_tuple16.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_link_field.asObject(), _python_str_plain_get_joining_columns ) ).asObject() ) ).asObject() ) ) );
                }
                {
                    frame_guard.setLineNumber( 946 );
                    PyObject *_tmp_python_tmp_assign_source;
                    {
                        PyObjectTempKeeper1 call18;
                        PyObjectTempKeeper1 call19;
                        _tmp_python_tmp_assign_source = ( call18.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join ) ), call19.assign( MAKE_TUPLE1( _python_var_connection.asObject() ) ), CALL_FUNCTION( call18.asObject0(), call19.asObject0(), PyObjectTemporary( MAKE_DICT2( Py_False, _python_str_plain_nullable, _python_var_link_field.asObject(), _python_str_plain_join_field ) ).asObject() ) );
                    }
                    PyObjectTemporary _python_tmp_assign_source( _tmp_python_tmp_assign_source );
                    _python_var_alias.assign0( _python_tmp_assign_source.asObject() );
                    {
                            PyObject *tmp_identifier = _python_tmp_assign_source.asObject();
                            PyObject *tmp_subscribed = _python_var_seen.asObject();
                            SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, _python_var_int_model.asObject() );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 948 );
        {
            PyObjectTempKeeper0 keeper_0;
            return ( CHECK_IF_TRUE( keeper_0.assign( _python_var_alias.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_SUBSCRIPT( _python_var_seen.asObject(), Py_None ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_seen.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_link_field.updateLocalsDict( _python_var_int_model.updateLocalsDict( _python_var_chain.updateLocalsDict( _python_var_int_opts.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_opts = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_alias = NULL;
    PyObject *_python_par_seen = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "join_parent_model() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_opts == key )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_seen == key )
            {
                if (unlikely( _python_par_seen ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'seen'" );
                    goto error_exit;
                }

                _python_par_seen = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_opts, key ) )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_seen, key ) )
            {
                if (unlikely( _python_par_seen ))
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'seen'" );
                    goto error_exit;
                }

                _python_par_seen = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "join_parent_model() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "join_parent_model() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "join_parent_model() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "join_parent_model() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "join_parent_model() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "join_parent_model() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "join_parent_model() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "join_parent_model() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "join_parent_model() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 5 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "join_parent_model() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "join_parent_model() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 5 )
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() takes exactly %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "join_parent_model() takes at least %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_opts != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'opts'" );
             goto error_exit;
         }

        _python_par_opts = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_seen != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "join_parent_model() got multiple values for keyword argument 'seen'" );
             goto error_exit;
         }

        _python_par_seen = INCREASE_REFCOUNT( args[ 4 ] );
    }


    return impl_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_opts, _python_par_model, _python_par_alias, _python_par_seen );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_opts );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_alias );
    Py_XDECREF( _python_par_seen );

    return NULL;
}

static PyObject *dparse_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_key( _python_str_plain_key );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );

    // Actual function code.
    static PyFrameObject *frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_4522f3f083878b99fc43dedc997015b4, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 955 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_included_inherited_models ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 955 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 955 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_key.assign0( _python_tmp_element_1.asObject() );
                        _python_var_alias.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 956 );
                if ( CHECK_IF_TRUE( _python_var_key.asObject() ) )
                {
                    frame_guard.setLineNumber( 957 );
                    {
                        PyObjectTempKeeper1 call1;
                        DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unref_alias ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_alias.asObject() ) ) );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 958 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_included_inherited_models );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_key.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "remove_inherited_models() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "remove_inherited_models() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "remove_inherited_models() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "remove_inherited_models() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "remove_inherited_models() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "remove_inherited_models() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_aggregate, PyObject *_python_par_model, PyObject *_python_par_alias, PyObject *_python_par_is_summary )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_aggregate( _python_str_plain_aggregate, _python_par_aggregate );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalParameterVariableNoDel _python_var_is_summary( _python_str_plain_is_summary, _python_par_is_summary );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_field_list( _python_str_plain_field_list );
    PyObjectLocalVariable _python_var_field_name( _python_str_plain_field_name );
    PyObjectLocalVariable _python_var_col( _python_str_plain_col );
    PyObjectLocalVariable _python_var_source( _python_str_plain_source );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_sources( _python_str_plain_sources );
    PyObjectLocalVariable _python_var_join_list( _python_str_plain_join_list );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_targets( _python_str_plain_targets );
    PyObjectLocalVariable _python_var__( _python_str_plain__ );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );

    // Actual function code.
    static PyFrameObject *frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_824b2ee50b3f9c2d6df83b1149697576, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 965 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 966 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_field_list.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_lookup ) ).asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 967 );
        {
            PyObjectTempKeeper1 cmp27;
            if ( ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_field_list.asObject() ) ).asObject(), _python_int_pos_1 ) && ( cmp27.assign( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_lookup ) ), SEQUENCE_CONTAINS_BOOL( cmp27.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 969 );
            _python_var_field_name.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_field_list.asObject(), _python_int_0, 0 ) );
            frame_guard.setLineNumber( 970 );
            _python_var_col.assign0( _python_var_field_name.asObject() );
            frame_guard.setLineNumber( 971 );
            {
                PyObjectTempKeeper1 subscr3;
                _python_var_source.assign1( ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_field_name.asObject() ) ) );
            }
            frame_guard.setLineNumber( 972 );
            if ( (!( CHECK_IF_TRUE( _python_var_is_summary.asObject() ) )) )
            {
                frame_guard.setLineNumber( 973 );
                {
                    PyObjectTempKeeper0 call8;
                    PyObjectTempKeeper1 make_tuple5;
                    PyObjectTempKeeper0 make_tuple6;
                    {
                        PyObjectTemporary tmp_exception_type( ( call8.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_e97dd60c296be1027ec4f5227fdcc0bc, PyObjectTemporary( ( make_tuple5.assign( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_name ) ), make_tuple6.assign( _python_var_field_name.asObject() ), MAKE_TUPLE3( make_tuple5.asObject0(), make_tuple6.asObject0(), _python_var_field_name.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 975 );
            {
                PyObjectTempKeeper1 cmp25;
                if ( ( RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( _python_var_field_list.asObject() ) ).asObject(), _python_int_pos_1 ) || ( ( cmp25.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_field_list.asObject(), _python_int_0, 0 ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp25.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ).asObject() ), _python_var_i ) ).asObject() ) ) || ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_group_by ) ).asObject() == Py_None ) || (!( CHECK_IF_TRUE( _python_var_is_summary.asObject() ) )) ) ) ) )
            {
                {
                    frame_guard.setLineNumber( 986 );
                    PyObject *_tmp_python_tmp_source_iter;
                    {
                        PyObjectTempKeeper1 call10;
                        PyObjectTempKeeper0 call11;
                        PyObjectTempKeeper0 call12;
                        _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_setup_joins ) ), call11.assign( _python_var_field_list.asObject() ), call12.assign( _python_var_opts.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), call12.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_initial_alias ) ).asObject() ) ).asObject() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                    PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                    PyObjectTemporary _python_tmp_element_5( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 4 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 5 );
                    _python_var_field.assign0( _python_tmp_element_1.asObject() );
                    _python_var_sources.assign0( _python_tmp_element_2.asObject() );
                    _python_var_opts.assign0( _python_tmp_element_3.asObject() );
                    _python_var_join_list.assign0( _python_tmp_element_4.asObject() );
                    _python_var_path.assign0( _python_tmp_element_5.asObject() );
                }
                {
                    frame_guard.setLineNumber( 990 );
                    PyObject *_tmp_python_tmp_source_iter;
                    {
                        PyObjectTempKeeper1 call14;
                        PyObjectTempKeeper0 call15;
                        PyObjectTempKeeper0 call16;
                        _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call14.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_trim_joins ) ), call15.assign( _python_var_sources.asObject() ), call16.assign( _python_var_join_list.asObject() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), call15.asObject0(), call16.asObject0(), _python_var_path.asObject() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
                    _python_var_targets.assign0( _python_tmp_element_1.asObject() );
                    _python_var__.assign0( _python_tmp_element_2.asObject() );
                    _python_var_join_list.assign0( _python_tmp_element_3.asObject() );
                }
                frame_guard.setLineNumber( 995 );
                {
                    PyObjectTempKeeper1 call18;
                    DECREASE_REFCOUNT( ( call18.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_joins ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), _python_var_join_list.asObject(), Py_True ) ) );
                }
                frame_guard.setLineNumber( 997 );
                _python_var_col.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_targets.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_column ) );
                frame_guard.setLineNumber( 998 );
                _python_var_source.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_sources.asObject(), _python_int_0, 0 ) );
                frame_guard.setLineNumber( 999 );
                {
                    PyObjectTempKeeper1 make_tuple21;
                    _python_var_col.assign1( ( make_tuple21.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_join_list.asObject(), _python_int_neg_1, -1 ) ), MAKE_TUPLE2( make_tuple21.asObject0(), _python_var_col.asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1003 );
                _python_var_field_name.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_field_list.asObject(), _python_int_0, 0 ) );
                frame_guard.setLineNumber( 1004 );
                {
                    PyObjectTempKeeper1 call23;
                    _python_var_source.assign1( ( call23.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_field ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_var_field_name.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1005 );
                _python_var_col.assign0( _python_var_field_name.asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 1008 );
        {
            PyObjectTempKeeper1 call37;
            PyObjectTempKeeper1 call38;
            PyObjectTempKeeper0 make_dict29;
            PyObjectTempKeeper0 make_dict31;
            PyObjectTempKeeper0 make_tuple35;
            DECREASE_REFCOUNT( ( call37.assign( LOOKUP_ATTRIBUTE( _python_var_aggregate.asObject(), _python_str_plain_add_to_query ) ), call38.assign( ( make_tuple35.assign( _python_var_self.asObject() ), MAKE_TUPLE2( make_tuple35.asObject0(), _python_var_alias.asObject() ) ) ), CALL_FUNCTION( call37.asObject0(), call38.asObject0(), PyObjectTemporary( ( make_dict29.assign( _python_var_col.asObject() ), make_dict31.assign( _python_var_source.asObject() ), MAKE_DICT3( make_dict29.asObject0(), _python_str_plain_col, make_dict31.asObject0(), _python_str_plain_source, _python_var_is_summary.asObject(), _python_str_plain_is_summary ) ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_is_summary.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var__.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_join_list.updateLocalsDict( _python_var_sources.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_col.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_field_list.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_aggregate = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_alias = NULL;
    PyObject *_python_par_is_summary = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_aggregate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_aggregate == key )
            {
                if (unlikely( _python_par_aggregate ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'aggregate'" );
                    goto error_exit;
                }

                _python_par_aggregate = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_is_summary == key )
            {
                if (unlikely( _python_par_is_summary ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'is_summary'" );
                    goto error_exit;
                }

                _python_par_is_summary = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_aggregate, key ) )
            {
                if (unlikely( _python_par_aggregate ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'aggregate'" );
                    goto error_exit;
                }

                _python_par_aggregate = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_is_summary, key ) )
            {
                if (unlikely( _python_par_is_summary ))
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'is_summary'" );
                    goto error_exit;
                }

                _python_par_is_summary = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_aggregate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_aggregate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_aggregate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_aggregate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_aggregate() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "add_aggregate() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_aggregate() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "add_aggregate() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_aggregate() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 5 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_aggregate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_aggregate() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 5 )
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() takes exactly %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_aggregate() takes at least %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_aggregate != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'aggregate'" );
             goto error_exit;
         }

        _python_par_aggregate = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_is_summary != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_aggregate() got multiple values for keyword argument 'is_summary'" );
             goto error_exit;
         }

        _python_par_is_summary = INCREASE_REFCOUNT( args[ 4 ] );
    }


    return impl_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_aggregate, _python_par_model, _python_par_alias, _python_par_is_summary );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_aggregate );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_alias );
    Py_XDECREF( _python_par_is_summary );

    return NULL;
}

static PyObject *dparse_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_i )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 976 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 976 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_i.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_i.asObject(), _python_str_plain_name ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filter_expr, PyObject *_python_par_branch_negated, PyObject *_python_par_current_negated, PyObject *_python_par_can_reuse )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_filter_expr( _python_str_plain_filter_expr, _python_par_filter_expr );
    PyObjectLocalParameterVariableNoDel _python_var_branch_negated( _python_str_plain_branch_negated, _python_par_branch_negated );
    PyObjectLocalParameterVariableNoDel _python_var_current_negated( _python_str_plain_current_negated, _python_par_current_negated );
    PyObjectLocalParameterVariableNoDel _python_var_can_reuse( _python_str_plain_can_reuse, _python_par_can_reuse );
    PyObjectLocalVariable _python_var_arg( _python_str_plain_arg );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );
    PyObjectLocalVariable _python_var_parts( _python_str_plain_parts );
    PyObjectLocalVariable _python_var_lookup_type( _python_str_plain_lookup_type );
    PyObjectLocalVariable _python_var_num_parts( _python_str_plain_num_parts );
    PyObjectLocalVariable _python_var_lookup_model( _python_str_plain_lookup_model );
    PyObjectLocalVariable _python_var_counter( _python_str_plain_counter );
    PyObjectLocalVariable _python_var_field_name( _python_str_plain_field_name );
    PyObjectLocalVariable _python_var_lookup_field( _python_str_plain_lookup_field );
    PyObjectLocalVariable _python_var_clause( _python_str_plain_clause );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_aggregate( _python_str_plain_aggregate );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_allow_many( _python_str_plain_allow_many );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_sources( _python_str_plain_sources );
    PyObjectLocalVariable _python_var_join_list( _python_str_plain_join_list );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );
    PyObjectLocalVariable _python_var_targets( _python_str_plain_targets );
    PyObjectLocalVariable _python_var_constraint( _python_str_plain_constraint );

    // Actual function code.
    static PyFrameObject *frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_39eb69a68cfde31c2b6ba647717abd82, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1037 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_var_filter_expr.asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_arg.assign0( _python_tmp_element_1.asObject() );
            _python_var_value.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1038 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_parts.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_arg.asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1039 );
        if ( (!( CHECK_IF_TRUE( _python_var_parts.asObject() ) )) )
        {
            frame_guard.setLineNumber( 1040 );
            {
                PyObjectTempKeeper0 call3;
                {
                    PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_bc93c14d353a8c79ee93d18db73f12b6, _python_var_arg.asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        _python_var_lookup_type.assign0( _python_str_plain_exact );
        frame_guard.setLineNumber( 1045 );
        _python_var_num_parts.assign1( BUILTIN_LEN( _python_var_parts.asObject() ) );
        frame_guard.setLineNumber( 1046 );
        {
            PyObjectTempKeeper0 cmp11;
            PyObjectTempKeeper1 cmp9;
            if ( ( RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( _python_var_parts.asObject() ) ).asObject(), _python_int_pos_1 ) && ( ( cmp9.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_parts.asObject(), _python_int_neg_1, -1 ) ), SEQUENCE_CONTAINS_BOOL( cmp9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query_terms ) ).asObject() ) ) && ( cmp11.assign( _python_var_arg.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject() ) ) ) ) )
        {
            frame_guard.setLineNumber( 1050 );
            _python_var_lookup_model.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) );
            {
                frame_guard.setLineNumber( 1051 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_parts.asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1051 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 1051 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_counter.assign0( _python_tmp_element_1.asObject() );
                            _python_var_field_name.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 1052 );
                    try
                    {
                        frame_guard.setLineNumber( 1053 );
                        {
                            PyObjectTempKeeper1 call5;
                            _python_var_lookup_field.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_lookup_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_field_name.asObject() ) ) );
                        }
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( _mvar_django__db__models__sql__query_FieldDoesNotExist.asObject0() ) )
                        {
                            frame_guard.detachFrame();
                            frame_guard.setLineNumber( 1056 );
                            _python_var_lookup_type.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_parts.asObject(), _python_str_plain_pop ) ).asObject() ) );
                            frame_guard.setLineNumber( 1057 );
                            break;
                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }
                    frame_guard.setLineNumber( 1060 );
                    {
                        PyObjectTempKeeper1 cmp7;
                        if ( ( cmp7.assign( BINARY_OPERATION_ADD( _python_var_counter.asObject(), _python_int_pos_1 ) ), RICH_COMPARE_BOOL_LT( cmp7.asObject0(), _python_var_num_parts.asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 1061 );
                        try
                        {
                            frame_guard.setLineNumber( 1062 );
                            _python_var_lookup_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_lookup_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) );
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyExc_AttributeError ) )
                            {
                                frame_guard.detachFrame();
                                frame_guard.setLineNumber( 1065 );
                                _python_var_lookup_type.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_parts.asObject(), _python_str_plain_pop ) ).asObject() ) );
                                frame_guard.setLineNumber( 1066 );
                                break;
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        }
        frame_guard.setLineNumber( 1068 );
        _python_var_clause.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) ).asObject() ) );
        frame_guard.setLineNumber( 1071 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1072 );
            if ( RICH_COMPARE_BOOL_NE( _python_var_lookup_type.asObject(), _python_str_plain_exact ) )
            {
                frame_guard.setLineNumber( 1073 );
                {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_bbcd2ef9e140c2b36a34ffd359b9627e ) ).asObject() ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
            _python_var_lookup_type.assign0( _python_str_plain_isnull );
            _python_var_value.assign0( Py_True );
        }
        else
        {
            frame_guard.setLineNumber( 1076 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_value.asObject() ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 1077 );
                _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( _python_var_value.asObject() ) );
            }
            else
            {
                frame_guard.setLineNumber( 1078 );
                {
                    PyObjectTempKeeper0 isinstance18;
                    if ( ( isinstance18.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance18.asObject0(), _mvar_django__db__models__sql__query_ExpressionNode.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 1080 );
                    {
                        PyObjectTempKeeper0 call15;
                        PyObjectTempKeeper1 call16;
                        PyObjectTempKeeper0 make_tuple13;
                        _python_var_value.assign1( ( call15.assign( _mvar_django__db__models__sql__query_SQLEvaluator.asObject0() ), call16.assign( ( make_tuple13.assign( _python_var_value.asObject() ), MAKE_TUPLE2( make_tuple13.asObject0(), _python_var_self.asObject() ) ) ), CALL_FUNCTION( call15.asObject0(), call16.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_can_reuse.asObject(), _python_str_plain_reuse ) ).asObject() ) ) );
                    }
                }
                }
            }
        }
        frame_guard.setLineNumber( 1085 );
        {
            PyObjectTempKeeper0 subscr20;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr20.assign( _mvar_django__db__models__sql__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr20.asObject0(), _mvar_django__db__models__sql__query_DEFAULT_DB_ALIAS.asObject0() ) ) ).asObject(), _python_str_plain_features ) ).asObject(), _python_str_plain_interprets_empty_strings_as_nulls ) ).asObject() ) && ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_str_plain_exact ) && RICH_COMPARE_BOOL_EQ( _python_var_value.asObject(), _python_str_empty ) ) ) )
        {
            _python_var_value.assign0( Py_True );
            _python_var_lookup_type.assign0( _python_str_plain_isnull );
        }
        }
        {
            frame_guard.setLineNumber( 1090 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1090 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 1090 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_aggregate.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1091 );
                {
                    PyObjectTempKeeper1 call28;
                    PyObjectTempKeeper0 cmp32;
                    PyObjectTempKeeper1 make_tuple30;
                    if ( ( cmp32.assign( _python_var_alias.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp32.asObject0(), PyObjectTemporary( ( make_tuple30.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_parts.asObject(), _python_int_0, 0 ) ), MAKE_TUPLE2( make_tuple30.asObject0(), PyObjectTemporary( ( call28.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0(), _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call28.asObject0(), _python_var_parts.asObject() ) ) ).asObject() ) ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1092 );
                    {
                        PyObjectTempKeeper1 call25;
                        PyObjectTempKeeper1 call26;
                        PyObjectTempKeeper0 make_tuple22;
                        PyObjectTempKeeper0 make_tuple23;
                        DECREASE_REFCOUNT( ( call25.assign( LOOKUP_ATTRIBUTE( _python_var_clause.asObject(), _python_str_plain_add ) ), call26.assign( ( make_tuple22.assign( _python_var_aggregate.asObject() ), make_tuple23.assign( _python_var_lookup_type.asObject() ), MAKE_TUPLE3( make_tuple22.asObject0(), make_tuple23.asObject0(), _python_var_value.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), call26.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
                    }
                    frame_guard.setLineNumber( 1093 );
                    return _python_var_clause.asObject1();
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1095 );
        _python_var_opts.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_meta ) ).asObject() ) );
        frame_guard.setLineNumber( 1096 );
        _python_var_alias.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_initial_alias ) ).asObject() ) );
        frame_guard.setLineNumber( 1097 );
        _python_var_allow_many.assign0( UNARY_OPERATION( UNARY_NOT, _python_var_branch_negated.asObject() ) );
        frame_guard.setLineNumber( 1099 );
        try
        {
            {
                frame_guard.setLineNumber( 1100 );
                PyObject *_tmp_python_tmp_source_iter;
                {
                    PyObjectTempKeeper1 call49;
                    PyObjectTempKeeper0 make_tuple44;
                    PyObjectTempKeeper0 make_tuple45;
                    PyObjectTempKeeper0 make_tuple46;
                    PyObjectTempKeeper0 make_tuple47;
                    _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call49.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_setup_joins ) ), CALL_FUNCTION( call49.asObject0(), PyObjectTemporary( ( make_tuple44.assign( _python_var_parts.asObject() ), make_tuple45.assign( _python_var_opts.asObject() ), make_tuple46.assign( _python_var_alias.asObject() ), make_tuple47.assign( _python_var_can_reuse.asObject() ), MAKE_TUPLE5( make_tuple44.asObject0(), make_tuple45.asObject0(), make_tuple46.asObject0(), make_tuple47.asObject0(), _python_var_allow_many.asObject() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_61f83366c458f7e8f99e3d9221621353 ) ).asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                PyObjectTemporary _python_tmp_element_5( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 4 ) );
                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 5 );
                _python_var_field.assign0( _python_tmp_element_1.asObject() );
                _python_var_sources.assign0( _python_tmp_element_2.asObject() );
                _python_var_opts.assign0( _python_tmp_element_3.asObject() );
                _python_var_join_list.assign0( _python_tmp_element_4.asObject() );
                _python_var_path.assign0( _python_tmp_element_5.asObject() );
            }
            frame_guard.setLineNumber( 1103 );
            if ( ( _python_var_can_reuse.asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 1104 );
                {
                    PyObjectTempKeeper1 call52;
                    DECREASE_REFCOUNT( ( call52.assign( LOOKUP_ATTRIBUTE( _python_var_can_reuse.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call52.asObject0(), _python_var_join_list.asObject() ) ) );
                }
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( _mvar_django__db__models__sql__query_MultiJoin.asObject0() ) )
            {
                frame_guard.detachFrame();
                _python_var_e.assign0( _exception.getValue() );
                frame_guard.setLineNumber( 1106 );
                {
                    PyObjectTempKeeper1 call37;
                    PyObjectTempKeeper1 call39;
                    PyObjectTempKeeper0 call40;
                    PyObjectTempKeeper1 call41;
                    PyObjectTempKeeper0 call42;
                    PyObjectTempKeeper0 slice34;
                    return ( call39.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_split_exclude ) ), call40.assign( _python_var_filter_expr.asObject() ), call41.assign( ( call37.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0(), _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call37.asObject0(), PyObjectTemporary( ( slice34.assign( _python_var_parts.asObject() ), LOOKUP_SLICE( slice34.asObject0(), Py_None, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_level ) ).asObject() ) ) ).asObject() ) ) ), call42.assign( _python_var_can_reuse.asObject() ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), call40.asObject0(), call41.asObject0(), call42.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_names_with_path ) ).asObject() ) );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 1109 );
        if ( ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_str_plain_isnull ) && ( ( _python_var_value.asObject() == Py_True ) && ( (!( CHECK_IF_TRUE( _python_var_current_negated.asObject() ) )) && RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( _python_var_join_list.asObject() ) ).asObject(), _python_int_pos_1 ) ) ) ) )
        {
            frame_guard.setLineNumber( 1114 );
            {
                PyObjectTempKeeper1 call54;
                DECREASE_REFCOUNT( ( call54.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_joins ) ), CALL_FUNCTION_WITH_ARGS( call54.asObject0(), _python_var_join_list.asObject() ) ) );
            }
        }
        {
            frame_guard.setLineNumber( 1120 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call56;
                PyObjectTempKeeper0 call57;
                PyObjectTempKeeper0 call58;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call56.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_trim_joins ) ), call57.assign( _python_var_sources.asObject() ), call58.assign( _python_var_join_list.asObject() ), CALL_FUNCTION_WITH_ARGS( call56.asObject0(), call57.asObject0(), call58.asObject0(), _python_var_path.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
            _python_var_targets.assign0( _python_tmp_element_1.asObject() );
            _python_var_alias.assign0( _python_tmp_element_2.asObject() );
            _python_var_join_list.assign0( _python_tmp_element_3.asObject() );
        }
        frame_guard.setLineNumber( 1122 );
        if ( HAS_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_get_lookup_constraint ) )
        {
            frame_guard.setLineNumber( 1123 );
            {
                PyObjectTempKeeper1 call66;
                PyObjectTempKeeper1 make_tuple60;
                PyObjectTempKeeper0 make_tuple61;
                PyObjectTempKeeper0 make_tuple62;
                PyObjectTempKeeper0 make_tuple63;
                PyObjectTempKeeper0 make_tuple64;
                _python_var_constraint.assign1( ( call66.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_get_lookup_constraint ) ), CALL_FUNCTION_WITH_POSARGS( call66.asObject0(), PyObjectTemporary( ( make_tuple60.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) ), make_tuple61.assign( _python_var_alias.asObject() ), make_tuple62.assign( _python_var_targets.asObject() ), make_tuple63.assign( _python_var_sources.asObject() ), make_tuple64.assign( _python_var_lookup_type.asObject() ), MAKE_TUPLE6( make_tuple60.asObject0(), make_tuple61.asObject0(), make_tuple62.asObject0(), make_tuple63.asObject0(), make_tuple64.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1126 );
            {
                PyObjectTempKeeper0 call68;
                PyObjectTempKeeper0 call69;
                PyObjectTempKeeper1 call70;
                PyObjectTempKeeper1 make_tuple72;
                PyObjectTempKeeper0 make_tuple73;
                _python_var_constraint.assign1( ( make_tuple72.assign( ( call68.assign( _mvar_django__db__models__sql__query_Constraint.asObject0() ), call69.assign( _python_var_alias.asObject() ), call70.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_targets.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_column ) ), CALL_FUNCTION_WITH_ARGS( call68.asObject0(), call69.asObject0(), call70.asObject0(), _python_var_field.asObject() ) ) ), make_tuple73.assign( _python_var_lookup_type.asObject() ), MAKE_TUPLE3( make_tuple72.asObject0(), make_tuple73.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1127 );
        {
            PyObjectTempKeeper1 call75;
            PyObjectTempKeeper0 call76;
            DECREASE_REFCOUNT( ( call75.assign( LOOKUP_ATTRIBUTE( _python_var_clause.asObject(), _python_str_plain_add ) ), call76.assign( _python_var_constraint.asObject() ), CALL_FUNCTION_WITH_ARGS( call75.asObject0(), call76.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1128 );
        if ( ( CHECK_IF_TRUE( _python_var_current_negated.asObject() ) && ( RICH_COMPARE_BOOL_NE( _python_var_lookup_type.asObject(), _python_str_plain_isnull ) || ( _python_var_value.asObject() == Py_False ) ) ) )
        {
            frame_guard.setLineNumber( 1129 );
            {
                PyObjectTempKeeper1 call78;
                DECREASE_REFCOUNT( ( call78.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_joins ) ), CALL_FUNCTION_WITH_ARGS( call78.asObject0(), _python_var_join_list.asObject() ) ) );
            }
            frame_guard.setLineNumber( 1130 );
            {
                PyObjectTempKeeper1 call87;
                PyObjectTempKeeper1 cmp91;
                PyObjectTempKeeper1 subscr89;
                if ( ( RICH_COMPARE_BOOL_NE( _python_var_lookup_type.asObject(), _python_str_plain_isnull ) && ( CHECK_IF_TRUE( PyObjectTemporary( ( call87.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_nullable ) ), CALL_FUNCTION_WITH_ARGS( call87.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_targets.asObject(), _python_int_0, 0 ) ).asObject() ) ) ).asObject() ) || ( cmp91.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr89.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr89.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_join_list.asObject(), _python_int_neg_1, -1 ) ).asObject() ) ) ).asObject(), _python_str_plain_join_type ) ), RICH_COMPARE_BOOL_EQ( cmp91.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject() ) ) ) ) )
            {
                frame_guard.setLineNumber( 1142 );
                {
                    PyObjectTempKeeper0 call80;
                    PyObjectTempKeeper0 call81;
                    PyObjectTempKeeper1 call84;
                    PyObjectTempKeeper1 call85;
                    DECREASE_REFCOUNT( ( call84.assign( LOOKUP_ATTRIBUTE( _python_var_clause.asObject(), _python_str_plain_add ) ), call85.assign( MAKE_TUPLE3( PyObjectTemporary( ( call80.assign( _mvar_django__db__models__sql__query_Constraint.asObject0() ), call81.assign( _python_var_alias.asObject() ), CALL_FUNCTION_WITH_ARGS( call80.asObject0(), call81.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_targets.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_column ) ).asObject(), Py_None ) ) ).asObject(), _python_str_plain_isnull, Py_False ) ), CALL_FUNCTION_WITH_ARGS( call84.asObject0(), call85.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
                }
            }
            }
        }
        frame_guard.setLineNumber( 1143 );
        return _python_var_clause.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_can_reuse.updateLocalsDict( _python_var_current_negated.updateLocalsDict( _python_var_branch_negated.updateLocalsDict( _python_var_filter_expr.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_constraint.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_join_list.updateLocalsDict( _python_var_sources.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_allow_many.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_clause.updateLocalsDict( _python_var_lookup_field.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_counter.updateLocalsDict( _python_var_lookup_model.updateLocalsDict( _python_var_num_parts.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_parts.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_arg.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filter_expr = NULL;
    PyObject *_python_par_branch_negated = NULL;
    PyObject *_python_par_current_negated = NULL;
    PyObject *_python_par_can_reuse = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "build_filter() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_filter_expr == key )
            {
                if (unlikely( _python_par_filter_expr ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'filter_expr'" );
                    goto error_exit;
                }

                _python_par_filter_expr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_branch_negated == key )
            {
                if (unlikely( _python_par_branch_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'branch_negated'" );
                    goto error_exit;
                }

                _python_par_branch_negated = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_current_negated == key )
            {
                if (unlikely( _python_par_current_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'current_negated'" );
                    goto error_exit;
                }

                _python_par_current_negated = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_reuse == key )
            {
                if (unlikely( _python_par_can_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'can_reuse'" );
                    goto error_exit;
                }

                _python_par_can_reuse = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_filter_expr, key ) )
            {
                if (unlikely( _python_par_filter_expr ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'filter_expr'" );
                    goto error_exit;
                }

                _python_par_filter_expr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_branch_negated, key ) )
            {
                if (unlikely( _python_par_branch_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'branch_negated'" );
                    goto error_exit;
                }

                _python_par_branch_negated = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_current_negated, key ) )
            {
                if (unlikely( _python_par_current_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'current_negated'" );
                    goto error_exit;
                }

                _python_par_current_negated = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_reuse, key ) )
            {
                if (unlikely( _python_par_can_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'can_reuse'" );
                    goto error_exit;
                }

                _python_par_can_reuse = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "build_filter() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "build_filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "build_filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "build_filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "build_filter() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "build_filter() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "build_filter() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "build_filter() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "build_filter() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "build_filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "build_filter() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "build_filter() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_expr != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'filter_expr'" );
             goto error_exit;
         }

        _python_par_filter_expr = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_branch_negated != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'branch_negated'" );
             goto error_exit;
         }

        _python_par_branch_negated = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_current_negated != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'current_negated'" );
             goto error_exit;
         }

        _python_par_current_negated = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_can_reuse != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "build_filter() got multiple values for keyword argument 'can_reuse'" );
             goto error_exit;
         }

        _python_par_can_reuse = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_branch_negated == NULL )
    {
        _python_par_branch_negated = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_branch_negated );
    }
    if ( _python_par_current_negated == NULL )
    {
        _python_par_current_negated = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_current_negated );
    }
    if ( _python_par_can_reuse == NULL )
    {
        _python_par_can_reuse = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_can_reuse );
    }


    return impl_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_filter_expr, _python_par_branch_negated, _python_par_current_negated, _python_par_can_reuse );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filter_expr );
    Py_XDECREF( _python_par_branch_negated );
    Py_XDECREF( _python_par_current_negated );
    Py_XDECREF( _python_par_can_reuse );

    return NULL;
}

static PyObject *dparse_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filter_clause )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_filter_clause( _python_str_plain_filter_clause, _python_par_filter_clause );

    // Actual function code.
    static PyFrameObject *frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_24a11d89eb60a4443963e834e2db07fe, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1146 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_filter ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_filter_clause.asObject() ) ) ).asObject(), _python_str_plain_AND ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_filter_clause.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filter_clause = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_filter() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_filter_clause == key )
            {
                if (unlikely( _python_par_filter_clause ))
                {
                    PyErr_Format( PyExc_TypeError, "add_filter() got multiple values for keyword argument 'filter_clause'" );
                    goto error_exit;
                }

                _python_par_filter_clause = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_filter_clause, key ) )
            {
                if (unlikely( _python_par_filter_clause ))
                {
                    PyErr_Format( PyExc_TypeError, "add_filter() got multiple values for keyword argument 'filter_clause'" );
                    goto error_exit;
                }

                _python_par_filter_clause = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_filter() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_filter() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_filter() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_filter() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_filter() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_clause != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_filter() got multiple values for keyword argument 'filter_clause'" );
             goto error_exit;
         }

        _python_par_filter_clause = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_filter_clause );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filter_clause );

    return NULL;
}

static PyObject *dparse_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_78ef4833f3ba2ced2c63041638c84f0d, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1153 );
        {
            PyObjectTempKeeper0 isinstance8;
            if ( (!( ( isinstance8.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance8.asObject0(), _mvar_django__db__models__sql__query_Node.asObject0() ) ) )) )
        {
            frame_guard.setLineNumber( 1154 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper1 call4;
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 keeper_0;
                PyObjectTempKeeper1 keeper_1;
                return ( CHECK_IF_TRUE( keeper_1.assign( ( call3.assign( _mvar_django__db__models__sql__query_refs_aggregate.asObject0() ), call4.assign( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_obj.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject() ) ) ) ) ? keeper_1.asObject() : ( CHECK_IF_TRUE( keeper_0.assign( BOOL_FROM( HAS_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_obj.asObject(), _python_int_pos_1, 1 ) ).asObject(), _python_str_plain_contains_aggregate ) ) ) ) ? ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_obj.asObject(), _python_int_pos_1, 1 ) ).asObject(), _python_str_plain_contains_aggregate ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject() ) ) : INCREASE_REFCOUNT( keeper_0.asObject0() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 1157 );
        return CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_any ), PyObjectTemporary( impl_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_children ) ).asObject() ), _python_var_self ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "need_having() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "need_having() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "need_having() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "need_having() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "need_having() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "need_having() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "need_having() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "need_having() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "need_having() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "need_having() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "need_having() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "need_having() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "need_having() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "need_having() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "need_having() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "need_having() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "need_having() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "need_having() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "need_having() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "need_having() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_self;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_c;
};

static void _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_c.setVariableName( _python_str_plain_c );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query );
            }

            frame_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_af611de0a0d1d68e6ea8d12b2482efaf, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 1157 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 1157 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_c.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper1 call1;
                            YIELD_VALUE( generator, ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_need_having ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_c.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_self )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_t;
    _python_context->python_closure_self.shareWith( python_closure_self );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_d8e24a08907acf179279977b7d212b11,
            _python_context,
            _context_generator_genexpr_1_of_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_q_object, PyObject *_python_par_negated )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_q_object( _python_str_plain_q_object, _python_par_q_object );
    PyObjectLocalParameterVariableNoDel _python_var_negated( _python_str_plain_negated, _python_par_negated );
    PyObjectLocalVariable _python_var_having_parts( _python_str_plain_having_parts );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );
    PyObjectLocalVariable _python_var_in_negated( _python_str_plain_in_negated );
    PyObjectLocalVariable _python_var_new_q( _python_str_plain_new_q );

    // Actual function code.
    _python_var_having_parts.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_bb661dda0ff2bbfacb611b619bb28465, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1167 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_children ) ).asObject(), 0, PY_SSIZE_T_MAX ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1167 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_c.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1170 );
                {
                    PyObjectTempKeeper0 isinstance29;
                    if ( ( isinstance29.assign( _python_var_c.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance29.asObject0(), _mvar_django__db__models__sql__query_Node.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 1172 );
                    {
                        PyObjectTempKeeper1 op1;
                        _python_var_in_negated.assign1( ( op1.assign( LOOKUP_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain_negated ) ), BINARY_OPERATION( PyNumber_Xor, op1.asObject0(), _python_var_negated.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1173 );
                    {
                        PyObjectTempKeeper1 call14;
                        PyObjectTempKeeper1 cmp12;
                        if ( ( ( cmp12.assign( LOOKUP_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain_connector ) ), RICH_COMPARE_BOOL_EQ( cmp12.asObject0(), _mvar_django__db__models__sql__query_OR.asObject0() ) ) && CHECK_IF_TRUE( PyObjectTemporary( ( call14.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_need_having ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), _python_var_c.asObject() ) ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 1176 );
                        {
                            PyObjectTempKeeper1 call3;
                            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_children ) ).asObject(), _python_str_plain_remove ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_c.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1177 );
                        {
                            PyObjectTempKeeper1 call5;
                            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_having_parts.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_c.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1178 );
                        {
                                PyObject *tmp_identifier = _python_var_in_negated.asObject();
                                SET_ATTRIBUTE( tmp_identifier, _python_var_c.asObject(), _python_str_plain_negated );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 1180 );
                        {
                            PyObjectTempKeeper1 call10;
                            PyObjectTempKeeper1 call7;
                            PyObjectTempKeeper0 call8;
                            DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_having_parts.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_split_having_parts ) ), call8.assign( _python_var_c.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), _python_var_in_negated.asObject() ) ) ).asObject(), _python_int_pos_1, 1 ) ).asObject() ) ) );
                        }
                    }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1182 );
                    {
                        PyObjectTempKeeper1 call27;
                        if ( CHECK_IF_TRUE( PyObjectTemporary( ( call27.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_need_having ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_var_c.asObject() ) ) ).asObject() ) )
                    {
                        frame_guard.setLineNumber( 1183 );
                        {
                            PyObjectTempKeeper1 call16;
                            DECREASE_REFCOUNT( ( call16.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_children ) ).asObject(), _python_str_plain_remove ) ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), _python_var_c.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1184 );
                        {
                            PyObjectTempKeeper1 call22;
                            PyObjectTempKeeper1 make_dict18;
                            _python_var_new_q.assign1( ( call22.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) ), CALL_FUNCTION( call22.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict18.assign( MAKE_LIST1( _python_var_c.asObject1() ) ), MAKE_DICT2( make_dict18.asObject0(), _python_str_plain_children, _python_var_negated.asObject(), _python_str_plain_negated ) ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1185 );
                        {
                            PyObjectTempKeeper1 call25;
                            DECREASE_REFCOUNT( ( call25.assign( LOOKUP_ATTRIBUTE( _python_var_having_parts.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_new_q.asObject() ) ) );
                        }
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1186 );
        {
            PyObjectTempKeeper0 make_tuple31;
            return ( make_tuple31.assign( _python_var_q_object.asObject() ), MAKE_TUPLE2( make_tuple31.asObject0(), _python_var_having_parts.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_negated.updateLocalsDict( _python_var_q_object.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_new_q.updateLocalsDict( _python_var_in_negated.updateLocalsDict( _python_var_c.updateLocalsDict( _python_var_having_parts.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_q_object = NULL;
    PyObject *_python_par_negated = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "split_having_parts() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_q_object == key )
            {
                if (unlikely( _python_par_q_object ))
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'q_object'" );
                    goto error_exit;
                }

                _python_par_q_object = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_negated == key )
            {
                if (unlikely( _python_par_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'negated'" );
                    goto error_exit;
                }

                _python_par_negated = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_q_object, key ) )
            {
                if (unlikely( _python_par_q_object ))
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'q_object'" );
                    goto error_exit;
                }

                _python_par_q_object = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_negated, key ) )
            {
                if (unlikely( _python_par_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'negated'" );
                    goto error_exit;
                }

                _python_par_negated = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "split_having_parts() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_having_parts() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "split_having_parts() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "split_having_parts() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_having_parts() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "split_having_parts() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_having_parts() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "split_having_parts() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_having_parts() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "split_having_parts() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "split_having_parts() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "split_having_parts() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_q_object != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'q_object'" );
             goto error_exit;
         }

        _python_par_q_object = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_negated != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_having_parts() got multiple values for keyword argument 'negated'" );
             goto error_exit;
         }

        _python_par_negated = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_negated == NULL )
    {
        _python_par_negated = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_negated );
    }


    return impl_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_q_object, _python_par_negated );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_q_object );
    Py_XDECREF( _python_par_negated );

    return NULL;
}

static PyObject *dparse_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_q_object )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_q_object( _python_str_plain_q_object, _python_par_q_object );
    PyObjectLocalVariable _python_var_where_part( _python_str_plain_where_part );
    PyObjectLocalVariable _python_var_having_parts( _python_str_plain_having_parts );
    PyObjectLocalVariable _python_var_used_aliases( _python_str_plain_used_aliases );
    PyObjectLocalVariable _python_var_clause( _python_str_plain_clause );
    PyObjectLocalVariable _python_var_hp( _python_str_plain_hp );

    // Actual function code.
    static PyFrameObject *frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_72d9ebf87142d226fdb198090ccca394, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1194 );
        {
            PyObjectTempKeeper1 call4;
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_need_having ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_q_object.asObject() ) ) ).asObject() ) )) )
        {
            {
                frame_guard.setLineNumber( 1195 );
                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( MAKE_TUPLE2( _python_var_q_object.asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() ) ).asObject() ) );
                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                _python_var_where_part.assign0( _python_tmp_element_1.asObject() );
                _python_var_having_parts.assign0( _python_tmp_element_2.asObject() );
            }
        }
        else
        {
            {
                frame_guard.setLineNumber( 1197 );
                PyObject *_tmp_python_tmp_source_iter;
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call2;
                    _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_split_having_parts ) ), call2.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_clone ) ).asObject() ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_negated ) ).asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                _python_var_where_part.assign0( _python_tmp_element_1.asObject() );
                _python_var_having_parts.assign0( _python_tmp_element_2.asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 1199 );
        _python_var_used_aliases.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_used_aliases ) );
        frame_guard.setLineNumber( 1200 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper0 call7;
            _python_var_clause.assign1( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__add_q ) ), call7.assign( _python_var_where_part.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_used_aliases.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1201 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), call10.assign( _python_var_clause.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
        }
        {
            frame_guard.setLineNumber( 1202 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_having_parts.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1202 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_hp.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1203 );
                {
                    PyObjectTempKeeper1 call12;
                    PyObjectTempKeeper0 call13;
                    _python_var_clause.assign1( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__add_q ) ), call13.assign( _python_var_hp.asObject() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), call13.asObject0(), _python_var_used_aliases.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1204 );
                {
                    PyObjectTempKeeper1 call15;
                    PyObjectTempKeeper0 call16;
                    DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_having ) ).asObject(), _python_str_plain_add ) ), call16.assign( _python_var_clause.asObject() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), call16.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1205 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter_is_sticky ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 1206 );
            {
                    PyObject *tmp_identifier = _python_var_used_aliases.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_used_aliases );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_q_object.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_hp.updateLocalsDict( _python_var_clause.updateLocalsDict( _python_var_used_aliases.updateLocalsDict( _python_var_having_parts.updateLocalsDict( _python_var_where_part.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_q_object = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_q() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_q() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_q_object == key )
            {
                if (unlikely( _python_par_q_object ))
                {
                    PyErr_Format( PyExc_TypeError, "add_q() got multiple values for keyword argument 'q_object'" );
                    goto error_exit;
                }

                _python_par_q_object = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_q() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_q_object, key ) )
            {
                if (unlikely( _python_par_q_object ))
                {
                    PyErr_Format( PyExc_TypeError, "add_q() got multiple values for keyword argument 'q_object'" );
                    goto error_exit;
                }

                _python_par_q_object = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_q() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_q() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_q() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_q() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_q() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_q() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_q() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_q() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_q() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_q() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_q() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_q() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_q() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_q() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_q_object != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_q() got multiple values for keyword argument 'q_object'" );
             goto error_exit;
         }

        _python_par_q_object = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_q_object );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_q_object );

    return NULL;
}

static PyObject *dparse_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_q_object, PyObject *_python_par_used_aliases, PyObject *_python_par_branch_negated, PyObject *_python_par_current_negated )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_q_object( _python_str_plain_q_object, _python_par_q_object );
    PyObjectLocalParameterVariableNoDel _python_var_used_aliases( _python_str_plain_used_aliases, _python_par_used_aliases );
    PyObjectLocalParameterVariableNoDel _python_var_branch_negated( _python_str_plain_branch_negated, _python_par_branch_negated );
    PyObjectLocalParameterVariableNoDel _python_var_current_negated( _python_str_plain_current_negated, _python_par_current_negated );
    PyObjectLocalVariable _python_var_connector( _python_str_plain_connector );
    PyObjectLocalVariable _python_var_target_clause( _python_str_plain_target_clause );
    PyObjectLocalVariable _python_var_alias_usage_counts( _python_str_plain_alias_usage_counts );
    PyObjectLocalVariable _python_var_aliases_before( _python_str_plain_aliases_before );
    PyObjectLocalVariable _python_var_child( _python_str_plain_child );
    PyObjectLocalVariable _python_var_refcounts_before( _python_str_plain_refcounts_before );
    PyObjectLocalVariable _python_var_child_clause( _python_str_plain_child_clause );
    PyObjectLocalVariable _python_var_used( _python_str_plain_used );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );

    // Actual function code.
    static PyFrameObject *frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_f13645a90834622c9e519a1b48c272be, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1215 );
        _python_var_connector.assign1( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_connector ) );
        frame_guard.setLineNumber( 1216 );
        {
            PyObjectTempKeeper0 op1;
            _python_var_current_negated.assign1( ( op1.assign( _python_var_current_negated.asObject() ), BINARY_OPERATION( PyNumber_Xor, op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_negated ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1217 );
        {
            PyObjectTempKeeper0 keeper_0;
            _python_var_branch_negated.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_branch_negated.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_negated ) ) );
        }
        frame_guard.setLineNumber( 1220 );
        {
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 make_dict3;
            _python_var_target_clause.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict3.assign( _python_var_connector.asObject() ), MAKE_DICT2( make_dict3.asObject0(), _python_str_plain_connector, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_negated ) ).asObject(), _python_str_plain_negated ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1223 );
        {
            PyObjectTempKeeper0 cmp10;
            if ( ( cmp10.assign( _python_var_connector.asObject() ), RICH_COMPARE_BOOL_EQ( cmp10.asObject0(), _mvar_django__db__models__sql__query_OR.asObject0() ) ) )
        {
            _python_var_alias_usage_counts.assign1( PyDict_New() );
            frame_guard.setLineNumber( 1225 );
            _python_var_aliases_before.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ).asObject() ) );
        }
        }
        {
            frame_guard.setLineNumber( 1226 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_children ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1226 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_child.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1227 );
                {
                    PyObjectTempKeeper0 cmp12;
                    if ( ( cmp12.assign( _python_var_connector.asObject() ), RICH_COMPARE_BOOL_EQ( cmp12.asObject0(), _mvar_django__db__models__sql__query_OR.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 1228 );
                    _python_var_refcounts_before.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                }
                }
                frame_guard.setLineNumber( 1229 );
                {
                    PyObjectTempKeeper0 isinstance28;
                    if ( ( isinstance28.assign( _python_var_child.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance28.asObject0(), _mvar_django__db__models__sql__query_Node.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 1230 );
                    {
                        PyObjectTempKeeper1 call14;
                        PyObjectTempKeeper0 call15;
                        PyObjectTempKeeper0 call16;
                        PyObjectTempKeeper0 call17;
                        _python_var_child_clause.assign1( ( call14.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__add_q ) ), call15.assign( _python_var_child.asObject() ), call16.assign( _python_var_used_aliases.asObject() ), call17.assign( _python_var_branch_negated.asObject() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), call15.asObject0(), call16.asObject0(), call17.asObject0(), _python_var_current_negated.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1234 );
                    {
                        PyObjectTempKeeper1 call25;
                        PyObjectTempKeeper1 call26;
                        PyObjectTempKeeper0 make_dict19;
                        PyObjectTempKeeper0 make_dict21;
                        _python_var_child_clause.assign1( ( call25.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_filter ) ), call26.assign( MAKE_TUPLE1( _python_var_child.asObject() ) ), CALL_FUNCTION( call25.asObject0(), call26.asObject0(), PyObjectTemporary( ( make_dict19.assign( _python_var_used_aliases.asObject() ), make_dict21.assign( _python_var_branch_negated.asObject() ), MAKE_DICT3( make_dict19.asObject0(), _python_str_plain_can_reuse, make_dict21.asObject0(), _python_str_plain_branch_negated, _python_var_current_negated.asObject(), _python_str_plain_current_negated ) ) ).asObject() ) ) );
                    }
                }
                }
                frame_guard.setLineNumber( 1237 );
                {
                    PyObjectTempKeeper1 call30;
                    PyObjectTempKeeper0 call31;
                    DECREASE_REFCOUNT( ( call30.assign( LOOKUP_ATTRIBUTE( _python_var_target_clause.asObject(), _python_str_plain_add ) ), call31.assign( _python_var_child_clause.asObject() ), CALL_FUNCTION_WITH_ARGS( call30.asObject0(), call31.asObject0(), _python_var_connector.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1238 );
                {
                    PyObjectTempKeeper0 cmp39;
                    if ( ( cmp39.assign( _python_var_connector.asObject() ), RICH_COMPARE_BOOL_EQ( cmp39.asObject0(), _mvar_django__db__models__sql__query_OR.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 1239 );
                    {
                        PyObjectTempKeeper0 call33;
                        PyObjectTempKeeper0 call34;
                        _python_var_used.assign1( ( call33.assign( _mvar_django__db__models__sql__query_alias_diff.asObject0() ), call34.assign( _python_var_refcounts_before.asObject() ), CALL_FUNCTION_WITH_ARGS( call33.asObject0(), call34.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_refcount ) ).asObject() ) ) );
                    }
                    {
                        frame_guard.setLineNumber( 1240 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_used.asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 1240 );
                                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_2 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                _python_var_alias.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 1241 );
                            {
                                PyObjectTempKeeper1 call36;
                                {
                                    PyObjectTemporary tmp_identifier( BINARY_OPERATION_ADD( PyObjectTemporary( ( call36.assign( LOOKUP_ATTRIBUTE( _python_var_alias_usage_counts.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call36.asObject0(), _python_var_alias.asObject(), _python_int_0 ) ) ).asObject(), _python_int_pos_1 ) );
                                    PyObject *tmp_subscribed = _python_var_alias_usage_counts.asObject();
                                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_var_alias.asObject() );
                            }
                            }

                           CONSIDER_THREADING();
                        }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1242 );
        {
            PyObjectTempKeeper0 cmp45;
            if ( ( cmp45.assign( _python_var_connector.asObject() ), RICH_COMPARE_BOOL_EQ( cmp45.asObject0(), _mvar_django__db__models__sql__query_OR.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 1243 );
            {
                PyObjectTempKeeper1 call41;
                PyObjectTempKeeper0 call42;
                PyObjectTempKeeper0 call43;
                DECREASE_REFCOUNT( ( call41.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_disjunction ) ), call42.assign( _python_var_aliases_before.asObject() ), call43.assign( _python_var_alias_usage_counts.asObject() ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), call42.asObject0(), call43.asObject0(), PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_q_object.asObject(), _python_str_plain_children ) ).asObject() ) ).asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 1245 );
        return _python_var_target_clause.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_current_negated.updateLocalsDict( _python_var_branch_negated.updateLocalsDict( _python_var_used_aliases.updateLocalsDict( _python_var_q_object.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_used.updateLocalsDict( _python_var_child_clause.updateLocalsDict( _python_var_refcounts_before.updateLocalsDict( _python_var_child.updateLocalsDict( _python_var_aliases_before.updateLocalsDict( _python_var_alias_usage_counts.updateLocalsDict( _python_var_target_clause.updateLocalsDict( _python_var_connector.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_q_object = NULL;
    PyObject *_python_par_used_aliases = NULL;
    PyObject *_python_par_branch_negated = NULL;
    PyObject *_python_par_current_negated = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_add_q() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_q_object == key )
            {
                if (unlikely( _python_par_q_object ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'q_object'" );
                    goto error_exit;
                }

                _python_par_q_object = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_used_aliases == key )
            {
                if (unlikely( _python_par_used_aliases ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'used_aliases'" );
                    goto error_exit;
                }

                _python_par_used_aliases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_branch_negated == key )
            {
                if (unlikely( _python_par_branch_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'branch_negated'" );
                    goto error_exit;
                }

                _python_par_branch_negated = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_current_negated == key )
            {
                if (unlikely( _python_par_current_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'current_negated'" );
                    goto error_exit;
                }

                _python_par_current_negated = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_q_object, key ) )
            {
                if (unlikely( _python_par_q_object ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'q_object'" );
                    goto error_exit;
                }

                _python_par_q_object = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_used_aliases, key ) )
            {
                if (unlikely( _python_par_used_aliases ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'used_aliases'" );
                    goto error_exit;
                }

                _python_par_used_aliases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_branch_negated, key ) )
            {
                if (unlikely( _python_par_branch_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'branch_negated'" );
                    goto error_exit;
                }

                _python_par_branch_negated = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_current_negated, key ) )
            {
                if (unlikely( _python_par_current_negated ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'current_negated'" );
                    goto error_exit;
                }

                _python_par_current_negated = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_add_q() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_add_q() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_add_q() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_add_q() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_add_q() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_add_q() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_add_q() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_add_q() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_add_q() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_add_q() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_add_q() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_add_q() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_q_object != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'q_object'" );
             goto error_exit;
         }

        _python_par_q_object = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_used_aliases != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'used_aliases'" );
             goto error_exit;
         }

        _python_par_used_aliases = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_branch_negated != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'branch_negated'" );
             goto error_exit;
         }

        _python_par_branch_negated = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_current_negated != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_q() got multiple values for keyword argument 'current_negated'" );
             goto error_exit;
         }

        _python_par_current_negated = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_branch_negated == NULL )
    {
        _python_par_branch_negated = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_branch_negated );
    }
    if ( _python_par_current_negated == NULL )
    {
        _python_par_current_negated = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_current_negated );
    }


    return impl_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_q_object, _python_par_used_aliases, _python_par_branch_negated, _python_par_current_negated );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_q_object );
    Py_XDECREF( _python_par_used_aliases );
    Py_XDECREF( _python_par_branch_negated );
    Py_XDECREF( _python_par_current_negated );

    return NULL;
}

static PyObject *dparse_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_names, PyObject *_python_par_opts, PyObject *_python_par_allow_many, PyObject *_python_par_allow_explicit_fk )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_names( _python_str_plain_names, _python_par_names );
    PyObjectLocalParameterVariableNoDel _python_var_opts( _python_str_plain_opts, _python_par_opts );
    PyObjectLocalParameterVariableNoDel _python_var_allow_many( _python_str_plain_allow_many, _python_par_allow_many );
    PyObjectLocalParameterVariableNoDel _python_var_allow_explicit_fk( _python_str_plain_allow_explicit_fk, _python_par_allow_explicit_fk );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_names_with_path( _python_str_plain_names_with_path );
    PyObjectLocalVariable _python_var_pos( _python_str_plain_pos );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_model( _python_str_plain_model );
    PyObjectLocalVariable _python_var_direct( _python_str_plain_direct );
    PyObjectLocalVariable _python_var_m2m( _python_str_plain_m2m );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_available( _python_str_plain_available );
    PyObjectLocalVariable _python_var_proxied_model( _python_str_plain_proxied_model );
    PyObjectLocalVariable _python_var_int_model( _python_str_plain_int_model );
    PyObjectLocalVariable _python_var_final_field( _python_str_plain_final_field );
    PyObjectLocalVariable _python_var_targets( _python_str_plain_targets );
    PyObjectLocalVariable _python_var_pathinfos( _python_str_plain_pathinfos );
    PyObjectLocalVariable _python_var_inner_pos( _python_str_plain_inner_pos );
    PyObjectLocalVariable _python_var_p( _python_str_plain_p );
    PyObjectLocalVariable _python_var_last( _python_str_plain_last );

    // Actual function code.
    static PyFrameObject *frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_ab7f11c34c7e11220fac43f3c833a1b0, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1261 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( MAKE_TUPLE2( PyObjectTemporary( PyList_New( 0 ) ).asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_path.assign0( _python_tmp_element_1.asObject() );
            _python_var_names_with_path.assign0( _python_tmp_element_2.asObject() );
        }
        {
            frame_guard.setLineNumber( 1262 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_names.asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1262 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 1262 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_pos.assign0( _python_tmp_element_1.asObject() );
                        _python_var_name.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1263 );
                if ( RICH_COMPARE_BOOL_EQ( _python_var_name.asObject(), _python_str_plain_pk ) )
                {
                    frame_guard.setLineNumber( 1264 );
                    _python_var_name.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) );
                }
                frame_guard.setLineNumber( 1265 );
                try
                {
                    {
                        frame_guard.setLineNumber( 1266 );
                        PyObject *_tmp_python_tmp_source_iter;
                        {
                            PyObjectTempKeeper1 call13;
                            _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_name.asObject() ) ) ).asObject() );
                        }
                        PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                        PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
                        _python_var_field.assign0( _python_tmp_element_1.asObject() );
                        _python_var_model.assign0( _python_tmp_element_2.asObject() );
                        _python_var_direct.assign0( _python_tmp_element_3.asObject() );
                        _python_var_m2m.assign0( _python_tmp_element_4.asObject() );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( _mvar_django__db__models__sql__query_FieldDoesNotExist.asObject0() ) )
                    {
                        frame_guard.detachFrame();
                        {
                            PyObject *_python_tmp_break_indicator = Py_False;
                            frame_guard.setLineNumber( 1268 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ).asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1268 );
                                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_2 == NULL )
                                    {
                                        _python_tmp_break_indicator = Py_True;
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                                }
                                frame_guard.setLineNumber( 1269 );
                                {
                                    PyObjectTempKeeper0 cmp3;
                                    if ( ( CHECK_IF_TRUE( _python_var_allow_explicit_fk.asObject() ) && ( cmp3.assign( _python_var_name.asObject() ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_attname ) ).asObject() ) ) ) )
                                {
                                    {
                                        frame_guard.setLineNumber( 1273 );
                                        PyObject *_tmp_python_tmp_source_iter;
                                        {
                                            PyObjectTempKeeper1 call1;
                                            _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() );
                                        }
                                        PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                                        PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
                                        _python_var_field.assign0( _python_tmp_element_1.asObject() );
                                        _python_var_model.assign0( _python_tmp_element_2.asObject() );
                                        _python_var_direct.assign0( _python_tmp_element_3.asObject() );
                                        _python_var_m2m.assign0( _python_tmp_element_4.asObject() );
                                    }
                                    frame_guard.setLineNumber( 1274 );
                                    break;
                                }
                                }

                               CONSIDER_THREADING();
                            }
                            if ( ( _python_tmp_break_indicator == Py_True ) )
                            {
                                frame_guard.setLineNumber( 1276 );
                                {
                                    PyObjectTempKeeper1 op5;
                                    _python_var_available.assign1( ( op5.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_all_field_names ) ).asObject() ) ), BINARY_OPERATION_ADD( op5.asObject0(), PyObjectTemporary( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select ) ).asObject() ) ).asObject() ) ) );
                                }
                                frame_guard.setLineNumber( 1277 );
                                {
                                    PyObjectTempKeeper0 call11;
                                    PyObjectTempKeeper1 call7;
                                    PyObjectTempKeeper0 make_tuple9;
                                    {
                                        PyObjectTemporary tmp_exception_type( ( call11.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_d3414b4f90d28ed46f48d17547438257, PyObjectTemporary( ( make_tuple9.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple9.asObject0(), PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_str_digest_fc763cb31e9938f37737394681228f83, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_available.asObject() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                                }
                                }
                            }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
                frame_guard.setLineNumber( 1282 );
                if ( CHECK_IF_TRUE( _python_var_model.asObject() ) )
                {
                    frame_guard.setLineNumber( 1285 );
                    _python_var_proxied_model.assign1( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_concrete_model ) );
                    {
                        frame_guard.setLineNumber( 1287 );
                        PyObject *_tmp_python_tmp_for_iterator;
                        {
                            PyObjectTempKeeper1 call15;
                            _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_base_chain ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_model.asObject() ) ) ).asObject() );
                        }
                        PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 1287 );
                                PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_3 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                                _python_var_int_model.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 1288 );
                            if ( ( _python_var_int_model.asObject() == _python_var_proxied_model.asObject() ) )
                            {
                                frame_guard.setLineNumber( 1289 );
                                _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_int_model.asObject(), _python_str_plain__meta ) );
                            }
                            else
                            {
                                frame_guard.setLineNumber( 1291 );
                                {
                                    PyObjectTempKeeper1 subscr17;
                                    _python_var_final_field.assign1( ( subscr17.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_parents ) ), LOOKUP_SUBSCRIPT( subscr17.asObject0(), _python_var_int_model.asObject() ) ) );
                                }
                                frame_guard.setLineNumber( 1292 );
                                _python_var_targets.assign1( MAKE_TUPLE1( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_final_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_get_related_field ) ).asObject() ) ).asObject() ) );
                                frame_guard.setLineNumber( 1293 );
                                _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_int_model.asObject(), _python_str_plain__meta ) );
                                frame_guard.setLineNumber( 1294 );
                                {
                                    PyObjectTempKeeper0 call25;
                                    PyObjectTempKeeper1 call27;
                                    PyObjectTempKeeper1 make_tuple19;
                                    PyObjectTempKeeper0 make_tuple20;
                                    PyObjectTempKeeper0 make_tuple21;
                                    DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( _python_var_path.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), PyObjectTemporary( ( call25.assign( _mvar_django__db__models__sql__query_PathInfo.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call25.asObject0(), PyObjectTemporary( ( make_tuple19.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_final_field.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ), make_tuple20.assign( _python_var_opts.asObject() ), make_tuple21.assign( _python_var_targets.asObject() ), MAKE_TUPLE6( make_tuple19.asObject0(), make_tuple20.asObject0(), make_tuple21.asObject0(), _python_var_final_field.asObject(), Py_False, Py_True ) ) ).asObject() ) ) ).asObject() ) ) );
                                }
                            }

                           CONSIDER_THREADING();
                        }
                    }
                }
                frame_guard.setLineNumber( 1295 );
                if ( HAS_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_get_path_info ) )
                {
                    frame_guard.setLineNumber( 1296 );
                    _python_var_pathinfos.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_get_path_info ) ).asObject() ) );
                    frame_guard.setLineNumber( 1297 );
                    if ( (!( CHECK_IF_TRUE( _python_var_allow_many.asObject() ) )) )
                    {
                        {
                            frame_guard.setLineNumber( 1298 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_pathinfos.asObject() ) ).asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1298 );
                                    PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_4 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                                    {
                                        frame_guard.setLineNumber( 1298 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_var_inner_pos.assign0( _python_tmp_element_1.asObject() );
                                        _python_var_p.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 1299 );
                                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_p.asObject(), _python_str_plain_m2m ) ).asObject() ) )
                                {
                                    frame_guard.setLineNumber( 1300 );
                                    {
                                        PyObjectTempKeeper1 call34;
                                        PyObjectTempKeeper0 make_tuple32;
                                        PyObjectTempKeeper0 slice29;
                                        DECREASE_REFCOUNT( ( call34.assign( LOOKUP_ATTRIBUTE( _python_var_names_with_path.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call34.asObject0(), PyObjectTemporary( ( make_tuple32.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple32.asObject0(), PyObjectTemporary( ( slice29.assign( _python_var_pathinfos.asObject() ), LOOKUP_SLICE( slice29.asObject0(), _python_int_0, PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_inner_pos.asObject(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) ) ).asObject() ) ) );
                                    }
                                    frame_guard.setLineNumber( 1301 );
                                    {
                                        PyObjectTempKeeper0 call36;
                                        PyObjectTempKeeper1 call37;
                                        {
                                            PyObjectTemporary tmp_exception_type( ( call36.assign( _mvar_django__db__models__sql__query_MultiJoin.asObject0() ), call37.assign( BINARY_OPERATION_ADD( _python_var_pos.asObject(), _python_int_pos_1 ) ), CALL_FUNCTION_WITH_ARGS( call36.asObject0(), call37.asObject0(), _python_var_names_with_path.asObject() ) ) );
                                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                                    }
                                    }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                    frame_guard.setLineNumber( 1302 );
                    _python_var_last.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_pathinfos.asObject(), _python_int_neg_1, -1 ) );
                    frame_guard.setLineNumber( 1303 );
                    {
                        PyObjectTempKeeper1 call39;
                        DECREASE_REFCOUNT( ( call39.assign( LOOKUP_ATTRIBUTE( _python_var_path.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), _python_var_pathinfos.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1304 );
                    _python_var_final_field.assign1( LOOKUP_ATTRIBUTE( _python_var_last.asObject(), _python_str_plain_join_field ) );
                    frame_guard.setLineNumber( 1305 );
                    _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_last.asObject(), _python_str_plain_to_opts ) );
                    frame_guard.setLineNumber( 1306 );
                    _python_var_targets.assign1( LOOKUP_ATTRIBUTE( _python_var_last.asObject(), _python_str_plain_target_fields ) );
                    frame_guard.setLineNumber( 1307 );
                    {
                        PyObjectTempKeeper1 call43;
                        PyObjectTempKeeper0 make_tuple41;
                        DECREASE_REFCOUNT( ( call43.assign( LOOKUP_ATTRIBUTE( _python_var_names_with_path.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call43.asObject0(), PyObjectTemporary( ( make_tuple41.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple41.asObject0(), _python_var_pathinfos.asObject() ) ) ).asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1310 );
                    _python_var_final_field.assign0( _python_var_field.asObject() );
                    frame_guard.setLineNumber( 1311 );
                    _python_var_targets.assign1( MAKE_TUPLE1( _python_var_field.asObject() ) );
                    frame_guard.setLineNumber( 1312 );
                    break;
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1314 );
        {
            PyObjectTempKeeper0 cmp55;
            if ( ( cmp55.assign( _python_var_pos.asObject() ), RICH_COMPARE_BOOL_NE( cmp55.asObject0(), PyObjectTemporary( BINARY_OPERATION_SUB( PyObjectTemporary( BUILTIN_LEN( _python_var_names.asObject() ) ).asObject(), _python_int_pos_1 ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1315 );
            {
                PyObjectTempKeeper0 cmp53;
                if ( ( cmp53.assign( _python_var_pos.asObject() ), RICH_COMPARE_BOOL_EQ( cmp53.asObject0(), PyObjectTemporary( BINARY_OPERATION_SUB( PyObjectTemporary( BUILTIN_LEN( _python_var_names.asObject() ) ).asObject(), _python_int_pos_2 ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 1316 );
                {
                    PyObjectTempKeeper0 call49;
                    PyObjectTempKeeper0 make_tuple47;
                    PyObjectTempKeeper0 subscr45;
                    {
                        PyObjectTemporary tmp_exception_type( ( call49.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call49.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_107222ef1a99bad5e23c0b98a3d97be3, PyObjectTemporary( ( make_tuple47.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple47.asObject0(), PyObjectTemporary( ( subscr45.assign( _python_var_names.asObject() ), LOOKUP_SUBSCRIPT( subscr45.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_pos.asObject(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                frame_guard.setLineNumber( 1320 );
                {
                    PyObjectTempKeeper0 call51;
                    {
                        PyObjectTemporary tmp_exception_type( ( call51.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call51.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_2fbe3d0cf31ebf2bb8e2335094b0d339, _python_var_name.asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            }
        }
        }
        frame_guard.setLineNumber( 1321 );
        {
            PyObjectTempKeeper0 make_tuple57;
            PyObjectTempKeeper0 make_tuple58;
            return ( make_tuple57.assign( _python_var_path.asObject() ), make_tuple58.assign( _python_var_final_field.asObject() ), MAKE_TUPLE3( make_tuple57.asObject0(), make_tuple58.asObject0(), _python_var_targets.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_allow_explicit_fk.updateLocalsDict( _python_var_allow_many.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_names.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_last.updateLocalsDict( _python_var_p.updateLocalsDict( _python_var_inner_pos.updateLocalsDict( _python_var_pathinfos.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_final_field.updateLocalsDict( _python_var_int_model.updateLocalsDict( _python_var_proxied_model.updateLocalsDict( _python_var_available.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_m2m.updateLocalsDict( _python_var_direct.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_pos.updateLocalsDict( _python_var_names_with_path.updateLocalsDict( _python_var_path.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_names = NULL;
    PyObject *_python_par_opts = NULL;
    PyObject *_python_par_allow_many = NULL;
    PyObject *_python_par_allow_explicit_fk = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "names_to_path() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_names == key )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_opts == key )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_allow_many == key )
            {
                if (unlikely( _python_par_allow_many ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'allow_many'" );
                    goto error_exit;
                }

                _python_par_allow_many = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_allow_explicit_fk == key )
            {
                if (unlikely( _python_par_allow_explicit_fk ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'allow_explicit_fk'" );
                    goto error_exit;
                }

                _python_par_allow_explicit_fk = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_names, key ) )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_opts, key ) )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_allow_many, key ) )
            {
                if (unlikely( _python_par_allow_many ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'allow_many'" );
                    goto error_exit;
                }

                _python_par_allow_many = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_allow_explicit_fk, key ) )
            {
                if (unlikely( _python_par_allow_explicit_fk ))
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'allow_explicit_fk'" );
                    goto error_exit;
                }

                _python_par_allow_explicit_fk = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "names_to_path() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "names_to_path() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "names_to_path() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "names_to_path() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "names_to_path() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "names_to_path() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "names_to_path() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "names_to_path() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "names_to_path() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 5 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "names_to_path() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "names_to_path() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 5 )
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() takes exactly %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "names_to_path() takes at least %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_names != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'names'" );
             goto error_exit;
         }

        _python_par_names = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_opts != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'opts'" );
             goto error_exit;
         }

        _python_par_opts = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_many != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'allow_many'" );
             goto error_exit;
         }

        _python_par_allow_many = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_explicit_fk != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "names_to_path() got multiple values for keyword argument 'allow_explicit_fk'" );
             goto error_exit;
         }

        _python_par_allow_explicit_fk = INCREASE_REFCOUNT( args[ 4 ] );
    }


    return impl_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_names, _python_par_opts, _python_par_allow_many, _python_par_allow_explicit_fk );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_names );
    Py_XDECREF( _python_par_opts );
    Py_XDECREF( _python_par_allow_many );
    Py_XDECREF( _python_par_allow_explicit_fk );

    return NULL;
}

static PyObject *dparse_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_names, PyObject *_python_par_opts, PyObject *_python_par_alias, PyObject *_python_par_can_reuse, PyObject *_python_par_allow_many, PyObject *_python_par_allow_explicit_fk )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_names( _python_str_plain_names, _python_par_names );
    PyObjectLocalParameterVariableNoDel _python_var_opts( _python_str_plain_opts, _python_par_opts );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalParameterVariableNoDel _python_var_can_reuse( _python_str_plain_can_reuse, _python_par_can_reuse );
    PyObjectLocalParameterVariableNoDel _python_var_allow_many( _python_str_plain_allow_many, _python_par_allow_many );
    PyObjectLocalParameterVariableNoDel _python_var_allow_explicit_fk( _python_str_plain_allow_explicit_fk, _python_par_allow_explicit_fk );
    PyObjectLocalVariable _python_var_joins( _python_str_plain_joins );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_final_field( _python_str_plain_final_field );
    PyObjectLocalVariable _python_var_targets( _python_str_plain_targets );
    PyObjectLocalVariable _python_var_pos( _python_str_plain_pos );
    PyObjectLocalVariable _python_var_join( _python_str_plain_join );
    PyObjectLocalVariable _python_var_nullable( _python_str_plain_nullable );
    PyObjectLocalVariable _python_var_connection( _python_str_plain_connection );
    PyObjectLocalVariable _python_var_reuse( _python_str_plain_reuse );

    // Actual function code.
    static PyFrameObject *frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_8115b386c9f491274b776817debbee76, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1352 );
        _python_var_joins.assign1( MAKE_LIST1( _python_var_alias.asObject1() ) );
        {
            frame_guard.setLineNumber( 1354 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call2;
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call4;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_names_to_path ) ), call2.assign( _python_var_names.asObject() ), call3.assign( _python_var_opts.asObject() ), call4.assign( _python_var_allow_many.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), _python_var_allow_explicit_fk.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
            _python_var_path.assign0( _python_tmp_element_1.asObject() );
            _python_var_final_field.assign0( _python_tmp_element_2.asObject() );
            _python_var_targets.assign0( _python_tmp_element_3.asObject() );
        }
        {
            frame_guard.setLineNumber( 1359 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_path.asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1359 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 1359 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_pos.assign0( _python_tmp_element_1.asObject() );
                        _python_var_join.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1360 );
                _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_join.asObject(), _python_str_plain_to_opts ) );
                frame_guard.setLineNumber( 1361 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join.asObject(), _python_str_plain_direct ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 1362 );
                    {
                        PyObjectTempKeeper1 call6;
                        _python_var_nullable.assign1( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_nullable ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join.asObject(), _python_str_plain_join_field ) ).asObject() ) ) );
                    }
                }
                else
                {
                    _python_var_nullable.assign0( Py_True );
                }
                frame_guard.setLineNumber( 1365 );
                {
                    PyObjectTempKeeper0 make_tuple8;
                    PyObjectTempKeeper1 make_tuple9;
                    _python_var_connection.assign1( ( make_tuple8.assign( _python_var_alias.asObject() ), make_tuple9.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_db_table ) ), MAKE_TUPLE3( make_tuple8.asObject0(), make_tuple9.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join.asObject(), _python_str_plain_join_field ) ).asObject(), _python_str_plain_get_joining_columns ) ).asObject() ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 1366 );
                _python_var_reuse.assign0( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join.asObject(), _python_str_plain_m2m ) ).asObject() ) ? _python_var_can_reuse.asObject() : Py_None ) );
                frame_guard.setLineNumber( 1367 );
                {
                    PyObjectTempKeeper1 call17;
                    PyObjectTempKeeper1 call18;
                    PyObjectTempKeeper0 make_dict11;
                    PyObjectTempKeeper0 make_dict13;
                    _python_var_alias.assign1( ( call17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join ) ), call18.assign( MAKE_TUPLE1( _python_var_connection.asObject() ) ), CALL_FUNCTION( call17.asObject0(), call18.asObject0(), PyObjectTemporary( ( make_dict11.assign( _python_var_reuse.asObject() ), make_dict13.assign( _python_var_nullable.asObject() ), MAKE_DICT3( make_dict11.asObject0(), _python_str_plain_reuse, make_dict13.asObject0(), _python_str_plain_nullable, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join.asObject(), _python_str_plain_join_field ) ).asObject(), _python_str_plain_join_field ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 1369 );
                {
                    PyObjectTempKeeper1 call20;
                    DECREASE_REFCOUNT( ( call20.assign( LOOKUP_ATTRIBUTE( _python_var_joins.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), _python_var_alias.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1370 );
        if ( HAS_ATTRIBUTE( _python_var_final_field.asObject(), _python_str_plain_field ) )
        {
            frame_guard.setLineNumber( 1371 );
            _python_var_final_field.assign1( LOOKUP_ATTRIBUTE( _python_var_final_field.asObject(), _python_str_plain_field ) );
        }
        frame_guard.setLineNumber( 1372 );
        {
            PyObjectTempKeeper0 make_tuple22;
            PyObjectTempKeeper0 make_tuple23;
            PyObjectTempKeeper0 make_tuple24;
            PyObjectTempKeeper0 make_tuple25;
            return ( make_tuple22.assign( _python_var_final_field.asObject() ), make_tuple23.assign( _python_var_targets.asObject() ), make_tuple24.assign( _python_var_opts.asObject() ), make_tuple25.assign( _python_var_joins.asObject() ), MAKE_TUPLE5( make_tuple22.asObject0(), make_tuple23.asObject0(), make_tuple24.asObject0(), make_tuple25.asObject0(), _python_var_path.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_allow_explicit_fk.updateLocalsDict( _python_var_allow_many.updateLocalsDict( _python_var_can_reuse.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_names.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_reuse.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_nullable.updateLocalsDict( _python_var_join.updateLocalsDict( _python_var_pos.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_final_field.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_joins.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_names = NULL;
    PyObject *_python_par_opts = NULL;
    PyObject *_python_par_alias = NULL;
    PyObject *_python_par_can_reuse = NULL;
    PyObject *_python_par_allow_many = NULL;
    PyObject *_python_par_allow_explicit_fk = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "setup_joins() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_names == key )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_opts == key )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_reuse == key )
            {
                if (unlikely( _python_par_can_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'can_reuse'" );
                    goto error_exit;
                }

                _python_par_can_reuse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_allow_many == key )
            {
                if (unlikely( _python_par_allow_many ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'allow_many'" );
                    goto error_exit;
                }

                _python_par_allow_many = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_allow_explicit_fk == key )
            {
                if (unlikely( _python_par_allow_explicit_fk ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'allow_explicit_fk'" );
                    goto error_exit;
                }

                _python_par_allow_explicit_fk = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_names, key ) )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_opts, key ) )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_reuse, key ) )
            {
                if (unlikely( _python_par_can_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'can_reuse'" );
                    goto error_exit;
                }

                _python_par_can_reuse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_allow_many, key ) )
            {
                if (unlikely( _python_par_allow_many ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'allow_many'" );
                    goto error_exit;
                }

                _python_par_allow_many = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_allow_explicit_fk, key ) )
            {
                if (unlikely( _python_par_allow_explicit_fk ))
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'allow_explicit_fk'" );
                    goto error_exit;
                }

                _python_par_allow_explicit_fk = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "setup_joins() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "setup_joins() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "setup_joins() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "setup_joins() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "setup_joins() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "setup_joins() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "setup_joins() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "setup_joins() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "setup_joins() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "setup_joins() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "setup_joins() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "setup_joins() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_names != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'names'" );
             goto error_exit;
         }

        _python_par_names = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_opts != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'opts'" );
             goto error_exit;
         }

        _python_par_opts = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_can_reuse != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'can_reuse'" );
             goto error_exit;
         }

        _python_par_can_reuse = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_many != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'allow_many'" );
             goto error_exit;
         }

        _python_par_allow_many = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_explicit_fk != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "setup_joins() got multiple values for keyword argument 'allow_explicit_fk'" );
             goto error_exit;
         }

        _python_par_allow_explicit_fk = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_can_reuse == NULL )
    {
        _python_par_can_reuse = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_can_reuse );
    }
    if ( _python_par_allow_many == NULL )
    {
        _python_par_allow_many = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_allow_many );
    }
    if ( _python_par_allow_explicit_fk == NULL )
    {
        _python_par_allow_explicit_fk = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_allow_explicit_fk );
    }


    return impl_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_names, _python_par_opts, _python_par_alias, _python_par_can_reuse, _python_par_allow_many, _python_par_allow_explicit_fk );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_names );
    Py_XDECREF( _python_par_opts );
    Py_XDECREF( _python_par_alias );
    Py_XDECREF( _python_par_can_reuse );
    Py_XDECREF( _python_par_allow_many );
    Py_XDECREF( _python_par_allow_explicit_fk );

    return NULL;
}

static PyObject *dparse_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_targets, PyObject *_python_par_joins, PyObject *_python_par_path )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_targets( _python_str_plain_targets, _python_par_targets );
    PyObjectLocalParameterVariableNoDel _python_var_joins( _python_str_plain_joins, _python_par_joins );
    PyObjectLocalParameterVariableNoDel _python_var_path( _python_str_plain_path, _python_par_path );
    PyObjectLocalVariable _python_var_pos( _python_str_plain_pos );
    PyObjectLocalVariable _python_var_info( _python_str_plain_info );
    PyObjectLocalVariable _python_var_join_targets( _python_str_plain_join_targets );
    PyObjectSharedLocalVariable _python_var_cur_targets( _python_str_plain_cur_targets );

    // Actual function code.
    static PyFrameObject *frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_6093e8569baa85d24d80e0f3ec33330b, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1388 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_reversed ), _python_var_path.asObject() ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1388 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 1388 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_pos.assign0( _python_tmp_element_1.asObject() );
                        _python_var_info.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1389 );
                if ( ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_joins.asObject() ) ).asObject(), _python_int_pos_1 ) || (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_info.asObject(), _python_str_plain_direct ) ).asObject() ) )) ) )
                {
                    frame_guard.setLineNumber( 1390 );
                    break;
                }
                frame_guard.setLineNumber( 1391 );
                _python_var_join_targets.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_info.asObject(), _python_str_plain_join_field ) ).asObject(), _python_str_plain_foreign_related_fields ) ).asObject() ) ) ).asObject() ) );
                frame_guard.setLineNumber( 1392 );
                _python_var_cur_targets.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( _python_var_targets.asObject() ) ) ).asObject() ) );
                frame_guard.setLineNumber( 1393 );
                {
                    PyObjectTempKeeper1 call1;
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_cur_targets.asObject(), _python_str_plain_issubset ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_join_targets.asObject() ) ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 1394 );
                    break;
                }
                }
                frame_guard.setLineNumber( 1395 );
                _python_var_targets.assign1( TO_TUPLE( PyObjectTemporary( impl_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_info.asObject(), _python_str_plain_join_field ) ).asObject(), _python_str_plain_related_fields ) ).asObject() ), _python_var_cur_targets ) ).asObject() ) );
                frame_guard.setLineNumber( 1396 );
                {
                    PyObjectTempKeeper1 call3;
                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unref_alias ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_joins.asObject(), _python_str_plain_pop ) ).asObject() ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1397 );
        {
            PyObjectTempKeeper0 make_tuple5;
            PyObjectTempKeeper1 make_tuple6;
            return ( make_tuple5.assign( _python_var_targets.asObject() ), make_tuple6.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_joins.asObject(), _python_int_neg_1, -1 ) ), MAKE_TUPLE3( make_tuple5.asObject0(), make_tuple6.asObject0(), _python_var_joins.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_path.updateLocalsDict( _python_var_joins.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_cur_targets.updateLocalsDict( _python_var_join_targets.updateLocalsDict( _python_var_info.updateLocalsDict( _python_var_pos.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_targets = NULL;
    PyObject *_python_par_joins = NULL;
    PyObject *_python_par_path = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "trim_joins() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_targets == key )
            {
                if (unlikely( _python_par_targets ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'targets'" );
                    goto error_exit;
                }

                _python_par_targets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_joins == key )
            {
                if (unlikely( _python_par_joins ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'joins'" );
                    goto error_exit;
                }

                _python_par_joins = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_path == key )
            {
                if (unlikely( _python_par_path ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'path'" );
                    goto error_exit;
                }

                _python_par_path = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_targets, key ) )
            {
                if (unlikely( _python_par_targets ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'targets'" );
                    goto error_exit;
                }

                _python_par_targets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_joins, key ) )
            {
                if (unlikely( _python_par_joins ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'joins'" );
                    goto error_exit;
                }

                _python_par_joins = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_path, key ) )
            {
                if (unlikely( _python_par_path ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'path'" );
                    goto error_exit;
                }

                _python_par_path = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "trim_joins() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "trim_joins() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "trim_joins() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "trim_joins() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "trim_joins() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "trim_joins() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "trim_joins() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "trim_joins() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "trim_joins() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "trim_joins() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "trim_joins() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "trim_joins() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_targets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'targets'" );
             goto error_exit;
         }

        _python_par_targets = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_joins != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'joins'" );
             goto error_exit;
         }

        _python_par_joins = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_path != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "trim_joins() got multiple values for keyword argument 'path'" );
             goto error_exit;
         }

        _python_par_path = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_targets, _python_par_joins, _python_par_path );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_targets );
    Py_XDECREF( _python_par_joins );
    Py_XDECREF( _python_par_path );

    return NULL;
}

static PyObject *dparse_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_t;
};

static void _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_t.setVariableName( _python_str_plain_t );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
            }

            frame_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_145e995e863954b6ce9d73f1ed2a1e01, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 1391 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 1391 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_t.assign0( _python_tmp_iter_value.asObject() );
                        YIELD_VALUE( generator, LOOKUP_ATTRIBUTE( _python_context->python_var_t.asObject(), _python_str_plain_column ) );

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_e3e8d200875d44280210b0903786391c,
            _python_context,
            _context_generator_genexpr_1_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}



struct _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_t;
};

static void _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_t.setVariableName( _python_str_plain_t );

        // Actual function code.
        static PyFrameObject *frame_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
            }

            frame_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_3d8a58a2a468cee06fca26837c4e8dfb, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 1392 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 1392 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_t.assign0( _python_tmp_iter_value.asObject() );
                        YIELD_VALUE( generator, LOOKUP_ATTRIBUTE( _python_context->python_var_t.asObject(), _python_str_plain_column ) );

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_23d5f96dbf2e588eea18249ec16fa6d7,
            _python_context,
            _context_generator_genexpr_2_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}



struct _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_cur_targets;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_r;
};

static void _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_r.setVariableName( _python_str_plain_r );

        // Actual function code.
        static PyFrameObject *frame_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
            }

            frame_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_74f987bf45204ea8617561fc36665eed, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 1395 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 1395 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_r.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper1 cmp1;
                            if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_context->python_var_r.asObject(), _python_int_pos_1, 1 ) ).asObject(), _python_str_plain_column ) ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), _python_context->python_closure_cur_targets.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 1395 );
                            YIELD_VALUE( generator, LOOKUP_SUBSCRIPT_CONST( _python_context->python_var_r.asObject(), _python_int_0, 0 ) );
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_cur_targets )
{
    // Create context if any
    struct _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_t;
    _python_context->python_closure_cur_targets.shareWith( python_closure_cur_targets );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_45e5724990a9b4b310958f3578685bb8,
            _python_context,
            _context_generator_genexpr_3_of_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filter_expr, PyObject *_python_par_prefix, PyObject *_python_par_can_reuse, PyObject *_python_par_names_with_path )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_filter_expr( _python_str_plain_filter_expr, _python_par_filter_expr );
    PyObjectLocalParameterVariableNoDel _python_var_prefix( _python_str_plain_prefix, _python_par_prefix );
    PyObjectLocalParameterVariableNoDel _python_var_can_reuse( _python_str_plain_can_reuse, _python_par_can_reuse );
    PyObjectLocalParameterVariableNoDel _python_var_names_with_path( _python_str_plain_names_with_path, _python_par_names_with_path );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_trimmed_prefix( _python_str_plain_trimmed_prefix );
    PyObjectLocalVariable _python_var_contains_louter( _python_str_plain_contains_louter );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_col( _python_str_plain_col );
    PyObjectLocalVariable _python_var_condition( _python_str_plain_condition );
    PyObjectLocalVariable _python_var_or_null_condition( _python_str_plain_or_null_condition );

    // Actual function code.
    static PyFrameObject *frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_29ec6d9403580e32401fcded9e7bbf9b, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1419 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_query.assign1( ( call1.assign( _mvar_django__db__models__sql__query_Query.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1420 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), call6.assign( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_build_filter ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_filter_expr.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1421 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_bump_prefix ) ).asObject() ) );
        frame_guard.setLineNumber( 1422 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_clear_ordering ) ).asObject(), Py_True ) );
        {
            frame_guard.setLineNumber( 1425 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call8;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_trim_start ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_names_with_path.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_trimmed_prefix.assign0( _python_tmp_element_1.asObject() );
            _python_var_contains_louter.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1426 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_remove_inherited_models ) ).asObject() ) );
        frame_guard.setLineNumber( 1432 );
        {
            PyObjectTempKeeper1 call17;
            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_nullable ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_select ) ).asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_field ) ).asObject() ) ) ).asObject() ) )
        {
            {
                frame_guard.setLineNumber( 1433 );
                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_select ) ).asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_col ) ).asObject() ) );
                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                _python_var_col.assign0( _python_tmp_element_2.asObject() );
            }
            frame_guard.setLineNumber( 1434 );
            {
                PyObjectTempKeeper0 call10;
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 call12;
                PyObjectTempKeeper1 call14;
                PyObjectTempKeeper1 call15;
                DECREASE_REFCOUNT( ( call14.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), call15.assign( MAKE_TUPLE3( PyObjectTemporary( ( call10.assign( _mvar_django__db__models__sql__query_Constraint.asObject0() ), call11.assign( _python_var_alias.asObject() ), call12.assign( _python_var_col.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), call12.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_select ) ).asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_field ) ).asObject() ) ) ).asObject(), _python_str_plain_isnull, Py_False ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), call15.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 1436 );
        {
            PyObjectTempKeeper1 call21;
            PyObjectTempKeeper1 call22;
            PyObjectTempKeeper1 make_tuple19;
            _python_var_condition.assign1( ( call21.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_filter ) ), call22.assign( MAKE_TUPLE1( PyObjectTemporary( ( make_tuple19.assign( BINARY_OPERATION_REMAINDER( _python_str_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, _python_var_trimmed_prefix.asObject() ) ), MAKE_TUPLE2( make_tuple19.asObject0(), _python_var_query.asObject() ) ) ).asObject() ) ), CALL_FUNCTION( call21.asObject0(), call22.asObject0(), PyObjectTemporary( MAKE_DICT3( Py_True, _python_str_plain_current_negated, Py_True, _python_str_plain_branch_negated, _python_var_can_reuse.asObject(), _python_str_plain_can_reuse ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1439 );
        if ( CHECK_IF_TRUE( _python_var_contains_louter.asObject() ) )
        {
            frame_guard.setLineNumber( 1440 );
            {
                PyObjectTempKeeper1 call24;
                PyObjectTempKeeper1 call25;
                _python_var_or_null_condition.assign1( ( call24.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_filter ) ), call25.assign( MAKE_TUPLE1( PyObjectTemporary( MAKE_TUPLE2( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_eb18df47b7af7e687604da24f2e50f7d, _python_var_trimmed_prefix.asObject() ) ).asObject(), Py_True ) ).asObject() ) ), CALL_FUNCTION( call24.asObject0(), call25.asObject0(), PyObjectTemporary( MAKE_DICT3( Py_True, _python_str_plain_current_negated, Py_True, _python_str_plain_branch_negated, _python_var_can_reuse.asObject(), _python_str_plain_can_reuse ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 1443 );
            {
                PyObjectTempKeeper1 call27;
                PyObjectTempKeeper0 call28;
                DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( _python_var_condition.asObject(), _python_str_plain_add ) ), call28.assign( _python_var_or_null_condition.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), call28.asObject0(), _mvar_django__db__models__sql__query_OR.asObject0() ) ) );
            }
        }
        frame_guard.setLineNumber( 1450 );
        return _python_var_condition.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_names_with_path.updateLocalsDict( _python_var_can_reuse.updateLocalsDict( _python_var_prefix.updateLocalsDict( _python_var_filter_expr.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_or_null_condition.updateLocalsDict( _python_var_condition.updateLocalsDict( _python_var_col.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_contains_louter.updateLocalsDict( _python_var_trimmed_prefix.updateLocalsDict( _python_var_query.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filter_expr = NULL;
    PyObject *_python_par_prefix = NULL;
    PyObject *_python_par_can_reuse = NULL;
    PyObject *_python_par_names_with_path = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "split_exclude() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_filter_expr == key )
            {
                if (unlikely( _python_par_filter_expr ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'filter_expr'" );
                    goto error_exit;
                }

                _python_par_filter_expr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prefix == key )
            {
                if (unlikely( _python_par_prefix ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'prefix'" );
                    goto error_exit;
                }

                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_reuse == key )
            {
                if (unlikely( _python_par_can_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'can_reuse'" );
                    goto error_exit;
                }

                _python_par_can_reuse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_names_with_path == key )
            {
                if (unlikely( _python_par_names_with_path ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'names_with_path'" );
                    goto error_exit;
                }

                _python_par_names_with_path = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_filter_expr, key ) )
            {
                if (unlikely( _python_par_filter_expr ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'filter_expr'" );
                    goto error_exit;
                }

                _python_par_filter_expr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prefix, key ) )
            {
                if (unlikely( _python_par_prefix ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'prefix'" );
                    goto error_exit;
                }

                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_reuse, key ) )
            {
                if (unlikely( _python_par_can_reuse ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'can_reuse'" );
                    goto error_exit;
                }

                _python_par_can_reuse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_names_with_path, key ) )
            {
                if (unlikely( _python_par_names_with_path ))
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'names_with_path'" );
                    goto error_exit;
                }

                _python_par_names_with_path = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "split_exclude() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_exclude() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "split_exclude() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "split_exclude() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_exclude() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "split_exclude() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_exclude() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "split_exclude() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_exclude() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 5 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "split_exclude() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "split_exclude() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 5 )
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() takes exactly %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "split_exclude() takes at least %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_expr != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'filter_expr'" );
             goto error_exit;
         }

        _python_par_filter_expr = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_prefix != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'prefix'" );
             goto error_exit;
         }

        _python_par_prefix = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_can_reuse != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'can_reuse'" );
             goto error_exit;
         }

        _python_par_can_reuse = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_names_with_path != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_exclude() got multiple values for keyword argument 'names_with_path'" );
             goto error_exit;
         }

        _python_par_names_with_path = INCREASE_REFCOUNT( args[ 4 ] );
    }


    return impl_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_filter_expr, _python_par_prefix, _python_par_can_reuse, _python_par_names_with_path );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filter_expr );
    Py_XDECREF( _python_par_prefix );
    Py_XDECREF( _python_par_can_reuse );
    Py_XDECREF( _python_par_names_with_path );

    return NULL;
}

static PyObject *dparse_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_c4fff982eaaa2da009821ad3b264d06f, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1453 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_EmptyWhere.asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_where );
        }
        frame_guard.setLineNumber( 1454 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_EmptyWhere.asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_having );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_empty() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_empty() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_empty() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_empty() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_empty() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_empty() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_empty() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_empty() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_empty() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_empty() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_empty() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_empty() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_empty() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_empty() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "set_empty() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_empty() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_empty() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_528fc1a8e719c2f9da2fbd28744feab2, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1457 );
        {
            PyObjectTempKeeper1 isinstance1;
            PyObjectTempKeeper1 isinstance3;
            PyObjectTempKeeper0 keeper_0;
            return INCREASE_REFCOUNT( ( CHECK_IF_TRUE( keeper_0.assign( BOOL_FROM( ( isinstance1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), _mvar_django__db__models__sql__query_EmptyWhere.asObject0() ) ) ) ) ) ? keeper_0.asObject0() : BOOL_FROM( ( isinstance3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_having ) ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _mvar_django__db__models__sql__query_EmptyWhere.asObject0() ) ) ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_empty() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_empty() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_empty() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_empty() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_empty() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_empty() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_empty() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_empty() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_empty() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_empty() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_empty() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_empty() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_empty() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_empty() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "is_empty() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_empty() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_empty() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_low, PyObject *_python_par_high )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_low( _python_str_plain_low, _python_par_low );
    PyObjectLocalParameterVariableNoDel _python_var_high( _python_str_plain_high, _python_par_high );

    // Actual function code.
    static PyFrameObject *frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_31a86a6778cb8a3f228aeedf50dab8e3, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1469 );
        if ( ( _python_var_high.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1470 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 1471 );
                {
                    PyObjectTempKeeper1 call4;
                    PyObjectTempKeeper1 op1;
                    {
                        PyObjectTemporary tmp_identifier( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_min ), call4.asObject0(), PyObjectTemporary( ( op1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ), BINARY_OPERATION_ADD( op1.asObject0(), _python_var_high.asObject() ) ) ).asObject() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_high_mark );
                }
                }
            }
            else
            {
                frame_guard.setLineNumber( 1473 );
                {
                    PyObjectTempKeeper1 op6;
                    {
                        PyObjectTemporary tmp_identifier( ( op6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ), BINARY_OPERATION_ADD( op6.asObject0(), _python_var_high.asObject() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_high_mark );
                }
                }
            }
        }
        frame_guard.setLineNumber( 1474 );
        if ( ( _python_var_low.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1475 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 1476 );
                {
                    PyObjectTempKeeper1 call11;
                    PyObjectTempKeeper1 op8;
                    {
                        PyObjectTemporary tmp_identifier( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_min ), call11.asObject0(), PyObjectTemporary( ( op8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ), BINARY_OPERATION_ADD( op8.asObject0(), _python_var_low.asObject() ) ) ).asObject() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_low_mark );
                }
                }
            }
            else
            {
                frame_guard.setLineNumber( 1478 );
                {
                    PyObjectTempKeeper1 op13;
                    {
                        PyObjectTemporary tmp_identifier( ( op13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ), BINARY_OPERATION_ADD( op13.asObject0(), _python_var_low.asObject() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_low_mark );
                }
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_high.updateLocalsDict( _python_var_low.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_low = NULL;
    PyObject *_python_par_high = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_limits() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_low == key )
            {
                if (unlikely( _python_par_low ))
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'low'" );
                    goto error_exit;
                }

                _python_par_low = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_high == key )
            {
                if (unlikely( _python_par_high ))
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'high'" );
                    goto error_exit;
                }

                _python_par_high = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_low, key ) )
            {
                if (unlikely( _python_par_low ))
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'low'" );
                    goto error_exit;
                }

                _python_par_low = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_high, key ) )
            {
                if (unlikely( _python_par_high ))
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'high'" );
                    goto error_exit;
                }

                _python_par_high = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_limits() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_limits() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_limits() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_limits() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_limits() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_limits() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_limits() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_limits() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_limits() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_limits() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_limits() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_limits() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_low != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'low'" );
             goto error_exit;
         }

        _python_par_low = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_high != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_limits() got multiple values for keyword argument 'high'" );
             goto error_exit;
         }

        _python_par_high = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_low == NULL )
    {
        _python_par_low = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_low );
    }
    if ( _python_par_high == NULL )
    {
        _python_par_high = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_high );
    }


    return impl_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_low, _python_par_high );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_low );
    Py_XDECREF( _python_par_high );

    return NULL;
}

static PyObject *dparse_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_3dcfea690b30143937aaf88708aa153f, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1484 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tuple_int_0_none_tuple ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_low_mark );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_high_mark );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear_limits() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_limits() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_limits() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear_limits() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_limits() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear_limits() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear_limits() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_limits() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_limits() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_limits() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_limits() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_limits() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear_limits() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear_limits() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clear_limits() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear_limits() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_limits() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_92e90dbdf0d6d4c41d2423aae8f6cc1e, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1492 );
        {
            PyObjectTempKeeper0 keeper_0;
            return INCREASE_REFCOUNT( ( CHECK_IF_TRUE( keeper_0.assign( UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_low_mark ) ).asObject() ) ) ) ? BOOL_FROM( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_high_mark ) ).asObject() == Py_None ) ) : keeper_0.asObject0() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "can_filter() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "can_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "can_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "can_filter() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "can_filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "can_filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "can_filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "can_filter() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "can_filter() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "can_filter() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "can_filter() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "can_filter() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "can_filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "can_filter() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "can_filter() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "can_filter() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "can_filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_0f77738ca2c5da6f417437c60b471e86, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1498 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_select );
        frame_guard.setLineNumber( 1499 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_default_cols );
        frame_guard.setLineNumber( 1500 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_select_related );
        frame_guard.setLineNumber( 1501 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_set_extra_mask ) ).asObject(), _python_tuple_empty ) );
        frame_guard.setLineNumber( 1502 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_set_aggregate_mask ) ).asObject(), _python_tuple_empty ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear_select_clause() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_clause() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_clause() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear_select_clause() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_select_clause() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear_select_clause() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear_select_clause() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_select_clause() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_select_clause() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_select_clause() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_select_clause() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_select_clause() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear_select_clause() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear_select_clause() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_clause() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_clause() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_select_clause() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_236530e2b5a02e3bc980513db2476d52, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1510 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_select );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear_select_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear_select_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_select_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear_select_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear_select_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_select_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_select_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_select_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_select_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_select_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear_select_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear_select_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear_select_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_select_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_names( _python_str_plain_field_names, _python_par_field_names );

    // Actual function code.
    static PyFrameObject *frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_5ebab33f73412837b51d7873e34bf178, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1516 );
        {
                PyObject *tmp_identifier = _python_var_field_names.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_distinct_fields );
        }
        frame_guard.setLineNumber( 1517 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_distinct );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_names.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_names = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_distinct_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_distinct_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_distinct_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_distinct_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_distinct_fields() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_distinct_fields() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_distinct_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_distinct_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_field_names = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_field_names, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_field_names = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_field_names );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_names );

    return NULL;
}

static PyObject *dparse_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_names, PyObject *_python_par_allow_m2m )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_names( _python_str_plain_field_names, _python_par_field_names );
    PyObjectLocalParameterVariableNoDel _python_var_allow_m2m( _python_str_plain_allow_m2m, _python_par_allow_m2m );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_targets( _python_str_plain_targets );
    PyObjectLocalVariable _python_var_u2( _python_str_plain_u2 );
    PyObjectLocalVariable _python_var_joins( _python_str_plain_joins );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_final_alias( _python_str_plain_final_alias );
    PyObjectLocalVariable _python_var_remaining_joins( _python_str_plain_remaining_joins );
    PyObjectLocalVariable _python_var_target( _python_str_plain_target );
    PyObjectLocalVariable _python_var_names( _python_str_plain_names );

    // Actual function code.
    static PyFrameObject *frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_77ce747c9dc95932d68741c85b061e4c, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1524 );
        _python_var_alias.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_initial_alias ) ).asObject() ) );
        frame_guard.setLineNumber( 1525 );
        _python_var_opts.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_meta ) ).asObject() ) );
        frame_guard.setLineNumber( 1527 );
        try
        {
            {
                frame_guard.setLineNumber( 1528 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_field_names.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1528 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_name.assign0( _python_tmp_iter_value.asObject() );
                    }
                    {
                        frame_guard.setLineNumber( 1529 );
                        PyObject *_tmp_python_tmp_source_iter;
                        {
                            PyObjectTempKeeper1 call15;
                            PyObjectTempKeeper1 call23;
                            PyObjectTempKeeper1 make_tuple17;
                            PyObjectTempKeeper0 make_tuple18;
                            PyObjectTempKeeper0 make_tuple19;
                            _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call23.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_setup_joins ) ), CALL_FUNCTION_WITH_POSARGS( call23.asObject0(), PyObjectTemporary( ( make_tuple17.assign( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_name.asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0() ) ) ), make_tuple18.assign( _python_var_opts.asObject() ), make_tuple19.assign( _python_var_alias.asObject() ), MAKE_TUPLE6( make_tuple17.asObject0(), make_tuple18.asObject0(), make_tuple19.asObject0(), Py_None, _python_var_allow_m2m.asObject(), Py_True ) ) ).asObject() ) ) ).asObject() );
                        }
                        PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                        PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                        PyObjectTemporary _python_tmp_element_5( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 4 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 5 );
                        _python_var_field.assign0( _python_tmp_element_1.asObject() );
                        _python_var_targets.assign0( _python_tmp_element_2.asObject() );
                        _python_var_u2.assign0( _python_tmp_element_3.asObject() );
                        _python_var_joins.assign0( _python_tmp_element_4.asObject() );
                        _python_var_path.assign0( _python_tmp_element_5.asObject() );
                    }
                    {
                        frame_guard.setLineNumber( 1534 );
                        PyObject *_tmp_python_tmp_source_iter;
                        {
                            PyObjectTempKeeper1 call25;
                            PyObjectTempKeeper0 call26;
                            PyObjectTempKeeper1 call27;
                            _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call25.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_trim_joins ) ), call26.assign( _python_var_targets.asObject() ), call27.assign( LOOKUP_INDEX_SLICE( _python_var_joins.asObject(), -2, PY_SSIZE_T_MAX ) ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), call26.asObject0(), call27.asObject0(), _python_var_path.asObject() ) ) ).asObject() );
                        }
                        PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
                        _python_var_targets.assign0( _python_tmp_element_1.asObject() );
                        _python_var_final_alias.assign0( _python_tmp_element_2.asObject() );
                        _python_var_remaining_joins.assign0( _python_tmp_element_3.asObject() );
                    }
                    frame_guard.setLineNumber( 1535 );
                    {
                        PyObjectTempKeeper1 op29;
                        _python_var_joins.assign1( ( op29.assign( LOOKUP_INDEX_SLICE( _python_var_joins.asObject(), 0, -2 ) ), BINARY_OPERATION_ADD( op29.asObject0(), _python_var_remaining_joins.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1537 );
                    {
                        PyObjectTempKeeper1 call31;
                        DECREASE_REFCOUNT( ( call31.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_promote_joins ) ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), PyObjectTemporary( LOOKUP_INDEX_SLICE( _python_var_joins.asObject(), 1, PY_SSIZE_T_MAX ) ).asObject() ) ) );
                    }
                    {
                        frame_guard.setLineNumber( 1538 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_targets.asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 1538 );
                                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_2 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                _python_var_target.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 1539 );
                            {
                                PyObjectTempKeeper0 call35;
                                PyObjectTempKeeper1 call36;
                                PyObjectTempKeeper1 call38;
                                PyObjectTempKeeper0 make_tuple33;
                                DECREASE_REFCOUNT( ( call38.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call38.asObject0(), PyObjectTemporary( ( call35.assign( _mvar_django__db__models__sql__query_SelectInfo.asObject0() ), call36.assign( ( make_tuple33.assign( _python_var_final_alias.asObject() ), MAKE_TUPLE2( make_tuple33.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_target.asObject(), _python_str_plain_column ) ).asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), call36.asObject0(), _python_var_target.asObject() ) ) ).asObject() ) ) );
                            }

                           CONSIDER_THREADING();
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( _mvar_django__db__models__sql__query_MultiJoin.asObject0() ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1541 );
                {
                    PyObjectTempKeeper0 call1;
                    {
                        PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_d08f9140ddc8844698cfee60975b52f7, _python_var_name.asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else if ( _exception.matches( _mvar_django__db__models__sql__query_FieldError.asObject0() ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1543 );
                {
                    PyObjectTempKeeper0 cmp13;
                    if ( ( cmp13.assign( _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0() ), SEQUENCE_CONTAINS_BOOL( cmp13.asObject0(), _python_var_name.asObject() ) ) )
                {
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1548 );
                    {
                        PyObjectTempKeeper1 op3;
                        PyObjectTempKeeper1 op5;
                        _python_var_names.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_sorted ), PyObjectTemporary( ( op5.assign( ( op3.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_get_all_field_names ) ).asObject() ) ), BINARY_OPERATION_ADD( op3.asObject0(), PyObjectTemporary( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra ) ).asObject() ) ).asObject() ) ) ), BINARY_OPERATION_ADD( op5.asObject0(), PyObjectTemporary( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select ) ).asObject() ) ).asObject() ) ) ).asObject() ) );
                    }
                    frame_guard.setLineNumber( 1550 );
                    {
                        PyObjectTempKeeper0 call11;
                        PyObjectTempKeeper1 call7;
                        PyObjectTempKeeper0 make_tuple9;
                        {
                            PyObjectTemporary tmp_exception_type( ( call11.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_d3414b4f90d28ed46f48d17547438257, PyObjectTemporary( ( make_tuple9.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple9.asObject0(), PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_str_digest_fc763cb31e9938f37737394681228f83, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_names.asObject() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 1552 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_remove_inherited_models ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_allow_m2m.updateLocalsDict( _python_var_field_names.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_names.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_remaining_joins.updateLocalsDict( _python_var_final_alias.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_joins.updateLocalsDict( _python_var_u2.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_alias.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_names = NULL;
    PyObject *_python_par_allow_m2m = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_names == key )
            {
                if (unlikely( _python_par_field_names ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'field_names'" );
                    goto error_exit;
                }

                _python_par_field_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_allow_m2m == key )
            {
                if (unlikely( _python_par_allow_m2m ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'allow_m2m'" );
                    goto error_exit;
                }

                _python_par_allow_m2m = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_names, key ) )
            {
                if (unlikely( _python_par_field_names ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'field_names'" );
                    goto error_exit;
                }

                _python_par_field_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_allow_m2m, key ) )
            {
                if (unlikely( _python_par_allow_m2m ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'allow_m2m'" );
                    goto error_exit;
                }

                _python_par_allow_m2m = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_names != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'field_names'" );
             goto error_exit;
         }

        _python_par_field_names = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_m2m != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'allow_m2m'" );
             goto error_exit;
         }

        _python_par_allow_m2m = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_allow_m2m == NULL )
    {
        _python_par_allow_m2m = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_allow_m2m );
    }


    return impl_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_field_names, _python_par_allow_m2m );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_names );
    Py_XDECREF( _python_par_allow_m2m );

    return NULL;
}

static PyObject *dparse_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_ordering )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_ordering( _python_str_plain_ordering, _python_par_ordering );
    PyObjectLocalVariable _python_var_errors( _python_str_plain_errors );
    PyObjectLocalVariable _python_var_item( _python_str_plain_item );

    // Actual function code.
    _python_var_errors.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_92f9301d08871530aa6c576a86e04783, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1564 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_ordering.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1564 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_item.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1565 );
                {
                    PyObjectTempKeeper1 call3;
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_ORDER_PATTERN.asObject0(), _python_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_item.asObject() ) ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 1566 );
                    {
                        PyObjectTempKeeper1 call1;
                        DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_item.asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1567 );
        if ( CHECK_IF_TRUE( _python_var_errors.asObject() ) )
        {
            frame_guard.setLineNumber( 1568 );
            {
                PyObjectTempKeeper0 call5;
                {
                    PyObjectTemporary tmp_exception_type( ( call5.assign( _mvar_django__db__models__sql__query_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_b16e1c7114d29a56bbcd54badd2ddcee, _python_var_errors.asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 1569 );
        if ( CHECK_IF_TRUE( _python_var_ordering.asObject() ) )
        {
            frame_guard.setLineNumber( 1570 );
            {
                PyObjectTempKeeper1 call7;
                DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_order_by ) ).asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_ordering.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1572 );
            SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_default_ordering );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_ordering.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_item.updateLocalsDict( _python_var_errors.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_ordering = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_ordering() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_ordering() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_ordering() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_ordering() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_ordering() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_ordering() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_ordering() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_ordering() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_ordering = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_ordering, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_ordering = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_ordering );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_ordering );

    return NULL;
}

static PyObject *dparse_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_force_empty )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_force_empty( _python_str_plain_force_empty, _python_par_force_empty );

    // Actual function code.
    static PyFrameObject *frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_f8831e733f5f0856fe1c9c6a7a3b07ca, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1579 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_order_by );
        frame_guard.setLineNumber( 1580 );
        SET_ATTRIBUTE( _python_tuple_empty, _python_var_self.asObject(), _python_str_plain_extra_order_by );
        frame_guard.setLineNumber( 1581 );
        if ( CHECK_IF_TRUE( _python_var_force_empty.asObject() ) )
        {
            frame_guard.setLineNumber( 1582 );
            SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_default_ordering );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_force_empty.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_force_empty = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear_ordering() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_ordering() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_force_empty == key )
            {
                if (unlikely( _python_par_force_empty ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_ordering() got multiple values for keyword argument 'force_empty'" );
                    goto error_exit;
                }

                _python_par_force_empty = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_ordering() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_force_empty, key ) )
            {
                if (unlikely( _python_par_force_empty ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_ordering() got multiple values for keyword argument 'force_empty'" );
                    goto error_exit;
                }

                _python_par_force_empty = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear_ordering() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_ordering() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear_ordering() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear_ordering() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_ordering() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clear_ordering() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_ordering() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clear_ordering() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_ordering() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear_ordering() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear_ordering() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clear_ordering() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear_ordering() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_ordering() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_force_empty != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_ordering() got multiple values for keyword argument 'force_empty'" );
             goto error_exit;
         }

        _python_par_force_empty = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_force_empty );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_force_empty );

    return NULL;
}

static PyObject *dparse_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_col( _python_str_plain_col );
    PyObjectLocalVariable _python_var__( _python_str_plain__ );

    // Actual function code.
    static PyFrameObject *frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_b46486902c5bf000975b0f437a430ee7, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1593 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_group_by );
        {
            frame_guard.setLineNumber( 1595 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1595 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 1595 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_col.assign0( _python_tmp_element_1.asObject() );
                        _python_var__.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1596 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_group_by ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_col.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var__.updateLocalsDict( _python_var_col.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_group_by() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_group_by() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_group_by() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_group_by() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_group_by() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_group_by() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_group_by() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_group_by() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_group_by() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_group_by() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_group_by() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_group_by() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_group_by() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_group_by() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "set_group_by() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_group_by() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_group_by() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_count( _python_str_plain_count );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );

    // Actual function code.
    static PyFrameObject *frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_92a718213a9509b9e4f7978f1b28e74d, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1603 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_distinct ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 1604 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 1605 );
                _python_var_count.assign1( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates_module ) ).asObject(), _python_str_plain_Count ) ).asObject(), _python_tuple_str_chr_42_tuple, PyObjectTemporary( PyDict_Copy( _python_dict_26917b03e20068d4f50029bbe86698e1 ) ).asObject() ) );
            }
            else
            {
                frame_guard.setLineNumber( 1607 );
                if ( (!( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ) ).asObject(), _python_int_pos_1 ) )) )
                {
                    frame_guard.setLineNumber( 1607 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_99917d3aa11237d67bb1162ffb3bd4ec, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                }
                frame_guard.setLineNumber( 1609 );
                {
                    PyObjectTempKeeper1 call1;
                    _python_var_count.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates_module ) ).asObject(), _python_str_plain_Count ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_col ) ).asObject() ) ) );
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 1611 );
            _python_var_opts.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_meta ) ).asObject() ) );
            frame_guard.setLineNumber( 1612 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 1613 );
                {
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper1 call7;
                    PyObjectTempKeeper1 make_tuple5;
                    _python_var_count.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates_module ) ).asObject(), _python_str_plain_Count ) ), CALL_FUNCTION( call7.asObject0(), PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( ( make_tuple5.assign( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( MAKE_TUPLE3( Py_None, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_db_table ) ).asObject(), Py_None ) ).asObject() ) ) ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_column ) ).asObject() ) ) ).asObject() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_ffd4d40a3fbb387794d8b0e011c23db1 ) ).asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1619 );
                if ( (!( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject() ) ).asObject(), _python_int_pos_1 ) )) )
                {
                    frame_guard.setLineNumber( 1619 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_736f14ce61c1d8d5d806d79d0e65b740 ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                }
                frame_guard.setLineNumber( 1622 );
                {
                    PyObjectTempKeeper1 call10;
                    _python_var_count.assign1( ( call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates_module ) ).asObject(), _python_str_plain_Count ) ), CALL_FUNCTION( call10.asObject0(), PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_select ) ).asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_col ) ).asObject() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_682137fb16d6aee07eab7be267ec2924 ) ).asObject() ) ) );
                }
            }
            frame_guard.setLineNumber( 1625 );
            SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_distinct );
        }
        frame_guard.setLineNumber( 1629 );
        {
                PyObjectTemporary tmp_identifier( MAKE_DICT1( _python_var_count.asObject(), Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_aggregates );
        }
        frame_guard.setLineNumber( 1630 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_set_aggregate_mask ) ).asObject(), Py_None ) );
        frame_guard.setLineNumber( 1631 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_group_by );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_count.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_count_column() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_count_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_count_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_count_column() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_count_column() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_count_column() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_count_column() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_count_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "add_count_column() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_count_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "add_count_column() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_count_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_count_column() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_count_column() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "add_count_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_count_column() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_count_column() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalVariable _python_var_field_dict( _python_str_plain_field_dict );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_d( _python_str_plain_d );
    PyObjectLocalVariable _python_var_part( _python_str_plain_part );

    // Actual function code.
    _python_var_field_dict.assign1( PyDict_New() );
    static PyFrameObject *frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_965faa2807ed092b217fc25f79278b51, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1640 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_fields.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1640 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_field.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1641 );
                _python_var_d.assign0( _python_var_field_dict.asObject() );
                {
                    frame_guard.setLineNumber( 1642 );
                    PyObject *_tmp_python_tmp_for_iterator;
                    {
                        PyObjectTempKeeper1 call1;
                        _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 1642 );
                            PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_2 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                            _python_var_part.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 1643 );
                        {
                            PyObjectTempKeeper1 call3;
                            _python_var_d.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_d.asObject(), _python_str_plain_setdefault ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_part.asObject(), PyObjectTemporary( PyDict_New() ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1644 );
        {
                PyObject *tmp_identifier = _python_var_field_dict.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_select_related );
        }
        frame_guard.setLineNumber( 1645 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_related_select_cols );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_part.updateLocalsDict( _python_var_d.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_field_dict.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_select_related() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_select_related() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "add_select_related() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_select_related() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "add_select_related() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_select_related() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_select_related() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_select_related() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_select_related() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_select_related() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_select_related() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_select_related() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_select_related() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_select_related() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_select_related() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_select_related() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_select_related() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_select_related() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_select_related() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_select_related() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_fields );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );

    return NULL;
}

static PyObject *dparse_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_select, PyObject *_python_par_select_params, PyObject *_python_par_where, PyObject *_python_par_params, PyObject *_python_par_tables, PyObject *_python_par_order_by )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_select( _python_str_plain_select, _python_par_select );
    PyObjectLocalParameterVariableNoDel _python_var_select_params( _python_str_plain_select_params, _python_par_select_params );
    PyObjectLocalParameterVariableNoDel _python_var_where( _python_str_plain_where, _python_par_where );
    PyObjectLocalParameterVariableNoDel _python_var_params( _python_str_plain_params, _python_par_params );
    PyObjectLocalParameterVariableNoDel _python_var_tables( _python_str_plain_tables, _python_par_tables );
    PyObjectLocalParameterVariableNoDel _python_var_order_by( _python_str_plain_order_by, _python_par_order_by );
    PyObjectLocalVariable _python_var_select_pairs( _python_str_plain_select_pairs );
    PyObjectLocalVariable _python_var_param_iter( _python_str_plain_param_iter );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_entry( _python_str_plain_entry );
    PyObjectLocalVariable _python_var_entry_params( _python_str_plain_entry_params );
    PyObjectLocalVariable _python_var_pos( _python_str_plain_pos );

    // Actual function code.
    static PyFrameObject *frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_3945e630e098afb4f501c310a1029449, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1652 );
        if ( CHECK_IF_TRUE( _python_var_select.asObject() ) )
        {
            frame_guard.setLineNumber( 1657 );
            _python_var_select_pairs.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__sql__query_SortedDict.asObject0() ) );
            frame_guard.setLineNumber( 1658 );
            if ( CHECK_IF_TRUE( _python_var_select_params.asObject() ) )
            {
                frame_guard.setLineNumber( 1659 );
                _python_var_param_iter.assign1( MAKE_ITERATOR( _python_var_select_params.asObject() ) );
            }
            else
            {
                frame_guard.setLineNumber( 1661 );
                _python_var_param_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( PyList_New( 0 ) ).asObject() ) );
            }
            {
                frame_guard.setLineNumber( 1662 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_select.asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1662 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 1662 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_name.assign0( _python_tmp_element_1.asObject() );
                            _python_var_entry.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 1663 );
                    {
                        PyObjectTempKeeper0 call1;
                        _python_var_entry.assign1( ( call1.assign( _mvar_django__db__models__sql__query_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_entry.asObject() ) ) );
                    }
                    _python_var_entry_params.assign1( PyList_New( 0 ) );
                    frame_guard.setLineNumber( 1665 );
                    _python_var_pos.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_entry.asObject(), _python_str_plain_find ) ).asObject(), _python_str_digest_1c481aa99d081c32182011a758f73d33 ) );
                    frame_guard.setLineNumber( 1666 );
                    while( true )
                    {
                        frame_guard.setLineNumber( 1666 );
                        if ( (!( RICH_COMPARE_BOOL_NE( _python_var_pos.asObject(), _python_int_neg_1 ) )) )
                        {
                            frame_guard.setLineNumber( 1666 );
                            break;
                        }
                        frame_guard.setLineNumber( 1667 );
                        {
                            PyObjectTempKeeper1 call3;
                            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_entry_params.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( BUILTIN_NEXT1( _python_var_param_iter.asObject() ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1668 );
                        {
                            PyObjectTempKeeper1 call5;
                            _python_var_pos.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_entry.asObject(), _python_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_str_digest_1c481aa99d081c32182011a758f73d33, PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_pos.asObject(), _python_int_pos_2 ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                    frame_guard.setLineNumber( 1669 );
                    {
                        PyObjectTempKeeper0 make_tuple8;
                        {
                            PyObjectTemporary tmp_identifier( ( make_tuple8.assign( _python_var_entry.asObject() ), MAKE_TUPLE2( make_tuple8.asObject0(), _python_var_entry_params.asObject() ) ) );
                            PyObject *tmp_subscribed = _python_var_select_pairs.asObject();
                            SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_var_name.asObject() );
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 1671 );
            {
                PyObjectTempKeeper1 call10;
                DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_select_pairs.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1672 );
        if ( ( CHECK_IF_TRUE( _python_var_where.asObject() ) || CHECK_IF_TRUE( _python_var_params.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1673 );
            {
                PyObjectTempKeeper0 call12;
                PyObjectTempKeeper0 call13;
                PyObjectTempKeeper1 call15;
                PyObjectTempKeeper1 call16;
                DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), call16.assign( ( call12.assign( _mvar_django__db__models__sql__query_ExtraWhere.asObject0() ), call13.assign( _python_var_where.asObject() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), call13.asObject0(), _python_var_params.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), call16.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
            }
        }
        frame_guard.setLineNumber( 1674 );
        if ( CHECK_IF_TRUE( _python_var_tables.asObject() ) )
        {
            {
                frame_guard.setLineNumber( 1675 );
                PyObjectTemporary _python_tmp_inplace_start( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_tables ) );
                PyObject *_tmp_python_tmp_inplace_end;
                {
                    PyObjectTempKeeper0 op18;
                    _tmp_python_tmp_inplace_end = ( op18.assign( _python_tmp_inplace_start.asObject() ), BINARY_OPERATION( PyNumber_InPlaceAdd, op18.asObject0(), PyObjectTemporary( TO_TUPLE( _python_var_tables.asObject() ) ).asObject() ) );
                }
                PyObjectTemporary _python_tmp_inplace_end( _tmp_python_tmp_inplace_end );
                if ( ( _python_tmp_inplace_start.asObject() != _python_tmp_inplace_end.asObject() ) )
                {
                    frame_guard.setLineNumber( 1675 );
                    {
                            PyObject *tmp_identifier = _python_tmp_inplace_end.asObject();
                            SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_extra_tables );
                    }
                }
            }
        }
        frame_guard.setLineNumber( 1676 );
        if ( CHECK_IF_TRUE( _python_var_order_by.asObject() ) )
        {
            frame_guard.setLineNumber( 1677 );
            {
                    PyObject *tmp_identifier = _python_var_order_by.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_extra_order_by );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_order_by.updateLocalsDict( _python_var_tables.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_where.updateLocalsDict( _python_var_select_params.updateLocalsDict( _python_var_select.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_pos.updateLocalsDict( _python_var_entry_params.updateLocalsDict( _python_var_entry.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_param_iter.updateLocalsDict( _python_var_select_pairs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_select = NULL;
    PyObject *_python_par_select_params = NULL;
    PyObject *_python_par_where = NULL;
    PyObject *_python_par_params = NULL;
    PyObject *_python_par_tables = NULL;
    PyObject *_python_par_order_by = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_extra() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_select == key )
            {
                if (unlikely( _python_par_select ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'select'" );
                    goto error_exit;
                }

                _python_par_select = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_select_params == key )
            {
                if (unlikely( _python_par_select_params ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'select_params'" );
                    goto error_exit;
                }

                _python_par_select_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_where == key )
            {
                if (unlikely( _python_par_where ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'where'" );
                    goto error_exit;
                }

                _python_par_where = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_params == key )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_tables == key )
            {
                if (unlikely( _python_par_tables ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'tables'" );
                    goto error_exit;
                }

                _python_par_tables = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_order_by == key )
            {
                if (unlikely( _python_par_order_by ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'order_by'" );
                    goto error_exit;
                }

                _python_par_order_by = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_select, key ) )
            {
                if (unlikely( _python_par_select ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'select'" );
                    goto error_exit;
                }

                _python_par_select = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_select_params, key ) )
            {
                if (unlikely( _python_par_select_params ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'select_params'" );
                    goto error_exit;
                }

                _python_par_select_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_where, key ) )
            {
                if (unlikely( _python_par_where ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'where'" );
                    goto error_exit;
                }

                _python_par_where = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_params, key ) )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_tables, key ) )
            {
                if (unlikely( _python_par_tables ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'tables'" );
                    goto error_exit;
                }

                _python_par_tables = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_order_by, key ) )
            {
                if (unlikely( _python_par_order_by ))
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'order_by'" );
                    goto error_exit;
                }

                _python_par_order_by = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_extra() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_extra() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_extra() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_extra() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_extra() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 7 )
            {
                PyErr_Format( PyExc_TypeError, "add_extra() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_extra() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 7 )
            {
                PyErr_Format( PyExc_TypeError, "add_extra() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_extra() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 7 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_extra() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_extra() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 7 )
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() takes exactly %d arguments (%zd given)", 7, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_extra() takes at least %d arguments (%zd given)", 7, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_select != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'select'" );
             goto error_exit;
         }

        _python_par_select = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_select_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'select_params'" );
             goto error_exit;
         }

        _python_par_select_params = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_where != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'where'" );
             goto error_exit;
         }

        _python_par_where = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'params'" );
             goto error_exit;
         }

        _python_par_params = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_tables != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'tables'" );
             goto error_exit;
         }

        _python_par_tables = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_order_by != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_extra() got multiple values for keyword argument 'order_by'" );
             goto error_exit;
         }

        _python_par_order_by = INCREASE_REFCOUNT( args[ 6 ] );
    }


    return impl_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_select, _python_par_select_params, _python_par_where, _python_par_params, _python_par_tables, _python_par_order_by );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_select );
    Py_XDECREF( _python_par_select_params );
    Py_XDECREF( _python_par_where );
    Py_XDECREF( _python_par_params );
    Py_XDECREF( _python_par_tables );
    Py_XDECREF( _python_par_order_by );

    return NULL;
}

static PyObject *dparse_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_229c740e74dcead3c3df868eafaccabb, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1683 );
        {
                PyObjectTemporary tmp_identifier( MAKE_TUPLE2( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) ).asObject(), Py_True ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_deferred_loading );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear_deferred_loading() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_deferred_loading() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_deferred_loading() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear_deferred_loading() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear_deferred_loading() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_deferred_loading() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_names( _python_str_plain_field_names, _python_par_field_names );
    PyObjectLocalVariable _python_var_existing( _python_str_plain_existing );
    PyObjectLocalVariable _python_var_defer( _python_str_plain_defer );

    // Actual function code.
    static PyFrameObject *frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_bb83d29ba0e116c4028cf79601581124, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1697 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deferred_loading ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_existing.assign0( _python_tmp_element_1.asObject() );
            _python_var_defer.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1698 );
        if ( CHECK_IF_TRUE( _python_var_defer.asObject() ) )
        {
            frame_guard.setLineNumber( 1700 );
            {
                PyObjectTempKeeper1 call1;
                {
                    PyObjectTemporary tmp_identifier( MAKE_TUPLE2( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_existing.asObject(), _python_str_plain_union ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_field_names.asObject() ) ) ).asObject(), Py_True ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_deferred_loading );
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 1703 );
            {
                PyObjectTempKeeper1 call3;
                {
                    PyObjectTemporary tmp_identifier( MAKE_TUPLE2( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_existing.asObject(), _python_str_plain_difference ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_field_names.asObject() ) ) ).asObject(), Py_False ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_deferred_loading );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_names.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defer.updateLocalsDict( _python_var_existing.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_names = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_deferred_loading() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_deferred_loading() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_names == key )
            {
                if (unlikely( _python_par_field_names ))
                {
                    PyErr_Format( PyExc_TypeError, "add_deferred_loading() got multiple values for keyword argument 'field_names'" );
                    goto error_exit;
                }

                _python_par_field_names = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_deferred_loading() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_names, key ) )
            {
                if (unlikely( _python_par_field_names ))
                {
                    PyErr_Format( PyExc_TypeError, "add_deferred_loading() got multiple values for keyword argument 'field_names'" );
                    goto error_exit;
                }

                _python_par_field_names = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_deferred_loading() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_deferred_loading() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_deferred_loading() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_names != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_deferred_loading() got multiple values for keyword argument 'field_names'" );
             goto error_exit;
         }

        _python_par_field_names = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_field_names );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_names );

    return NULL;
}

static PyObject *dparse_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_names( _python_str_plain_field_names, _python_par_field_names );
    PyObjectLocalVariable _python_var_existing( _python_str_plain_existing );
    PyObjectLocalVariable _python_var_defer( _python_str_plain_defer );

    // Actual function code.
    static PyFrameObject *frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_ab9db79f343196665f261cfd6ce50dd9, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1715 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deferred_loading ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_existing.assign0( _python_tmp_element_1.asObject() );
            _python_var_defer.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1716 );
        _python_var_field_names.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), _python_var_field_names.asObject() ) );
        frame_guard.setLineNumber( 1717 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_str_plain_pk, _python_var_field_names.asObject() ) )
        {
            frame_guard.setLineNumber( 1718 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field_names.asObject(), _python_str_plain_remove ) ).asObject(), _python_str_plain_pk ) );
            frame_guard.setLineNumber( 1719 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_field_names.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_meta ) ).asObject() ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1721 );
        if ( CHECK_IF_TRUE( _python_var_defer.asObject() ) )
        {
            frame_guard.setLineNumber( 1724 );
            {
                PyObjectTempKeeper1 call3;
                {
                    PyObjectTemporary tmp_identifier( MAKE_TUPLE2( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_field_names.asObject(), _python_str_plain_difference ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_existing.asObject() ) ) ).asObject(), Py_False ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_deferred_loading );
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 1727 );
            {
                    PyObjectTemporary tmp_identifier( MAKE_TUPLE2( _python_var_field_names.asObject(), Py_False ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_deferred_loading );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_names.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defer.updateLocalsDict( _python_var_existing.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_names = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_immediate_loading() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_immediate_loading() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_names == key )
            {
                if (unlikely( _python_par_field_names ))
                {
                    PyErr_Format( PyExc_TypeError, "add_immediate_loading() got multiple values for keyword argument 'field_names'" );
                    goto error_exit;
                }

                _python_par_field_names = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_immediate_loading() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_names, key ) )
            {
                if (unlikely( _python_par_field_names ))
                {
                    PyErr_Format( PyExc_TypeError, "add_immediate_loading() got multiple values for keyword argument 'field_names'" );
                    goto error_exit;
                }

                _python_par_field_names = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_immediate_loading() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_immediate_loading() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_immediate_loading() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_names != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_immediate_loading() got multiple values for keyword argument 'field_names'" );
             goto error_exit;
         }

        _python_par_field_names = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_field_names );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_names );

    return NULL;
}

static PyObject *dparse_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_collection( _python_str_plain_collection );

    // Actual function code.
    static PyFrameObject *frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_55e56e1a62bd211cc36c3ceefa474aad, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1740 );
        try
        {
            frame_guard.setLineNumber( 1741 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__loaded_field_names_cache );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                _python_var_collection.assign1( PyDict_New() );
                frame_guard.setLineNumber( 1744 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call2;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deferred_to_data ) ), call2.assign( _python_var_collection.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_loaded_field_names_cb ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 1745 );
                {
                        PyObject *tmp_identifier = _python_var_collection.asObject();
                        SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__loaded_field_names_cache );
                }
                frame_guard.setLineNumber( 1746 );
                return _python_var_collection.asObject1();
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_collection.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_loaded_field_names() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_loaded_field_names() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_target, PyObject *_python_par_model, PyObject *_python_par_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_target( _python_str_plain_target, _python_par_target );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_ad44a9ed7834bf0a61774fb9b6e0f45f, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1752 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_listcontr_1_of_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( _python_var_fields.asObject() ), _python_var_f ) ).asObject() ) );
                PyObject *tmp_subscribed = _python_var_target.asObject();
                SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_var_model.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_fields.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_target = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_target == key )
            {
                if (unlikely( _python_par_target ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'target'" );
                    goto error_exit;
                }

                _python_par_target = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_target, key ) )
            {
                if (unlikely( _python_par_target ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'target'" );
                    goto error_exit;
                }

                _python_par_target = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_loaded_field_names_cb() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_target != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'target'" );
             goto error_exit;
         }

        _python_par_target = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_loaded_field_names_cb() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_target, _python_par_model, _python_par_fields );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_target );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_fields );

    return NULL;
}

static PyObject *dparse_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1752 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1752 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_name ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_names( _python_str_plain_names, _python_par_names );

    // Actual function code.
    static PyFrameObject *frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_34c5a28fa677fecd034af00c73b83375, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1756 );
        if ( ( _python_var_names.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1757 );
            SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_aggregate_select_mask );
        }
        else
        {
            frame_guard.setLineNumber( 1759 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), _python_var_names.asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_aggregate_select_mask );
            }
        }
        frame_guard.setLineNumber( 1760 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__aggregate_select_cache );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_names.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_names = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_aggregate_mask() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_aggregate_mask() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_names == key )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "set_aggregate_mask() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_aggregate_mask() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_names, key ) )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "set_aggregate_mask() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_aggregate_mask() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_aggregate_mask() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_aggregate_mask() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_names != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_aggregate_mask() got multiple values for keyword argument 'names'" );
             goto error_exit;
         }

        _python_par_names = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_names );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_names );

    return NULL;
}

static PyObject *dparse_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_names( _python_str_plain_names, _python_par_names );

    // Actual function code.
    static PyFrameObject *frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_5d004c095ed73bd5e137ac7e6e73330b, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1768 );
        if ( ( _python_var_names.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1769 );
            SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_extra_select_mask );
        }
        else
        {
            frame_guard.setLineNumber( 1771 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), _python_var_names.asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_extra_select_mask );
            }
        }
        frame_guard.setLineNumber( 1772 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__extra_select_cache );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_names.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_names = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_extra_mask() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_extra_mask() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_names == key )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "set_extra_mask() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_extra_mask() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_names, key ) )
            {
                if (unlikely( _python_par_names ))
                {
                    PyErr_Format( PyExc_TypeError, "set_extra_mask() got multiple values for keyword argument 'names'" );
                    goto error_exit;
                }

                _python_par_names = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_extra_mask() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_extra_mask() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_extra_mask() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_extra_mask() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_extra_mask() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "set_extra_mask() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_extra_mask() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "set_extra_mask() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_extra_mask() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_extra_mask() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_extra_mask() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "set_extra_mask() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_extra_mask() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_extra_mask() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_names != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_extra_mask() got multiple values for keyword argument 'names'" );
             goto error_exit;
         }

        _python_par_names = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_names );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_names );

    return NULL;
}

static PyObject *dparse_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_k( _python_str_plain_k );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    static PyFrameObject *frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_37a293f5e49793545d3a1a5e4687f96b, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1780 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__aggregate_select_cache ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1781 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__aggregate_select_cache );
        }
        else
        {
            frame_guard.setLineNumber( 1782 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_select_mask ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 1783 );
                {
                    PyObjectTempKeeper0 call1;
                    {
                        PyObjectTemporary tmp_identifier( ( call1.assign( _mvar_django__db__models__sql__query_SortedDict.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ), _python_var_k, _python_var_self, _python_var_v ) ).asObject() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__aggregate_select_cache );
                }
                }
                frame_guard.setLineNumber( 1787 );
                return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__aggregate_select_cache );
            }
            else
            {
                frame_guard.setLineNumber( 1789 );
                return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregates );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_k.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_aggregate_select() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_aggregate_select() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_aggregate_select() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_aggregate_select() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_aggregate_select() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_aggregate_select() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_aggregate_select() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_aggregate_select() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_aggregate_select() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_aggregate_select() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_aggregate_select() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_aggregate_select() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_aggregate_select() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_aggregate_select() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_aggregate_select() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_aggregate_select() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_aggregate_select() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_k,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalVariable &python_closure_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1784 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1784 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 1784 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_k.assign0( _python_tmp_element_1.asObject() );
                    python_closure_v.assign0( _python_tmp_element_2.asObject() );
                }
                {
                    PyObjectTempKeeper0 cmp3;
                    if ( ( cmp3.assign( python_closure_k.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_aggregate_select_mask ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1784 );
                    {
                        PyObjectTempKeeper0 make_tuple1;
                        APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple1.assign( python_closure_k.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), python_closure_v.asObject() ) ) ).asObject() ), Py_None;
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_k( _python_str_plain_k );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    static PyFrameObject *frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_bbc59af11d0953160b642a0df973a000, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1793 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__extra_select_cache ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1794 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__extra_select_cache );
        }
        else
        {
            frame_guard.setLineNumber( 1795 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_select_mask ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 1796 );
                {
                    PyObjectTempKeeper0 call1;
                    {
                        PyObjectTemporary tmp_identifier( ( call1.assign( _mvar_django__db__models__sql__query_SortedDict.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ), _python_var_k, _python_var_self, _python_var_v ) ).asObject() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__extra_select_cache );
                }
                }
                frame_guard.setLineNumber( 1800 );
                return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__extra_select_cache );
            }
            else
            {
                frame_guard.setLineNumber( 1802 );
                return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_k.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_extra_select() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_extra_select() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_extra_select() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_extra_select() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_extra_select() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_extra_select() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_extra_select() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_extra_select() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_extra_select() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_extra_select() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_extra_select() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_extra_select() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_extra_select() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_extra_select() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_extra_select() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_extra_select() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_extra_select() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_k,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalVariable &python_closure_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1797 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1797 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 1797 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_k.assign0( _python_tmp_element_1.asObject() );
                    python_closure_v.assign0( _python_tmp_element_2.asObject() );
                }
                {
                    PyObjectTempKeeper0 cmp3;
                    if ( ( cmp3.assign( python_closure_k.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_extra_select_mask ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1797 );
                    {
                        PyObjectTempKeeper0 make_tuple1;
                        APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple1.assign( python_closure_k.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), python_closure_v.asObject() ) ) ).asObject() ), Py_None;
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_names_with_path )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_names_with_path( _python_str_plain_names_with_path, _python_par_names_with_path );
    PyObjectLocalVariable _python_var_all_paths( _python_str_plain_all_paths );
    PyObjectLocalVariable _python_var__( _python_str_plain__ );
    PyObjectLocalVariable _python_var_paths( _python_str_plain_paths );
    PyObjectLocalVariable _python_var_contains_louter( _python_str_plain_contains_louter );
    PyObjectLocalVariable _python_var_pos( _python_str_plain_pos );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_join_field( _python_str_plain_join_field );
    PyObjectLocalVariable _python_var_trimmed_prefix( _python_str_plain_trimmed_prefix );
    PyObjectLocalVariable _python_var_paths_in_prefix( _python_str_plain_paths_in_prefix );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_select_fields( _python_str_plain_select_fields );
    PyObjectLocalVariable _python_var_select_alias( _python_str_plain_select_alias );
    PyObjectLocalVariable _python_var_extra_restriction( _python_str_plain_extra_restriction );
    PyObjectLocalVariable _python_var_r( _python_str_plain_r );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    _python_var_all_paths.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_f8427f187db50841c748b71aa6ecf6bc, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1819 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_names_with_path.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1819 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 1819 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var__.assign0( _python_tmp_element_1.asObject() );
                        _python_var_paths.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1820 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_all_paths.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_paths.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        _python_var_contains_louter.assign0( Py_False );
        {
            frame_guard.setLineNumber( 1822 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_all_paths.asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1822 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 1822 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_pos.assign0( _python_tmp_element_1.asObject() );
                        _python_var_path.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1823 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_path.asObject(), _python_str_plain_m2m ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 1824 );
                    break;
                }
                frame_guard.setLineNumber( 1825 );
                {
                    PyObjectTempKeeper1 cmp7;
                    PyObjectTempKeeper1 subscr3;
                    PyObjectTempKeeper1 subscr5;
                    if ( ( cmp7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), PyObjectTemporary( ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_pos.asObject(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) ) ).asObject(), _python_str_plain_join_type ) ), RICH_COMPARE_BOOL_EQ( cmp7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject() ) ) )
                {
                    _python_var_contains_louter.assign0( Py_True );
                }
                }
                frame_guard.setLineNumber( 1827 );
                {
                    PyObjectTempKeeper1 call11;
                    PyObjectTempKeeper1 subscr9;
                    DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unref_alias ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( ( subscr9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_var_pos.asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1829 );
        _python_var_join_field.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_path.asObject(), _python_str_plain_join_field ) ).asObject(), _python_str_plain_field ) );
        _python_var_trimmed_prefix.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 1832 );
        _python_var_paths_in_prefix.assign0( _python_var_pos.asObject() );
        {
            frame_guard.setLineNumber( 1833 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_names_with_path.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1833 );
                    PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_3 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                    {
                        frame_guard.setLineNumber( 1833 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_name.assign0( _python_tmp_element_1.asObject() );
                        _python_var_path.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1834 );
                {
                    PyObjectTempKeeper0 op13;
                    if ( RICH_COMPARE_BOOL_LT( PyObjectTemporary( ( op13.assign( _python_var_paths_in_prefix.asObject() ), BINARY_OPERATION_SUB( op13.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_path.asObject() ) ).asObject() ) ) ).asObject(), _python_int_0 ) )
                {
                    frame_guard.setLineNumber( 1835 );
                    break;
                }
                }
                frame_guard.setLineNumber( 1836 );
                {
                    PyObjectTempKeeper1 call15;
                    DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_trimmed_prefix.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_name.asObject() ) ) );
                }
                {
                    frame_guard.setLineNumber( 1837 );
                    PyObject *_python_tmp_inplace_start = _python_var_paths_in_prefix.asObject();
                    PyObject *_tmp_python_tmp_inplace_end;
                    {
                        PyObjectTempKeeper0 op17;
                        _tmp_python_tmp_inplace_end = ( op17.assign( _python_tmp_inplace_start ), BINARY_OPERATION( PyNumber_InPlaceSubtract, op17.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_path.asObject() ) ).asObject() ) );
                    }
                    PyObjectTemporary _python_tmp_inplace_end( _tmp_python_tmp_inplace_end );
                    if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                    {
                        _python_var_paths_in_prefix.assign0( _python_tmp_inplace_end.asObject() );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1838 );
        {
            PyObjectTempKeeper1 call19;
            DECREASE_REFCOUNT( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_trimmed_prefix.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join_field.asObject(), _python_str_plain_foreign_related_fields ) ).asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1840 );
        {
            PyObjectTempKeeper1 call21;
            _python_var_trimmed_prefix.assign1( ( call21.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__sql__query_LOOKUP_SEP.asObject0(), _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_var_trimmed_prefix.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1844 );
        {
            PyObjectTempKeeper1 cmp44;
            PyObjectTempKeeper1 subscr40;
            PyObjectTempKeeper1 subscr42;
            if ( ( cmp44.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr42.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_alias_map ) ), LOOKUP_SUBSCRIPT( subscr42.asObject0(), PyObjectTemporary( ( subscr40.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ), LOOKUP_SUBSCRIPT( subscr40.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_pos.asObject(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) ) ).asObject(), _python_str_plain_join_type ) ), RICH_COMPARE_BOOL_NE( cmp44.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_LOUTER ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1845 );
            _python_var_select_fields.assign1( impl_listcontr_1_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join_field.asObject(), _python_str_plain_related_fields ) ).asObject() ), _python_var_r ) );
            frame_guard.setLineNumber( 1846 );
            {
                PyObjectTempKeeper1 subscr23;
                _python_var_select_alias.assign1( ( subscr23.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ), LOOKUP_SUBSCRIPT( subscr23.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_pos.asObject(), _python_int_pos_1 ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 1847 );
            {
                PyObjectTempKeeper1 call27;
                PyObjectTempKeeper1 subscr25;
                DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unref_alias ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), PyObjectTemporary( ( subscr25.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ), LOOKUP_SUBSCRIPT( subscr25.asObject0(), _python_var_pos.asObject() ) ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 1848 );
            {
                PyObjectTempKeeper1 call31;
                PyObjectTempKeeper1 call32;
                PyObjectTempKeeper1 subscr29;
                _python_var_extra_restriction.assign1( ( call31.assign( LOOKUP_ATTRIBUTE( _python_var_join_field.asObject(), _python_str_plain_get_extra_restriction ) ), call32.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where_class ) ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), call32.asObject0(), Py_None, PyObjectTemporary( ( subscr29.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ), LOOKUP_SUBSCRIPT( subscr29.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_pos.asObject(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 1850 );
            if ( CHECK_IF_TRUE( _python_var_extra_restriction.asObject() ) )
            {
                frame_guard.setLineNumber( 1851 );
                {
                    PyObjectTempKeeper1 call35;
                    PyObjectTempKeeper0 call36;
                    DECREASE_REFCOUNT( ( call35.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_where ) ).asObject(), _python_str_plain_add ) ), call36.assign( _python_var_extra_restriction.asObject() ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), call36.asObject0(), _mvar_django__db__models__sql__query_AND.asObject0() ) ) );
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 1856 );
            _python_var_select_fields.assign1( impl_listcontr_2_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_join_field.asObject(), _python_str_plain_related_fields ) ).asObject() ), _python_var_r ) );
            frame_guard.setLineNumber( 1857 );
            {
                PyObjectTempKeeper1 subscr38;
                _python_var_select_alias.assign1( ( subscr38.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tables ) ), LOOKUP_SUBSCRIPT( subscr38.asObject0(), _python_var_pos.asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 1858 );
        {
                PyObjectTemporary tmp_identifier( impl_listcontr_3_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( MAKE_ITERATOR( _python_var_select_fields.asObject() ), _python_var_f, _python_var_select_alias ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_select );
        }
        frame_guard.setLineNumber( 1859 );
        {
            PyObjectTempKeeper0 make_tuple46;
            return ( make_tuple46.assign( _python_var_trimmed_prefix.asObject() ), MAKE_TUPLE2( make_tuple46.asObject0(), _python_var_contains_louter.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_names_with_path.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_r.updateLocalsDict( _python_var_extra_restriction.updateLocalsDict( _python_var_select_alias.updateLocalsDict( _python_var_select_fields.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_paths_in_prefix.updateLocalsDict( _python_var_trimmed_prefix.updateLocalsDict( _python_var_join_field.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_pos.updateLocalsDict( _python_var_contains_louter.updateLocalsDict( _python_var_paths.updateLocalsDict( _python_var__.updateLocalsDict( _python_var_all_paths.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_names_with_path = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "trim_start() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_start() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_names_with_path == key )
            {
                if (unlikely( _python_par_names_with_path ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_start() got multiple values for keyword argument 'names_with_path'" );
                    goto error_exit;
                }

                _python_par_names_with_path = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_start() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_names_with_path, key ) )
            {
                if (unlikely( _python_par_names_with_path ))
                {
                    PyErr_Format( PyExc_TypeError, "trim_start() got multiple values for keyword argument 'names_with_path'" );
                    goto error_exit;
                }

                _python_par_names_with_path = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "trim_start() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "trim_start() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "trim_start() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "trim_start() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "trim_start() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "trim_start() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "trim_start() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "trim_start() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "trim_start() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "trim_start() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "trim_start() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "trim_start() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "trim_start() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "trim_start() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_names_with_path != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "trim_start() got multiple values for keyword argument 'names_with_path'" );
             goto error_exit;
         }

        _python_par_names_with_path = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_names_with_path );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_names_with_path );

    return NULL;
}

static PyObject *dparse_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_r )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1845 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1845 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_r.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( python_closure_r.asObject(), _python_int_0, 0 ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_r )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1856 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1856 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_r.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( python_closure_r.asObject(), _python_int_pos_1, 1 ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f,PyObjectLocalVariable &python_closure_select_alias )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1858 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1858 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call3;
                    PyObjectTempKeeper1 call4;
                    PyObjectTempKeeper0 make_tuple1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call3.assign( _mvar_django__db__models__sql__query_SelectInfo.asObject0() ), call4.assign( ( make_tuple1.assign( python_closure_select_alias.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_column ) ).asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), python_closure_f.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );

    // Actual function code.
    static PyFrameObject *frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query );
        }

        frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_dffb231e79dd4b2bcc29977c061ed87f, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1874 );
        {
            PyObjectTempKeeper0 subscr1;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__sql__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _mvar_django__db__models__sql__query_DEFAULT_DB_ALIAS.asObject0() ) ) ).asObject(), _python_str_plain_features ) ).asObject(), _python_str_plain_interprets_empty_strings_as_nulls ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_empty_strings_allowed ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_True );
        }
        else
        {
            frame_guard.setLineNumber( 1878 );
            return LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_null );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query );
           frame_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_nullable() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_nullable() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "is_nullable() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_nullable() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "is_nullable() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_nullable() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_nullable() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_nullable() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_nullable() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_nullable() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "is_nullable() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_nullable() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "is_nullable() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_nullable() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_nullable() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_nullable() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "is_nullable() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_nullable() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_nullable() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_nullable() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query( self, _python_par_self, _python_par_field );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field );

    return NULL;
}

static PyObject *dparse_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_order_dir_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_field, PyObject *_python_par_default )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_default( _python_str_plain_default, _python_par_default );
    PyObjectLocalVariable _python_var_dirn( _python_str_plain_dirn );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_order_dir_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_3_get_order_dir_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_3_get_order_dir_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_order_dir_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_3_get_order_dir_of_module_django__db__models__sql__query );
        }

        frame_function_3_get_order_dir_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_0adcc0b7be4afd01589cf60deb8c08a1, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_3_get_order_dir_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_order_dir_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1888 );
        {
            PyObjectTempKeeper0 subscr1;
            _python_var_dirn.assign1( ( subscr1.assign( _mvar_django__db__models__sql__query_ORDER_DIR.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_default.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1889 );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_field.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_chr_45 ) )
        {
            frame_guard.setLineNumber( 1890 );
            {
                PyObjectTempKeeper1 make_tuple3;
                return ( make_tuple3.assign( LOOKUP_INDEX_SLICE( _python_var_field.asObject(), 1, PY_SSIZE_T_MAX ) ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_dirn.asObject(), _python_int_pos_1, 1 ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 1891 );
        {
            PyObjectTempKeeper0 make_tuple5;
            return ( make_tuple5.assign( _python_var_field.asObject() ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_dirn.asObject(), _python_int_0, 0 ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_default.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_dirn.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_order_dir_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_3_get_order_dir_of_module_django__db__models__sql__query );
           frame_function_3_get_order_dir_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_order_dir_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_default = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_order_dir() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "get_order_dir() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_default == key )
            {
                if (unlikely( _python_par_default ))
                {
                    PyErr_Format( PyExc_TypeError, "get_order_dir() got multiple values for keyword argument 'default'" );
                    goto error_exit;
                }

                _python_par_default = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "get_order_dir() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_default, key ) )
            {
                if (unlikely( _python_par_default ))
                {
                    PyErr_Format( PyExc_TypeError, "get_order_dir() got multiple values for keyword argument 'default'" );
                    goto error_exit;
                }

                _python_par_default = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_order_dir() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_order_dir() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_order_dir() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_order_dir() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_order_dir() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_order_dir() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_order_dir() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_order_dir() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_order_dir() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_order_dir() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_order_dir() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_order_dir() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_order_dir() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_order_dir() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_default != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_order_dir() got multiple values for keyword argument 'default'" );
             goto error_exit;
         }

        _python_par_default = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_default == NULL )
    {
        _python_par_default = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_default );
    }


    return impl_function_3_get_order_dir_of_module_django__db__models__sql__query( self, _python_par_field, _python_par_default );

error_exit:;

    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_default );

    return NULL;
}

static PyObject *dparse_function_3_get_order_dir_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_get_order_dir_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_order_dir_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_add_to_dict_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_data, PyObject *_python_par_key, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_key( _python_str_plain_key, _python_par_key );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_add_to_dict_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_4_add_to_dict_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_4_add_to_dict_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_add_to_dict_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_4_add_to_dict_of_module_django__db__models__sql__query );
        }

        frame_function_4_add_to_dict_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_a572b12c60bb5d64b1fec0ea9aafde10, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_4_add_to_dict_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_4_add_to_dict_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1899 );
        {
            PyObjectTempKeeper0 cmp5;
            if ( ( cmp5.assign( _python_var_key.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), _python_var_data.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1900 );
            {
                PyObjectTempKeeper1 call3;
                PyObjectTempKeeper0 subscr1;
                DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _python_var_data.asObject() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_key.asObject() ) ) ).asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1902 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( MAKE_LIST1( _python_var_value.asObject1() ) ).asObject() ) );
                    PyObject *tmp_subscribed = _python_var_data.asObject();
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_var_key.asObject() );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_key.updateLocalsDict( _python_var_data.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_add_to_dict_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_4_add_to_dict_of_module_django__db__models__sql__query );
           frame_function_4_add_to_dict_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_add_to_dict_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_key = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_to_dict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_key == key )
            {
                if (unlikely( _python_par_key ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'key'" );
                    goto error_exit;
                }

                _python_par_key = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_key, key ) )
            {
                if (unlikely( _python_par_key ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'key'" );
                    goto error_exit;
                }

                _python_par_key = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_to_dict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_to_dict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_to_dict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_to_dict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_to_dict() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "add_to_dict() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_to_dict() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "add_to_dict() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_to_dict() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_to_dict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_to_dict() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_to_dict() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_key != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'key'" );
             goto error_exit;
         }

        _python_par_key = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_to_dict() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_add_to_dict_of_module_django__db__models__sql__query( self, _python_par_data, _python_par_key, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_key );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4_add_to_dict_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_add_to_dict_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_add_to_dict_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_is_reverse_o2o_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );

    // Actual function code.
    static PyFrameObject *frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_is_reverse_o2o_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query );
        }

        frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_07de32c02b07324ea35ff74993ed07b2, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1909 );
        {
            PyObjectTempKeeper0 keeper_0;
            return ( CHECK_IF_TRUE( keeper_0.assign( UNARY_OPERATION( UNARY_NOT, BOOL_FROM( HAS_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ) ) ) ) ? LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_unique ) : INCREASE_REFCOUNT( keeper_0.asObject0() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query );
           frame_function_5_is_reverse_o2o_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_is_reverse_o2o_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_field = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_reverse_o2o() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "is_reverse_o2o() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "is_reverse_o2o() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_reverse_o2o() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_reverse_o2o() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_reverse_o2o() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_is_reverse_o2o_of_module_django__db__models__sql__query( self, _python_par_field );

error_exit:;

    Py_XDECREF( _python_par_field );

    return NULL;
}

static PyObject *dparse_function_5_is_reverse_o2o_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_is_reverse_o2o_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_is_reverse_o2o_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_alias_diff_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject *_python_par_refcounts_before, PyObject *_python_par_refcounts_after )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_refcounts_before( _python_str_plain_refcounts_before, _python_par_refcounts_before );
    PyObjectSharedLocalVariable _python_var_refcounts_after( _python_str_plain_refcounts_after, _python_par_refcounts_after );

    // Actual function code.
    static PyFrameObject *frame_function_6_alias_diff_of_module_django__db__models__sql__query = NULL;

    if ( isFrameUnusable( frame_function_6_alias_diff_of_module_django__db__models__sql__query ) )
    {
        if ( frame_function_6_alias_diff_of_module_django__db__models__sql__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_alias_diff_of_module_django__db__models__sql__query" );
#endif
            Py_DECREF( frame_function_6_alias_diff_of_module_django__db__models__sql__query );
        }

        frame_function_6_alias_diff_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_5e3ba648b1caaf340c62162473317fbc, _module_django__db__models__sql__query );
    }

    FrameGuard frame_guard( frame_function_6_alias_diff_of_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_function_6_alias_diff_of_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1916 );
        return CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query( MAKE_ITERATOR( _python_var_refcounts_after.asObject() ), _python_var_refcounts_after, _python_var_refcounts_before ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_refcounts_after.updateLocalsDict( _python_var_refcounts_before.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_alias_diff_of_module_django__db__models__sql__query )
        {
           Py_DECREF( frame_function_6_alias_diff_of_module_django__db__models__sql__query );
           frame_function_6_alias_diff_of_module_django__db__models__sql__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_alias_diff_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_refcounts_before = NULL;
    PyObject *_python_par_refcounts_after = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "alias_diff() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_refcounts_before == key )
            {
                if (unlikely( _python_par_refcounts_before ))
                {
                    PyErr_Format( PyExc_TypeError, "alias_diff() got multiple values for keyword argument 'refcounts_before'" );
                    goto error_exit;
                }

                _python_par_refcounts_before = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_refcounts_after == key )
            {
                if (unlikely( _python_par_refcounts_after ))
                {
                    PyErr_Format( PyExc_TypeError, "alias_diff() got multiple values for keyword argument 'refcounts_after'" );
                    goto error_exit;
                }

                _python_par_refcounts_after = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_refcounts_before, key ) )
            {
                if (unlikely( _python_par_refcounts_before ))
                {
                    PyErr_Format( PyExc_TypeError, "alias_diff() got multiple values for keyword argument 'refcounts_before'" );
                    goto error_exit;
                }

                _python_par_refcounts_before = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_refcounts_after, key ) )
            {
                if (unlikely( _python_par_refcounts_after ))
                {
                    PyErr_Format( PyExc_TypeError, "alias_diff() got multiple values for keyword argument 'refcounts_after'" );
                    goto error_exit;
                }

                _python_par_refcounts_after = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "alias_diff() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "alias_diff() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "alias_diff() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "alias_diff() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "alias_diff() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "alias_diff() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "alias_diff() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "alias_diff() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "alias_diff() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "alias_diff() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "alias_diff() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "alias_diff() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "alias_diff() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_refcounts_before != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "alias_diff() got multiple values for keyword argument 'refcounts_before'" );
             goto error_exit;
         }

        _python_par_refcounts_before = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_refcounts_after != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "alias_diff() got multiple values for keyword argument 'refcounts_after'" );
             goto error_exit;
         }

        _python_par_refcounts_after = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_alias_diff_of_module_django__db__models__sql__query( self, _python_par_refcounts_before, _python_par_refcounts_after );

error_exit:;

    Py_XDECREF( _python_par_refcounts_before );
    Py_XDECREF( _python_par_refcounts_after );

    return NULL;
}

static PyObject *dparse_function_6_alias_diff_of_module_django__db__models__sql__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_alias_diff_of_module_django__db__models__sql__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_alias_diff_of_module_django__db__models__sql__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_refcounts_after;
    PyObjectClosureVariable python_closure_refcounts_before;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_t;
};

static void _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_t *_python_context = (struct _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_t *_python_context = (_context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_t.setVariableName( _python_str_plain_t );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query ) )
        {
            if ( frame_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query );
            }

            frame_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_5bd5de88082366f65aa615aeee73bddd, _module_django__db__models__sql__query );
        }

        Py_INCREF( frame_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query );
        generator->m_frame = frame_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 1916 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 1916 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_t.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper1 call3;
                            PyObjectTempKeeper1 cmp6;
                            PyObjectTempKeeper0 subscr1;
                            if ( ( cmp6.assign( ( subscr1.assign( _python_context->python_closure_refcounts_after.asObject() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_context->python_var_t.asObject() ) ) ), RICH_COMPARE_BOOL_GT( cmp6.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_refcounts_before.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_context->python_var_t.asObject(), _python_int_0 ) ) ).asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 1916 );
                            YIELD_VALUE( generator, _python_context->python_var_t.asObject1() );
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_refcounts_after, PyObjectSharedLocalVariable &python_closure_refcounts_before )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_t *_python_context = new _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_t;
    _python_context->python_closure_refcounts_after.shareWith( python_closure_refcounts_after );
    _python_context->python_closure_refcounts_before.shareWith( python_closure_refcounts_before );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_context,
            _python_str_angle_genexpr,
            _codeobj_6c3a7b570c0d8aa565ef05ae917b3db4,
            _python_context,
            _context_generator_genexpr_1_of_function_6_alias_diff_of_module_django__db__models__sql__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}



static PyObject *MAKE_FUNCTION_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_10_resolve_aggregate_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_resolve_aggregate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_40c721dccc11dbd2cfcdf3797bb5aeef,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_630035be185ad1598989b8bb0c9100f5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_11_get_aggregation_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_get_aggregation,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b4b11291f47abd455dd5763a3722386e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_23dad64ffaad0d9cc17fa144b0c4c069
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_12_get_count_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_get_count,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_eb35799297297558d251a1199ace9607,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_6652a49a847ffca6d68026b8868d02dc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_13_has_results_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_has_results,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1acb2e34295feff7d6f42c4a9f409cd9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_14_combine_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_combine,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4c5bdc54c829bdb87a27cdcaffc349c4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_a707d429519b916db9dcc930bfcf39e7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_15_deferred_to_data_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_deferred_to_data,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_11c2118da5c6f1789e2653a1bd35a2ed,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_04548c566468d67b24b282ee14304eb5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_16_deferred_to_columns_cb_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_deferred_to_columns_cb,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8554a25ea296ccaaeeefaf361ca0337d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_7e87f10889c71406ae927dc216891acb
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_17_table_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_table_alias,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3e9ab172228c2ece1fb6e08e0add4538,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_8d19daaac1b1fe93e942f9422ad1fe5f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_18_ref_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_ref_alias,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_08d909c18eceb91136c053daea302fe7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_b700a58213c02bf428a00b34d5720278
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_19_unref_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_unref_alias,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3635c18d6581dbcdbb3a620d2b4c9e7b,
        INCREASE_REFCOUNT( _python_tuple_int_pos_1_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_5c8f2c572a44bb8b966e6e204a26b5c6
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query,
        dparse_function_1___init___of_class_1_RawQuery_of_module_django__db__models__sql__query,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a4556ca9672016e1825261fc109afaf1,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_1___init___of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d88f25302e97bccd73d2cac836b7dd39,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query( PyObjectSharedLocalVariable &python_closure_change_map )
{
    struct _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t *_python_context = new _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_change_map.shareWith( python_closure_change_map );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_relabel_column,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5d27e52ad6f9e2f0ca53090dcceaff60,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None,
        _python_context,
        _context_function_1_relabel_column_of_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_20_promote_joins_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_promote_joins,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e09f1f4247862596b7690fc93a3b119b,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_38ca771a8eef20b39173647c84a980d0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_21_reset_refcounts_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_reset_refcounts,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7af494f9d4052e5b42efb2bb9a048835,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_7be3d0de1c98cf132c801ff24eb3ab39
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_22_promote_disjunction_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_promote_disjunction,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_627027f7e380afe088e491ed6733c398,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_cd5da2ec4e493600b27fa90e900902d0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_23_change_aliases_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_change_aliases,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8da0ab4975fcbb205c7058c3b14244eb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_30fcc7240fb6ba9a48ebe30ce2bf36ea
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_24_bump_prefix_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_bump_prefix,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8bd54f469e923695605371c4b8858a7e,
        INCREASE_REFCOUNT( _python_tuple_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_86111ca9854af34eaa29aa672ff252d3
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_25_get_initial_alias_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_get_initial_alias,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_da05fd414b4cb7b7390ce072a58189b5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_c7f3c202ffdfba30bca3b649b27c0373
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_26_count_active_tables_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_count_active_tables,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_51eaf0ff9fd3488b817d4e4750019a69,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_6443f8f33c479d823e6a00eb2ea7d940
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_27_join_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_join,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ec7887d2b44b60c41607d5f7f53fc643,
        INCREASE_REFCOUNT( _python_tuple_none_false_false_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_e4e6f09a88cecccab3d6349b041c5344
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_28_setup_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_setup_inherited_models,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1dcdf89a1d3f29a83f572aa5bd134aac,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_93612f357e3159e2fbf0973ce8770886
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_29_join_parent_model_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_join_parent_model,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5c835998168ebeaab246f8fef7d54d4a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_cae4bb4f77ac56d5ff6f1ebe4e7f74f8
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_2___str___of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_03cd9a39bcb1c9fac506e997468c55b0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_fc0f9fffccc77de926a188fe0f48f748
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        dparse_function_2_clone_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        _python_str_plain_clone,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d834c2e174fd87b95e4051eb317cb413,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_30_remove_inherited_models_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_remove_inherited_models,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4522f3f083878b99fc43dedc997015b4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_fb3b0779d0b49b92ec6da3fb91665ac2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_31_add_aggregate_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_aggregate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_824b2ee50b3f9c2d6df83b1149697576,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_644df7920642a71cc45fb2e3b27414e4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_32_build_filter_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_build_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_39eb69a68cfde31c2b6ba647717abd82,
        INCREASE_REFCOUNT( _python_tuple_false_false_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_4e2134ded1460dfb1021d915357ae4be
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_33_add_filter_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_24a11d89eb60a4443963e834e2db07fe,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_34_need_having_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_need_having,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_78ef4833f3ba2ced2c63041638c84f0d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_1ef7beb819047dc2c472a0efef66e954
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_35_split_having_parts_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_split_having_parts,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bb661dda0ff2bbfacb611b619bb28465,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_bf3f8415afeae9a5eee936644bf90c42
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_36_add_q_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_q,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_72d9ebf87142d226fdb198090ccca394,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_9efdeda6bb5c6e8ebcd5a5c35740634f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_37__add_q_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain__add_q,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f13645a90834622c9e519a1b48c272be,
        INCREASE_REFCOUNT( _python_tuple_false_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_e7d03d3b84606fe9ada0ce7307f543d8
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_38_names_to_path_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_names_to_path,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ab7f11c34c7e11220fac43f3c833a1b0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_48a08f7af452916f90e5ef1e60416404
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_39_setup_joins_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_setup_joins,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8115b386c9f491274b776817debbee76,
        INCREASE_REFCOUNT( _python_tuple_none_true_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_b1441eb01a4d8b0590611618e066f127
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        dparse_function_3_convert_values_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        _python_str_plain_convert_values,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8bd5199875e87ce4f221ab8b487502fd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_c0b5a94a728c5b3f545733985add00aa
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_order_dir_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_order_dir_of_module_django__db__models__sql__query,
        dparse_function_3_get_order_dir_of_module_django__db__models__sql__query,
        _python_str_plain_get_order_dir,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0adcc0b7be4afd01589cf60deb8c08a1,
        INCREASE_REFCOUNT( _python_tuple_str_plain_ASC_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_6b6629b305053a3f13e3ea21fc95cf0e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_3_sql_with_params_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_sql_with_params,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2d18ff1176b8f71d98800f710d66778d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_2ec43bdb73d3ff4b4103bfb149896ae0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_40_trim_joins_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_trim_joins,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6093e8569baa85d24d80e0f3ec33330b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_deb80b2c321224e67092c8d3e6e57118
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_41_split_exclude_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_split_exclude,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_29ec6d9403580e32401fcded9e7bbf9b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_aaba7493d31d88ff8b7f38228111ab9b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_42_set_empty_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_set_empty,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c4fff982eaaa2da009821ad3b264d06f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_43_is_empty_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_is_empty,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_528fc1a8e719c2f9da2fbd28744feab2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_44_set_limits_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_set_limits,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_31a86a6778cb8a3f228aeedf50dab8e3,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_dda4253cbc14e6328abc3e8a838dbf41
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_45_clear_limits_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_clear_limits,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3dcfea690b30143937aaf88708aa153f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_fb84210738b2706f6d1dff5b57f83ad7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_46_can_filter_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_can_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_92e90dbdf0d6d4c41d2423aae8f6cc1e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_6f96a8d97488ac2ccc0ef262e8289bc0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_47_clear_select_clause_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_clear_select_clause,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0f77738ca2c5da6f417437c60b471e86,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_6dd063565ce92a5a2da25abc90733875
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_48_clear_select_fields_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_clear_select_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_236530e2b5a02e3bc980513db2476d52,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_f2454d2d9bf6dd431b1d017888f3b512
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_49_add_distinct_fields_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_distinct_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5ebab33f73412837b51d7873e34bf178,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_1e8b9ae8f046b3eb1110eba0b0c7c296
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_4___deepcopy___of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8061374deafb918594c87082ec2bccc0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_add_to_dict_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_add_to_dict_of_module_django__db__models__sql__query,
        dparse_function_4_add_to_dict_of_module_django__db__models__sql__query,
        _python_str_plain_add_to_dict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a572b12c60bb5d64b1fec0ea9aafde10,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_f99196e7f2f2ae87778738c8d9e29cfe
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        dparse_function_4_get_columns_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        _python_str_plain_get_columns,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b032620346f81de22488d3bc19377735,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_50_add_fields_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_77ce747c9dc95932d68741c85b061e4c,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_eb646e61b7fea16df478bd387ecaa52b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_51_add_ordering_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_ordering,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_92f9301d08871530aa6c576a86e04783,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_4b2e03d00d737d0c39df3b065cdd3501
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_52_clear_ordering_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_clear_ordering,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f8831e733f5f0856fe1c9c6a7a3b07ca,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_21dca39ef7e540d42a09166a1040bd0a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_53_set_group_by_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_set_group_by,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b46486902c5bf000975b0f437a430ee7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_6a4c512a9ed9e9563f8e5b1c68b3f38e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_54_add_count_column_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_count_column,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_92a718213a9509b9e4f7978f1b28e74d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_5265b5fab031418b157fa2f6075147cc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_55_add_select_related_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_select_related,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_965faa2807ed092b217fc25f79278b51,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_77e3cc40330843de018dd8d6ea706c1b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_56_add_extra_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_extra,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3945e630e098afb4f501c310a1029449,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_cb4140c4e606580073e975330b99c314
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_57_clear_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_clear_deferred_loading,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_229c740e74dcead3c3df868eafaccabb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_4b88db1210743b626bb6cfbe82b08093
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_58_add_deferred_loading_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_deferred_loading,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bb83d29ba0e116c4028cf79601581124,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_5ec1c0a5ed4a76b64da552073bc4f57e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_59_add_immediate_loading_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_add_immediate_loading,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ab9db79f343196665f261cfd6ce50dd9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_60c485fe38b75816c3e026971201433c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query,
        dparse_function_5___iter___of_class_1_RawQuery_of_module_django__db__models__sql__query,
        _python_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5bb31d88deb10623c4666f8452b30d73,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_is_reverse_o2o_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_is_reverse_o2o_of_module_django__db__models__sql__query,
        dparse_function_5_is_reverse_o2o_of_module_django__db__models__sql__query,
        _python_str_plain_is_reverse_o2o,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_07de32c02b07324ea35ff74993ed07b2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_25545c9b0a54c158af15f3f4a3f15bbe
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_5_prepare_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_prepare,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_20cc1afafe4e335f4b8017e97c336d50,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_60_get_loaded_field_names_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_get_loaded_field_names,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_55e56e1a62bd211cc36c3ceefa474aad,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_18c36b842c7c83b0a73ea515ad16236e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_61_get_loaded_field_names_cb_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_get_loaded_field_names_cb,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ad44a9ed7834bf0a61774fb9b6e0f45f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_8df876fed5de2fa0f98b82d2c1fb2343
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_62_set_aggregate_mask_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_set_aggregate_mask,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_34c5a28fa677fecd034af00c73b83375,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_e892889fca180ded30b11334952c69dd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_63_set_extra_mask_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_set_extra_mask,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5d004c095ed73bd5e137ac7e6e73330b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_ac66857d04c6631c81d4bb198aa9f9de
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_64__aggregate_select_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain__aggregate_select,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_37a293f5e49793545d3a1a5e4687f96b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_5d96e4c5cc028fd03ee3fb6c93cac72d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_65__extra_select_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain__extra_select,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bbc59af11d0953160b642a0df973a000,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_66_trim_start_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_trim_start,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f8427f187db50841c748b71aa6ecf6bc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_8fcfd41cf1e33f2a803af6a7843570bf
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_67_is_nullable_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_is_nullable,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_dffb231e79dd4b2bcc29977c061ed87f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_3fc74da5c3c46b4b94109f95b52dc3d6
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query,
        dparse_function_6___repr___of_class_1_RawQuery_of_module_django__db__models__sql__query,
        _python_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d891e09ba3249b00cf3011c44ef2acc2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_alias_diff_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_alias_diff_of_module_django__db__models__sql__query,
        dparse_function_6_alias_diff_of_module_django__db__models__sql__query,
        _python_str_plain_alias_diff,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5e3ba648b1caaf340c62162473317fbc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_31879208583677cdceb8c1932739dce2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_6_get_compiler_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_get_compiler,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_84f65ded3593f0887b850d6612c23300,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        dparse_function_7__execute_query_of_class_1_RawQuery_of_module_django__db__models__sql__query,
        _python_str_plain__execute_query,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c9115367106c9e3a7267efad7b43fee8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_7_get_meta_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_get_meta,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3f809ad93c8353df91274a1aa2e83bf4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_d69b06ccac6e8cdea94d364e4a45f342
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_8_clone_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_clone,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7e9067c7685939c6861d20d5e6b6a144,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_d4a6b7e135248811a8af3462f9342c5d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query,
        dparse_function_9_convert_values_of_class_2_Query_of_module_django__db__models__sql__query,
        _python_str_plain_convert_values,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3e721f9503b96daff79393c87295a36c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__sql__query,
        _python_str_digest_c0b5a94a728c5b3f545733985add00aa
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.db.models.sql.query",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__db__models__sql__query )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__db__models__sql__query );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__db__models__sql__query" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__db__models__sql__query = Py_InitModule4(
        "django.db.models.sql.query",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__db__models__sql__query = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__db__models__sql__query = (PyDictObject *)((PyModuleObject *)_module_django__db__models__sql__query)->md_dict;

    assertObject( _module_django__db__models__sql__query );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_a53fec1f1e64e7ba44a6d713228cf5be, _module_django__db__models__sql__query );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__db__models__sql__query );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__db__models__sql__query != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain___doc__, _python_str_digest_f6979f16e0f0aae5c57e192598e8ffd4 );
    UPDATE_STRING_DICT0( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_e10f02955b7a0c33ba54394d472201ab );
    PyFrameObject *frame_module_django__db__models__sql__query = MAKE_FRAME( _codeobj_79e703883f8ad6b9f7a92b4338f566a4, _module_django__db__models__sql__query );

    FrameGuard frame_guard( frame_module_django__db__models__sql__query );
    try
    {
        assert( Py_REFCNT( frame_module_django__db__models__sql__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 10 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_copy, IMPORT_MODULE( _python_str_plain_copy, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 12 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_SortedDict, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_36fff8b06be9a51fbe6af4a1029911c0, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_SortedDict_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_SortedDict ) );
        frame_guard.setLineNumber( 13 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_force_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_force_text_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_force_text ) );
        frame_guard.setLineNumber( 14 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_Node, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_c6d87df14dfab199a865c0ea670ae412, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_Node_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Node ) );
        frame_guard.setLineNumber( 15 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_six_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_six ) );
        frame_guard.setLineNumber( 16 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_connections, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_connections_str_plain_DEFAULT_DB_ALIAS_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_connections ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_DEFAULT_DB_ALIAS, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_connections_str_plain_DEFAULT_DB_ALIAS_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_DEFAULT_DB_ALIAS ) );
        frame_guard.setLineNumber( 17 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_LOOKUP_SEP, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cfeccc6ee565189b79407570398b67dd, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_LOOKUP_SEP_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_LOOKUP_SEP ) );
        frame_guard.setLineNumber( 18 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_refs_aggregate, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8b0e4004c4fcac3df0a806fb7b8f511d, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_refs_aggregate_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_refs_aggregate ) );
        frame_guard.setLineNumber( 19 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_ExpressionNode, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8fc38f14b354961c11b4c2a3e28f5842, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_ExpressionNode_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_ExpressionNode ) );
        frame_guard.setLineNumber( 20 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_FieldDoesNotExist, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_FieldDoesNotExist_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_FieldDoesNotExist ) );
        frame_guard.setLineNumber( 21 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_PathInfo, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df3af17e9a1169756a1e6ec2e5c5be9c, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_PathInfo_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_PathInfo ) );
        frame_guard.setLineNumber( 22 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_base_aggregates_module, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_76e7805830391b8e3cf6c8ace04853a5, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_aggregates_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_aggregates ) );
        frame_guard.setLineNumber( 23 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_QUERY_TERMS, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df5858f86b0d7fe8934636ee8adeadfa, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_af27a7be01fa28e75f6df46c2e3c2b72_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_QUERY_TERMS ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_ORDER_DIR, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df5858f86b0d7fe8934636ee8adeadfa, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_af27a7be01fa28e75f6df46c2e3c2b72_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_ORDER_DIR ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_SINGLE, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df5858f86b0d7fe8934636ee8adeadfa, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_af27a7be01fa28e75f6df46c2e3c2b72_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_SINGLE ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_ORDER_PATTERN, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df5858f86b0d7fe8934636ee8adeadfa, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_af27a7be01fa28e75f6df46c2e3c2b72_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_ORDER_PATTERN ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_JoinInfo, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df5858f86b0d7fe8934636ee8adeadfa, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_af27a7be01fa28e75f6df46c2e3c2b72_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_JoinInfo ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_SelectInfo, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df5858f86b0d7fe8934636ee8adeadfa, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_af27a7be01fa28e75f6df46c2e3c2b72_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_SelectInfo ) );
        frame_guard.setLineNumber( 25 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_EmptyResultSet, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_0f555e04610886bc83252756436a3469, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_EmptyResultSet_str_plain_Empty_str_plain_MultiJoin_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_EmptyResultSet ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_Empty, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_0f555e04610886bc83252756436a3469, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_EmptyResultSet_str_plain_Empty_str_plain_MultiJoin_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Empty ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_MultiJoin, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_0f555e04610886bc83252756436a3469, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_EmptyResultSet_str_plain_Empty_str_plain_MultiJoin_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_MultiJoin ) );
        frame_guard.setLineNumber( 26 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_SQLEvaluator, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_b6f8cb84f3c5a2f49197b8522d43dc8d, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_SQLEvaluator_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_SQLEvaluator ) );
        frame_guard.setLineNumber( 27 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_WhereNode, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_16293a43e7db610e3aba90341c21ad3c_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_WhereNode ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_Constraint, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_16293a43e7db610e3aba90341c21ad3c_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Constraint ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_EverythingNode, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_16293a43e7db610e3aba90341c21ad3c_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_EverythingNode ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_ExtraWhere, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_16293a43e7db610e3aba90341c21ad3c_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_ExtraWhere ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_AND, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_16293a43e7db610e3aba90341c21ad3c_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_AND ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_OR, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_16293a43e7db610e3aba90341c21ad3c_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_OR ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_EmptyWhere, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_16293a43e7db610e3aba90341c21ad3c_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_EmptyWhere ) );
        frame_guard.setLineNumber( 29 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_FieldError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d9333e07c409926fdd89a4c3c526d0b5, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict, _python_list_str_plain_FieldError_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_FieldError ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain___all__, LIST_COPY( _python_list_str_plain_Query_str_plain_RawQuery_list ) );
        {
            frame_guard.setLineNumber( 34 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_RawQuery_of_module_django__db__models__sql__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__sql__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__sql__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_RawQuery, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_RawQuery, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 90 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_2_Query_of_module_django__db__models__sql__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__sql__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__sql__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call5;
                PyObjectTempKeeper0 call7;
                _tmp_python_tmp_class = ( call5.assign( _python_tmp_metaclass.asObject() ), call7.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_str_plain_Query, call7.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_Query, _python_tmp_class.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__db__models__sql__query)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }
    UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_get_order_dir, MAKE_FUNCTION_function_3_get_order_dir_of_module_django__db__models__sql__query(  ) );
    UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_add_to_dict, MAKE_FUNCTION_function_4_add_to_dict_of_module_django__db__models__sql__query(  ) );
    UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_is_reverse_o2o, MAKE_FUNCTION_function_5_is_reverse_o2o_of_module_django__db__models__sql__query(  ) );
    UPDATE_STRING_DICT1( _moduledict_django__db__models__sql__query, (Nuitka_StringObject *)_python_str_plain_alias_diff, MAKE_FUNCTION_function_6_alias_diff_of_module_django__db__models__sql__query(  ) );

   return MOD_RETURN_VALUE( _module_django__db__models__sql__query );
}
