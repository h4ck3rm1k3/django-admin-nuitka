// Generated code for Python source for module 'django.forms.models'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__forms__models is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__forms__models;
PyDictObject *_moduledict_django__forms__models;

// The module level variables.
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ALL_FIELDS( &_module_django__forms__models, &_python_str_plain_ALL_FIELDS );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_BaseForm( &_module_django__forms__models, &_python_str_plain_BaseForm );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_BaseFormSet( &_module_django__forms__models, &_python_str_plain_BaseFormSet );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_BaseInlineFormSet( &_module_django__forms__models, &_python_str_plain_BaseInlineFormSet );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_BaseModelForm( &_module_django__forms__models, &_python_str_plain_BaseModelForm );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_BaseModelFormSet( &_module_django__forms__models, &_python_str_plain_BaseModelFormSet );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_CheckboxSelectMultiple( &_module_django__forms__models, &_python_str_plain_CheckboxSelectMultiple );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ChoiceField( &_module_django__forms__models, &_python_str_plain_ChoiceField );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ErrorList( &_module_django__forms__models, &_python_str_plain_ErrorList );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_Field( &_module_django__forms__models, &_python_str_plain_Field );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_FieldError( &_module_django__forms__models, &_python_str_plain_FieldError );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_HiddenInput( &_module_django__forms__models, &_python_str_plain_HiddenInput );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_InlineForeignKeyField( &_module_django__forms__models, &_python_str_plain_InlineForeignKeyField );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ModelChoiceField( &_module_django__forms__models, &_python_str_plain_ModelChoiceField );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ModelChoiceIterator( &_module_django__forms__models, &_python_str_plain_ModelChoiceIterator );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ModelForm( &_module_django__forms__models, &_python_str_plain_ModelForm );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ModelFormMetaclass( &_module_django__forms__models, &_python_str_plain_ModelFormMetaclass );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ModelFormOptions( &_module_django__forms__models, &_python_str_plain_ModelFormOptions );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ModelMultipleChoiceField( &_module_django__forms__models, &_python_str_plain_ModelMultipleChoiceField );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_MultipleHiddenInput( &_module_django__forms__models, &_python_str_plain_MultipleHiddenInput );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_NON_FIELD_ERRORS( &_module_django__forms__models, &_python_str_plain_NON_FIELD_ERRORS );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_PendingDeprecationWarning( &_module_django__forms__models, &_python_str_plain_PendingDeprecationWarning );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_SelectMultiple( &_module_django__forms__models, &_python_str_plain_SelectMultiple );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_SortedDict( &_module_django__forms__models, &_python_str_plain_SortedDict );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ValidationError( &_module_django__forms__models, &_python_str_plain_ValidationError );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models__( &_module_django__forms__models, &_python_str_plain__ );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models___metaclass__( &_module_django__forms__models, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models__get_foreign_key( &_module_django__forms__models, &_python_str_plain__get_foreign_key );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_capfirst( &_module_django__forms__models, &_python_str_plain_capfirst );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_construct_instance( &_module_django__forms__models, &_python_str_plain_construct_instance );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_fields_for_model( &_module_django__forms__models, &_python_str_plain_fields_for_model );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_force_text( &_module_django__forms__models, &_python_str_plain_force_text );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_formset_factory( &_module_django__forms__models, &_python_str_plain_formset_factory );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_get_declared_fields( &_module_django__forms__models, &_python_str_plain_get_declared_fields );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_get_text_list( &_module_django__forms__models, &_python_str_plain_get_text_list );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_media_property( &_module_django__forms__models, &_python_str_plain_media_property );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_model_to_dict( &_module_django__forms__models, &_python_str_plain_model_to_dict );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_modelform_factory( &_module_django__forms__models, &_python_str_plain_modelform_factory );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_modelformset_factory( &_module_django__forms__models, &_python_str_plain_modelformset_factory );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_save_instance( &_module_django__forms__models, &_python_str_plain_save_instance );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_six( &_module_django__forms__models, &_python_str_plain_six );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_smart_text( &_module_django__forms__models, &_python_str_plain_smart_text );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_string_concat( &_module_django__forms__models, &_python_str_plain_string_concat );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_ugettext( &_module_django__forms__models, &_python_str_plain_ugettext );
static PyObjectGlobalVariable_django__forms__models _mvar_django__forms__models_warnings( &_module_django__forms__models, &_python_str_plain_warnings );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_fields_for_model_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_exclude, PyObjectLocalVariable &python_closure_f, PyObjectLocalVariable &python_closure_field_dict, PyObjectLocalVariable &python_closure_ignored );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_ModelFormOptions_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_ModelFormMetaclass_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_b );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_k, PyObjectLocalVariable &python_closure_v );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_BaseModelForm_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_8_ModelForm_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_BaseModelFormSet_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_o );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_form, PyObjectLocalVariable &python_closure_forms_to_delete );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_field, PyObjectLocalVariable &python_closure_form );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_field, PyObjectLocalParameterVariableNoDel &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_13__get_foreign_key_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f, PyObjectLocalParameterVariableNoDel &python_closure_fk_name );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_13__get_foreign_key_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_ForeignKey, PyObjectLocalVariable &python_closure_f, PyObjectLocalParameterVariableNoDel &python_closure_parent_model );


NUITKA_LOCAL_MODULE PyObject *impl_class_15_InlineForeignKeyField_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_16_ModelChoiceIterator_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_obj, PyObjectLocalParameterVariableNoDel &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_class_17_ModelChoiceField_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_key, PyObjectLocalVariable &python_closure_o );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalVariable &python_closure_v );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_value );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_value );


static PyObject *MAKE_FUNCTION_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_11_modelformset_factory_of_module_django__forms__models( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_13__get_foreign_key_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_14_inlineformset_factory_of_module_django__forms__models( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_19_modelform_defines_fields_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1_construct_instance_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObjectSharedLocalVariable &python_closure_AutoField, PyObjectSharedLocalVariable &python_closure_pk_is_not_editable );


// This structure is for attachment as self of function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models.
// It is allocated at the time the function object is created.
struct _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_AutoField;
    PyObjectClosureVariable python_closure_pk_is_not_editable;
};

static void _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_destructor( void *context_voidptr )
{
    _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *_python_context = (_context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( PyObjectSharedLocalVariable &python_closure_exclude, PyObjectSharedLocalVariable &python_closure_fields, PyObjectSharedLocalVariable &python_closure_form, PyObjectSharedLocalVariable &python_closure_instance, PyObjectSharedLocalVariable &python_closure_opts );


// This structure is for attachment as self of function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models.
// It is allocated at the time the function object is created.
struct _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_exclude;
    PyObjectClosureVariable python_closure_fields;
    PyObjectClosureVariable python_closure_form;
    PyObjectClosureVariable python_closure_instance;
    PyObjectClosureVariable python_closure_opts;
};

static void _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_destructor( void *context_voidptr )
{
    _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_t *_python_context = (_context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObjectSharedLocalVariable &python_closure_self );


// This structure is for attachment as self of function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models.
// It is allocated at the time the function object is created.
struct _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_self;
};

static void _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_destructor( void *context_voidptr )
{
    _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *_python_context = (_context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_2_save_instance_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3_model_to_dict_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_4_fields_for_model_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models(  );


static PyObject *MAKE_FUNCTION_function_9_modelform_factory_of_module_django__forms__models( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models(  );


// The module function definitions.
static PyObject *impl_function_1_construct_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_form, PyObject *_python_par_instance, PyObject *_python_par_fields, PyObject *_python_par_exclude )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_exclude( _python_str_plain_exclude, _python_par_exclude );
    PyObjectLocalVariable _python_var_models( _python_str_plain_models );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_cleaned_data( _python_str_plain_cleaned_data );
    PyObjectLocalVariable _python_var_file_field_list( _python_str_plain_file_field_list );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_1_construct_instance_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1_construct_instance_of_module_django__forms__models ) )
    {
        if ( frame_function_1_construct_instance_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_construct_instance_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1_construct_instance_of_module_django__forms__models );
        }

        frame_function_1_construct_instance_of_module_django__forms__models = MAKE_FRAME( _codeobj_1a378f3015b0e85dcd1a80e41c2744bf, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1_construct_instance_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1_construct_instance_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 39 );
        _python_var_models.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_file_field_list.updateLocalsDict( _python_var_cleaned_data.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_models.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_models_list, _python_int_0 ) ).asObject(), _python_str_plain_models ) );
        frame_guard.setLineNumber( 40 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 42 );
        _python_var_cleaned_data.assign1( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) );
        _python_var_file_field_list.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 44 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 44 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 45 );
                {
                    PyObjectTempKeeper1 cmp3;
                    PyObjectTempKeeper0 isinstance1;
                    if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_editable ) ).asObject() ) )) || ( ( isinstance1.assign( _python_var_f.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_models.asObject(), _python_str_plain_AutoField ) ).asObject() ) ) || ( cmp3.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp3.asObject0(), _python_var_cleaned_data.asObject() ) ) ) ) )
                {
                    frame_guard.setLineNumber( 47 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 48 );
                {
                    PyObjectTempKeeper1 cmp5;
                    if ( ( ( _python_var_fields.asObject() != Py_None ) && ( cmp5.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp5.asObject0(), _python_var_fields.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 49 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 50 );
                {
                    PyObjectTempKeeper1 cmp7;
                    if ( ( CHECK_IF_TRUE( _python_var_exclude.asObject() ) && ( cmp7.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp7.asObject0(), _python_var_exclude.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 51 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 54 );
                {
                    PyObjectTempKeeper0 isinstance16;
                    if ( ( isinstance16.assign( _python_var_f.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_models.asObject(), _python_str_plain_FileField ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 55 );
                    {
                        PyObjectTempKeeper1 call9;
                        DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_file_field_list.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_f.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 57 );
                    {
                        PyObjectTempKeeper1 call13;
                        PyObjectTempKeeper0 call14;
                        PyObjectTempKeeper0 subscr11;
                        DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_save_form_data ) ), call14.assign( _python_var_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), PyObjectTemporary( ( subscr11.assign( _python_var_cleaned_data.asObject() ), LOOKUP_SUBSCRIPT( subscr11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 59 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_file_field_list.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 59 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 60 );
                {
                    PyObjectTempKeeper1 call20;
                    PyObjectTempKeeper0 call21;
                    PyObjectTempKeeper0 subscr18;
                    DECREASE_REFCOUNT( ( call20.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_save_form_data ) ), call21.assign( _python_var_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), call21.asObject0(), PyObjectTemporary( ( subscr18.assign( _python_var_cleaned_data.asObject() ), LOOKUP_SUBSCRIPT( subscr18.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 62 );
        return _python_var_instance.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_file_field_list.updateLocalsDict( _python_var_cleaned_data.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_models.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_construct_instance_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1_construct_instance_of_module_django__forms__models );
           frame_function_1_construct_instance_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_construct_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_exclude = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "construct_instance() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exclude == key )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exclude, key ) )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "construct_instance() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "construct_instance() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "construct_instance() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "construct_instance() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "construct_instance() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "construct_instance() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "construct_instance() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "construct_instance() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "construct_instance() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "construct_instance() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "construct_instance() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "construct_instance() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_exclude != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "construct_instance() got multiple values for keyword argument 'exclude'" );
             goto error_exit;
         }

        _python_par_exclude = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_fields );
    }
    if ( _python_par_exclude == NULL )
    {
        _python_par_exclude = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_exclude );
    }


    return impl_function_1_construct_instance_of_module_django__forms__models( self, _python_par_form, _python_par_instance, _python_par_fields, _python_par_exclude );

error_exit:;

    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_exclude );

    return NULL;
}

static PyObject *dparse_function_1_construct_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1_construct_instance_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_construct_instance_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_save_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_form, PyObject *_python_par_instance, PyObject *_python_par_fields, PyObject *_python_par_fail_message, PyObject *_python_par_commit, PyObject *_python_par_exclude, PyObject *_python_par_construct )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectSharedLocalVariable _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectSharedLocalVariable _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_fail_message( _python_str_plain_fail_message, _python_par_fail_message );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );
    PyObjectSharedLocalVariable _python_var_exclude( _python_str_plain_exclude, _python_par_exclude );
    PyObjectLocalParameterVariableNoDel _python_var_construct( _python_str_plain_construct, _python_par_construct );
    PyObjectSharedLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_save_m2m( _python_str_plain_save_m2m );

    // Actual function code.
    static PyFrameObject *frame_function_2_save_instance_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_2_save_instance_of_module_django__forms__models ) )
    {
        if ( frame_function_2_save_instance_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_save_instance_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_2_save_instance_of_module_django__forms__models );
        }

        frame_function_2_save_instance_of_module_django__forms__models = MAKE_FRAME( _codeobj_4838d0ba73e084c7d2687fbac762fbd2, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_2_save_instance_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_2_save_instance_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 75 );
        if ( CHECK_IF_TRUE( _python_var_construct.asObject() ) )
        {
            frame_guard.setLineNumber( 76 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call2;
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call4;
                _python_var_instance.assign1( ( call1.assign( _mvar_django__forms__models_construct_instance.asObject0() ), call2.assign( _python_var_form.asObject() ), call3.assign( _python_var_instance.asObject() ), call4.assign( _python_var_fields.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), _python_var_exclude.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 77 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 78 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_errors ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 79 );
            {
                PyObjectTempKeeper1 make_tuple6;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_ce479890b29b6cfefa3d505f57658d90, PyObjectTemporary( ( make_tuple6.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE2( make_tuple6.asObject0(), _python_var_fail_message.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        _python_var_save_m2m.assign1( MAKE_FUNCTION_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( _python_var_exclude, _python_var_fields, _python_var_form, _python_var_instance, _python_var_opts ) );
        frame_guard.setLineNumber( 92 );
        if ( CHECK_IF_TRUE( _python_var_commit.asObject() ) )
        {
            frame_guard.setLineNumber( 94 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain_save ) ).asObject() ) );
            frame_guard.setLineNumber( 95 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( _python_var_save_m2m.asObject() ) );
        }
        else
        {
            frame_guard.setLineNumber( 99 );
            {
                    PyObject *tmp_identifier = _python_var_save_m2m.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_form.asObject(), _python_str_plain_save_m2m );
            }
        }
        frame_guard.setLineNumber( 100 );
        return _python_var_instance.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_construct.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_commit.updateLocalsDict( _python_var_fail_message.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_save_m2m.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_save_instance_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_2_save_instance_of_module_django__forms__models );
           frame_function_2_save_instance_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_save_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_fail_message = NULL;
    PyObject *_python_par_commit = NULL;
    PyObject *_python_par_exclude = NULL;
    PyObject *_python_par_construct = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_instance() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fail_message == key )
            {
                if (unlikely( _python_par_fail_message ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'fail_message'" );
                    goto error_exit;
                }

                _python_par_fail_message = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exclude == key )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_construct == key )
            {
                if (unlikely( _python_par_construct ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'construct'" );
                    goto error_exit;
                }

                _python_par_construct = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fail_message, key ) )
            {
                if (unlikely( _python_par_fail_message ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'fail_message'" );
                    goto error_exit;
                }

                _python_par_fail_message = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exclude, key ) )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_construct, key ) )
            {
                if (unlikely( _python_par_construct ))
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'construct'" );
                    goto error_exit;
                }

                _python_par_construct = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_instance() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_instance() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_instance() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_instance() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_instance() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "save_instance() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_instance() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "save_instance() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_instance() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_instance() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_instance() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_instance() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_fail_message != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'fail_message'" );
             goto error_exit;
         }

        _python_par_fail_message = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_exclude != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'exclude'" );
             goto error_exit;
         }

        _python_par_exclude = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_construct != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_instance() got multiple values for keyword argument 'construct'" );
             goto error_exit;
         }

        _python_par_construct = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_fields );
    }
    if ( _python_par_fail_message == NULL )
    {
        _python_par_fail_message = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_fail_message );
    }
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_commit );
    }
    if ( _python_par_exclude == NULL )
    {
        _python_par_exclude = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_exclude );
    }
    if ( _python_par_construct == NULL )
    {
        _python_par_construct = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_construct );
    }


    return impl_function_2_save_instance_of_module_django__forms__models( self, _python_par_form, _python_par_instance, _python_par_fields, _python_par_fail_message, _python_par_commit, _python_par_exclude, _python_par_construct );

error_exit:;

    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_fail_message );
    Py_XDECREF( _python_par_commit );
    Py_XDECREF( _python_par_exclude );
    Py_XDECREF( _python_par_construct );

    return NULL;
}

static PyObject *dparse_function_2_save_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_2_save_instance_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_save_instance_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( Nuitka_FunctionObject *self )
{
    // The context of the function.
    struct _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_t *_python_context = (struct _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable _python_var_cleaned_data( _python_str_plain_cleaned_data );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models ) )
    {
        if ( frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models );
        }

        frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models = MAKE_FRAME( _codeobj_3fd407bd1b448401d1e635f927b8658e, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 84 );
        _python_var_cleaned_data.assign1( LOOKUP_ATTRIBUTE( _python_context->python_closure_form.asObject(), _python_str_plain_cleaned_data ) );
        {
            frame_guard.setLineNumber( 85 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_opts.asObject(), _python_str_plain_many_to_many ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 85 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 86 );
                {
                    PyObjectTempKeeper1 cmp1;
                    if ( ( CHECK_IF_TRUE( _python_context->python_closure_fields.asObject() ) && ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), _python_context->python_closure_fields.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 87 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 88 );
                {
                    PyObjectTempKeeper1 cmp3;
                    if ( ( CHECK_IF_TRUE( _python_context->python_closure_exclude.asObject() ) && ( cmp3.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), _python_context->python_closure_exclude.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 89 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 90 );
                {
                    PyObjectTempKeeper1 cmp10;
                    if ( ( cmp10.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp10.asObject0(), _python_var_cleaned_data.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 91 );
                    {
                        PyObjectTempKeeper1 call7;
                        PyObjectTempKeeper0 call8;
                        PyObjectTempKeeper0 subscr5;
                        DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_save_form_data ) ), call8.assign( _python_context->python_closure_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), PyObjectTemporary( ( subscr5.assign( _python_var_cleaned_data.asObject() ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_context->python_closure_instance.updateLocalsDict( _python_context->python_closure_exclude.updateLocalsDict( _python_context->python_closure_fields.updateLocalsDict( _python_context->python_closure_opts.updateLocalsDict( _python_context->python_closure_form.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_cleaned_data.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models );
           frame_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        PyErr_Format( PyExc_TypeError, "save_m2m() takes no arguments (%zd given)", args_given + kw_size );
#else
        if ( kw_size == 0 )
        {
           PyErr_Format( PyExc_TypeError, "save_m2m() takes 0 positional arguments but %zd was given", args_given );
        }
        else
        {
           PyObject *tmp_iter = PyObject_GetIter( kw );
           PyObject *tmp_arg_name = PyIter_Next( tmp_iter );
           Py_DECREF( tmp_iter );

           PyErr_Format( PyExc_TypeError, "save_m2m() got an unexpected keyword argument '%s'", Nuitka_String_AsString( tmp_arg_name ) );

           Py_DECREF( tmp_arg_name );
        }
#endif
        goto error_exit;
    }


    return impl_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0)
    {
        return impl_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( self );
    }
    else
    {
        PyObject *result = fparse_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_model_to_dict_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_instance, PyObject *_python_par_fields, PyObject *_python_par_exclude )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_exclude( _python_str_plain_exclude, _python_par_exclude );
    PyObjectLocalVariable _python_var_ManyToManyField( _python_str_plain_ManyToManyField );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_3_model_to_dict_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_3_model_to_dict_of_module_django__forms__models ) )
    {
        if ( frame_function_3_model_to_dict_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_model_to_dict_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_3_model_to_dict_of_module_django__forms__models );
        }

        frame_function_3_model_to_dict_of_module_django__forms__models = MAKE_FRAME( _codeobj_5b55a6950d12aabdc78172cc8c072898, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_3_model_to_dict_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_3_model_to_dict_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 118 );
        _python_var_ManyToManyField.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_429a1979feac8a565a5c2aef69a2e26c, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_ManyToManyField.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_ManyToManyField_list, _python_int_0 ) ).asObject(), _python_str_plain_ManyToManyField ) );
        frame_guard.setLineNumber( 119 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) );
        _python_var_data.assign1( PyDict_New() );
        {
            frame_guard.setLineNumber( 121 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 op1;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( op1.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_concrete_fields ) ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_many_to_many ) ).asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 121 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 122 );
                if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_editable ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 123 );
                    CONSIDER_THREADING(); continue;
                }
                frame_guard.setLineNumber( 124 );
                {
                    PyObjectTempKeeper1 cmp3;
                    if ( ( CHECK_IF_TRUE( _python_var_fields.asObject() ) && ( cmp3.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp3.asObject0(), _python_var_fields.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 125 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 126 );
                {
                    PyObjectTempKeeper1 cmp5;
                    if ( ( CHECK_IF_TRUE( _python_var_exclude.asObject() ) && ( cmp5.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), _python_var_exclude.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 127 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 128 );
                {
                    PyObjectTempKeeper0 isinstance11;
                    if ( ( isinstance11.assign( _python_var_f.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance11.asObject0(), _python_var_ManyToManyField.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 132 );
                    if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain_pk ) ).asObject() == Py_None ) )
                    {
                        frame_guard.setLineNumber( 133 );
                        {
                                PyObject *tmp_subscribed = _python_var_data.asObject();
                                SET_SUBSCRIPT( PyObjectTemporary( PyList_New( 0 ) ).asObject(), tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 136 );
                        {
                            PyObjectTempKeeper1 call7;
                            {
                                PyObjectTemporary tmp_identifier( TO_LIST( PyObjectTemporary( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_value_from_object ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_instance.asObject() ) ) ).asObject(), _python_str_plain_values_list ) ).asObject(), _python_tuple_unicode_plain_pk_tuple, PyObjectTemporary( PyDict_Copy( _python_dict_614abec2e7254e6d7f5f48fb49c18498 ) ).asObject() ) ).asObject() ) );
                                PyObject *tmp_subscribed = _python_var_data.asObject();
                                SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() );
                        }
                        }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 138 );
                    {
                        PyObjectTempKeeper1 call9;
                        {
                            PyObjectTemporary tmp_identifier( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_value_from_object ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_instance.asObject() ) ) );
                            PyObject *tmp_subscribed = _python_var_data.asObject();
                            SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() );
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 139 );
        return _python_var_data.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_ManyToManyField.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_model_to_dict_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_3_model_to_dict_of_module_django__forms__models );
           frame_function_3_model_to_dict_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_model_to_dict_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_exclude = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "model_to_dict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exclude == key )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exclude, key ) )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "model_to_dict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "model_to_dict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "model_to_dict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "model_to_dict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "model_to_dict() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "model_to_dict() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "model_to_dict() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "model_to_dict() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "model_to_dict() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "model_to_dict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "model_to_dict() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "model_to_dict() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_exclude != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "model_to_dict() got multiple values for keyword argument 'exclude'" );
             goto error_exit;
         }

        _python_par_exclude = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_fields );
    }
    if ( _python_par_exclude == NULL )
    {
        _python_par_exclude = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_exclude );
    }


    return impl_function_3_model_to_dict_of_module_django__forms__models( self, _python_par_instance, _python_par_fields, _python_par_exclude );

error_exit:;

    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_exclude );

    return NULL;
}

static PyObject *dparse_function_3_model_to_dict_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_model_to_dict_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_model_to_dict_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_fields_for_model_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_model, PyObject *_python_par_fields, PyObject *_python_par_exclude, PyObject *_python_par_widgets, PyObject *_python_par_formfield_callback, PyObject *_python_par_localized_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_exclude( _python_str_plain_exclude, _python_par_exclude );
    PyObjectLocalParameterVariableNoDel _python_var_widgets( _python_str_plain_widgets, _python_par_widgets );
    PyObjectLocalParameterVariableNoDel _python_var_formfield_callback( _python_str_plain_formfield_callback, _python_par_formfield_callback );
    PyObjectLocalParameterVariableNoDel _python_var_localized_fields( _python_str_plain_localized_fields, _python_par_localized_fields );
    PyObjectLocalVariable _python_var_field_list( _python_str_plain_field_list );
    PyObjectLocalVariable _python_var_ignored( _python_str_plain_ignored );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_kwargs( _python_str_plain_kwargs );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );
    PyObjectLocalVariable _python_var_field_dict( _python_str_plain_field_dict );

    // Actual function code.
    _python_var_field_list.assign1( PyList_New( 0 ) );
    _python_var_ignored.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_4_fields_for_model_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_4_fields_for_model_of_module_django__forms__models ) )
    {
        if ( frame_function_4_fields_for_model_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_fields_for_model_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_4_fields_for_model_of_module_django__forms__models );
        }

        frame_function_4_fields_for_model_of_module_django__forms__models = MAKE_FRAME( _codeobj_09c4df3063d7d4d4f56c28e2ed3a79dc, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_4_fields_for_model_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_4_fields_for_model_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 159 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain__meta ) );
        {
            frame_guard.setLineNumber( 160 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 op1;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_sorted ), PyObjectTemporary( ( op1.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_concrete_fields ) ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_many_to_many ) ).asObject() ) ) ).asObject() ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 160 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 161 );
                if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_editable ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 162 );
                    CONSIDER_THREADING(); continue;
                }
                frame_guard.setLineNumber( 163 );
                {
                    PyObjectTempKeeper1 cmp3;
                    if ( ( ( _python_var_fields.asObject() != Py_None ) && ( cmp3.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp3.asObject0(), _python_var_fields.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 164 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 165 );
                {
                    PyObjectTempKeeper1 cmp5;
                    if ( ( CHECK_IF_TRUE( _python_var_exclude.asObject() ) && ( cmp5.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), _python_var_exclude.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 166 );
                    CONSIDER_THREADING(); continue;
                }
                }
                _python_var_kwargs.assign1( PyDict_New() );
                frame_guard.setLineNumber( 169 );
                {
                    PyObjectTempKeeper1 cmp9;
                    if ( ( CHECK_IF_TRUE( _python_var_widgets.asObject() ) && ( cmp9.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp9.asObject0(), _python_var_widgets.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 170 );
                    {
                        PyObjectTempKeeper0 subscr7;
                        {
                            PyObjectTemporary tmp_identifier( ( subscr7.assign( _python_var_widgets.asObject() ), LOOKUP_SUBSCRIPT( subscr7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                            SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_widget );
                    }
                    }
                }
                }
                frame_guard.setLineNumber( 171 );
                {
                    PyObjectTempKeeper0 cmp11;
                    PyObjectTempKeeper1 cmp13;
                    if ( ( ( cmp11.assign( _python_var_localized_fields.asObject() ), RICH_COMPARE_BOOL_EQ( cmp11.asObject0(), _mvar_django__forms__models_ALL_FIELDS.asObject0() ) ) || ( CHECK_IF_TRUE( _python_var_localized_fields.asObject() ) && ( cmp13.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp13.asObject0(), _python_var_localized_fields.asObject() ) ) ) ) )
                {
                    frame_guard.setLineNumber( 172 );
                    SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_localize );
                }
                }
                frame_guard.setLineNumber( 174 );
                if ( ( _python_var_formfield_callback.asObject() == Py_None ) )
                {
                    frame_guard.setLineNumber( 175 );
                    {
                        PyObjectTempKeeper1 call_tmp15;
                        _python_var_formfield.assign1( ( call_tmp15.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp15.asObject(), _python_var_kwargs.asObject1() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 176 );
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_formfield_callback.asObject() ) ).asObject() ) )) )
                    {
                        frame_guard.setLineNumber( 177 );
                        {
                                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_5743fa9dc9ad3900fac3004ea92943da ) ).asObject() ) );
                                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 179 );
                        {
                            PyObjectTempKeeper0 call_tmp17;
                            PyObjectTempKeeper1 call_tmp18;
                            _python_var_formfield.assign1( ( call_tmp17.assign( _python_var_formfield_callback.asObject() ), call_tmp18.assign( MAKE_TUPLE1( _python_var_f.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp17.asObject(), call_tmp18.asObject(), _python_var_kwargs.asObject1() ) ) );
                        }
                    }
                }
                frame_guard.setLineNumber( 181 );
                if ( CHECK_IF_TRUE( _python_var_formfield.asObject() ) )
                {
                    frame_guard.setLineNumber( 182 );
                    {
                        PyObjectTempKeeper1 call22;
                        PyObjectTempKeeper1 make_tuple20;
                        DECREASE_REFCOUNT( ( call22.assign( LOOKUP_ATTRIBUTE( _python_var_field_list.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), PyObjectTemporary( ( make_tuple20.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ), MAKE_TUPLE2( make_tuple20.asObject0(), _python_var_formfield.asObject() ) ) ).asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 184 );
                    {
                        PyObjectTempKeeper1 call24;
                        DECREASE_REFCOUNT( ( call24.assign( LOOKUP_ATTRIBUTE( _python_var_ignored.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call24.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 185 );
        {
            PyObjectTempKeeper0 call26;
            _python_var_field_dict.assign1( ( call26.assign( _mvar_django__forms__models_SortedDict.asObject0() ), CALL_FUNCTION_WITH_ARGS( call26.asObject0(), _python_var_field_list.asObject() ) ) );
        }
        frame_guard.setLineNumber( 186 );
        if ( CHECK_IF_TRUE( _python_var_fields.asObject() ) )
        {
            frame_guard.setLineNumber( 187 );
            {
                PyObjectTempKeeper0 call28;
                _python_var_field_dict.assign1( ( call28.assign( _mvar_django__forms__models_SortedDict.asObject0() ), CALL_FUNCTION_WITH_ARGS( call28.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_4_fields_for_model_of_module_django__forms__models( MAKE_ITERATOR( _python_var_fields.asObject() ), _python_var_exclude, _python_var_f, _python_var_field_dict, _python_var_ignored ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 191 );
        return _python_var_field_dict.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_localized_fields.updateLocalsDict( _python_var_formfield_callback.updateLocalsDict( _python_var_widgets.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field_dict.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_ignored.updateLocalsDict( _python_var_field_list.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_fields_for_model_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_4_fields_for_model_of_module_django__forms__models );
           frame_function_4_fields_for_model_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_4_fields_for_model_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_exclude = NULL;
    PyObject *_python_par_widgets = NULL;
    PyObject *_python_par_formfield_callback = NULL;
    PyObject *_python_par_localized_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "fields_for_model() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exclude == key )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widgets == key )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_formfield_callback == key )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_localized_fields == key )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exclude, key ) )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widgets, key ) )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_formfield_callback, key ) )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_localized_fields, key ) )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "fields_for_model() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "fields_for_model() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "fields_for_model() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "fields_for_model() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "fields_for_model() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "fields_for_model() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "fields_for_model() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "fields_for_model() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "fields_for_model() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "fields_for_model() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "fields_for_model() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "fields_for_model() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_exclude != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'exclude'" );
             goto error_exit;
         }

        _python_par_exclude = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_widgets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'widgets'" );
             goto error_exit;
         }

        _python_par_widgets = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_formfield_callback != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'formfield_callback'" );
             goto error_exit;
         }

        _python_par_formfield_callback = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_localized_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "fields_for_model() got multiple values for keyword argument 'localized_fields'" );
             goto error_exit;
         }

        _python_par_localized_fields = INCREASE_REFCOUNT( args[ 5 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_fields );
    }
    if ( _python_par_exclude == NULL )
    {
        _python_par_exclude = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_exclude );
    }
    if ( _python_par_widgets == NULL )
    {
        _python_par_widgets = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_widgets );
    }
    if ( _python_par_formfield_callback == NULL )
    {
        _python_par_formfield_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_formfield_callback );
    }
    if ( _python_par_localized_fields == NULL )
    {
        _python_par_localized_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_localized_fields );
    }


    return impl_function_4_fields_for_model_of_module_django__forms__models( self, _python_par_model, _python_par_fields, _python_par_exclude, _python_par_widgets, _python_par_formfield_callback, _python_par_localized_fields );

error_exit:;

    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_exclude );
    Py_XDECREF( _python_par_widgets );
    Py_XDECREF( _python_par_formfield_callback );
    Py_XDECREF( _python_par_localized_fields );

    return NULL;
}

static PyObject *dparse_function_4_fields_for_model_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_4_fields_for_model_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_fields_for_model_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_fields_for_model_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_exclude,PyObjectLocalVariable &python_closure_f,PyObjectLocalVariable &python_closure_field_dict,PyObjectLocalVariable &python_closure_ignored )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 188 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 188 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp5;
                    PyObjectTempKeeper0 cmp7;
                    if ( ( ( (!( CHECK_IF_TRUE( python_closure_exclude.asObject() ) )) || ( CHECK_IF_TRUE( python_closure_exclude.asObject() ) && ( cmp5.assign( python_closure_f.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp5.asObject0(), python_closure_exclude.asObject() ) ) ) ) && ( cmp7.assign( python_closure_f.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp7.asObject0(), python_closure_ignored.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 188 );
                    {
                        PyObjectTempKeeper1 call1;
                        PyObjectTempKeeper0 make_tuple3;
                        APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple3.assign( python_closure_f.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( python_closure_field_dict.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_f.asObject() ) ) ).asObject() ) ) ).asObject() ), Py_None;
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_5_ModelFormOptions_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models(  ) );
    return _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_options )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_options( _python_str_plain_options, _python_par_options );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models = MAKE_FRAME( _codeobj_c8201573c85989eb38f9b7c9cb00a128, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 195 );
        {
                PyObjectTemporary tmp_identifier( BUILTIN_GETATTR( _python_var_options.asObject(), _python_unicode_plain_model, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 196 );
        {
                PyObjectTemporary tmp_identifier( BUILTIN_GETATTR( _python_var_options.asObject(), _python_unicode_plain_fields, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_fields );
        }
        frame_guard.setLineNumber( 197 );
        {
                PyObjectTemporary tmp_identifier( BUILTIN_GETATTR( _python_var_options.asObject(), _python_unicode_plain_exclude, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_exclude );
        }
        frame_guard.setLineNumber( 198 );
        {
                PyObjectTemporary tmp_identifier( BUILTIN_GETATTR( _python_var_options.asObject(), _python_unicode_plain_widgets, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_widgets );
        }
        frame_guard.setLineNumber( 199 );
        {
                PyObjectTemporary tmp_identifier( BUILTIN_GETATTR( _python_var_options.asObject(), _python_unicode_plain_localized_fields, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_localized_fields );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_options.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models );
           frame_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_options = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_options == key )
            {
                if (unlikely( _python_par_options ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'options'" );
                    goto error_exit;
                }

                _python_par_options = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_options, key ) )
            {
                if (unlikely( _python_par_options ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'options'" );
                    goto error_exit;
                }

                _python_par_options = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_options != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'options'" );
             goto error_exit;
         }

        _python_par_options = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_options == NULL )
    {
        _python_par_options = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_options );
    }


    return impl_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models( self, _python_par_self, _python_par_options );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_options );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_6_ModelFormMetaclass_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___new__( _python_str_plain___new__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    static PyFrameObject *frame_class_6_ModelFormMetaclass_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_class_6_ModelFormMetaclass_of_module_django__forms__models ) )
    {
        if ( frame_class_6_ModelFormMetaclass_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_6_ModelFormMetaclass_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_class_6_ModelFormMetaclass_of_module_django__forms__models );
        }

        frame_class_6_ModelFormMetaclass_of_module_django__forms__models = MAKE_FRAME( _codeobj_5b1aa10f7f093654ceff3bb836fd34bf, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_class_6_ModelFormMetaclass_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_class_6_ModelFormMetaclass_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 203 );
        _python_var___new__.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_staticmethod ), PyObjectTemporary( MAKE_FUNCTION_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___new__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_class_6_ModelFormMetaclass_of_module_django__forms__models )
        {
           Py_DECREF( frame_class_6_ModelFormMetaclass_of_module_django__forms__models );
           frame_class_6_ModelFormMetaclass_of_module_django__forms__models = NULL;
        }

        throw;
    }
    return _python_var___new__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_cls, PyObject *_python_par_name, PyObject *_python_par_bases, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_bases( _python_str_plain_bases, _python_par_bases );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_formfield_callback( _python_str_plain_formfield_callback );
    PyObjectLocalVariable _python_var_parents( _python_str_plain_parents );
    PyObjectLocalVariable _python_var_declared_fields( _python_str_plain_declared_fields );
    PyObjectLocalVariable _python_var_new_class( _python_str_plain_new_class );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_opt( _python_str_plain_opt );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );
    PyObjectLocalVariable _python_var_fields( _python_str_plain_fields );
    PyObjectLocalVariable _python_var_none_model_fields( _python_str_plain_none_model_fields );
    PyObjectLocalVariable _python_var_missing_fields( _python_str_plain_missing_fields );
    PyObjectLocalVariable _python_var_message( _python_str_plain_message );
    PyObjectLocalVariable _python_var_b( _python_str_plain_b );
    PyObjectLocalVariable _python_var_k( _python_str_plain_k );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    static PyFrameObject *frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models ) )
    {
        if ( frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models );
        }

        frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models = MAKE_FRAME( _codeobj_12040f0a2617034e43b2694f885dcda6, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 204 );
        _python_var_formfield_callback.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_attrs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_formfield_callback, Py_None ) );
        frame_guard.setLineNumber( 205 );
        try
        {
            frame_guard.setLineNumber( 206 );
            _python_var_parents.assign1( impl_listcontr_1_of_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( MAKE_ITERATOR( _python_var_bases.asObject() ), _python_var_b ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_NameError ) )
            {
                frame_guard.detachFrame();
                _python_var_parents.assign0( Py_None );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 210 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            _python_var_declared_fields.assign1( ( call1.assign( _mvar_django__forms__models_get_declared_fields.asObject0() ), call2.assign( _python_var_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_attrs.asObject(), Py_False ) ) );
        }
        frame_guard.setLineNumber( 211 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 call8;
            PyObjectTempKeeper0 call9;
            PyObjectTempKeeper0 super5;
            _python_var_new_class.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super5.assign( _mvar_django__forms__models_ModelFormMetaclass.asObject0() ), BUILTIN_SUPER( super5.asObject0(), _python_var_cls.asObject() ) ) ).asObject(), _python_str_plain___new__ ) ), call8.assign( _python_var_cls.asObject() ), call9.assign( _python_var_name.asObject() ), call10.assign( _python_var_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), call9.asObject0(), call10.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 213 );
        if ( (!( CHECK_IF_TRUE( _python_var_parents.asObject() ) )) )
        {
            frame_guard.setLineNumber( 214 );
            return _python_var_new_class.asObject1();
        }
        frame_guard.setLineNumber( 216 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_unicode_plain_media, _python_var_attrs.asObject() ) )
        {
            frame_guard.setLineNumber( 217 );
            {
                PyObjectTempKeeper0 call12;
                {
                    PyObjectTemporary tmp_identifier( ( call12.assign( _mvar_django__forms__models_media_property.asObject0() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_new_class.asObject() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_new_class.asObject(), _python_str_plain_media );
            }
            }
        }
        {
            frame_guard.setLineNumber( 218 );
            PyObject *_tmp_python_tmp_assign_source;
            {
                PyObjectTempKeeper0 call14;
                _tmp_python_tmp_assign_source = ( call14.assign( _mvar_django__forms__models_ModelFormOptions.asObject0() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), PyObjectTemporary( BUILTIN_GETATTR( _python_var_new_class.asObject(), _python_unicode_plain_Meta, Py_None ) ).asObject() ) );
            }
            PyObjectTemporary _python_tmp_assign_source( _tmp_python_tmp_assign_source );
            _python_var_opts.assign0( _python_tmp_assign_source.asObject() );
            {
                    PyObject *tmp_identifier = _python_tmp_assign_source.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_new_class.asObject(), _python_str_plain__meta );
            }
        }
        {
            frame_guard.setLineNumber( 223 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LIST_COPY( _python_list_cf6db7f10c2e3a218c9efff5d36d0306_list ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 223 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_opt.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 224 );
                {
                    PyObjectTempKeeper0 getattr16;
                    _python_var_value.assign1( ( getattr16.assign( _python_var_opts.asObject() ), BUILTIN_GETATTR( getattr16.asObject0(), _python_var_opt.asObject(), NULL ) ) );
                }
                frame_guard.setLineNumber( 225 );
                {
                    PyObjectTempKeeper0 cmp27;
                    PyObjectTempKeeper0 isinstance25;
                    if ( ( ( isinstance25.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance25.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) && ( cmp27.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_NE( cmp27.asObject0(), _mvar_django__forms__models_ALL_FIELDS.asObject0() ) ) ) )
                {
                    frame_guard.setLineNumber( 226 );
                    {
                        PyObjectTempKeeper1 make_dict19;
                        PyObjectTempKeeper0 make_dict21;
                        _python_var_msg.assign1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_4cb58d6a988da7debca9add05e827db0, PyObjectTemporary( ( make_dict19.assign( LOOKUP_ATTRIBUTE( _python_var_new_class.asObject(), _python_str_plain___name__ ) ), make_dict21.assign( _python_var_opt.asObject() ), MAKE_DICT3( make_dict19.asObject0(), _python_unicode_plain_model, make_dict21.asObject0(), _python_unicode_plain_opt, _python_var_value.asObject(), _python_unicode_plain_value ) ) ).asObject() ) );
                    }
                    frame_guard.setLineNumber( 232 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( _python_var_msg.asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 234 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_model ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 237 );
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ).asObject() == Py_None ) && ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_exclude ) ).asObject() == Py_None ) ) )
            {
                frame_guard.setLineNumber( 240 );
                {
                    PyObjectTempKeeper1 call31;
                    PyObjectTempKeeper1 make_tuple29;
                    DECREASE_REFCOUNT( ( call31.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_warnings.asObject0(), _python_str_plain_warn ) ), CALL_FUNCTION( call31.asObject0(), PyObjectTemporary( ( make_tuple29.assign( BINARY_OPERATION_REMAINDER( _python_unicode_digest_37692529ec6cddf97777991ee34ae730, _python_var_name.asObject() ) ), MAKE_TUPLE2( make_tuple29.asObject0(), _mvar_django__forms__models_PendingDeprecationWarning.asObject0() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_f154c9a58c9419d7e391901d7b7fe49e ) ).asObject() ) ) );
                }
            }
            frame_guard.setLineNumber( 245 );
            {
                PyObjectTempKeeper1 cmp34;
                if ( ( cmp34.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ), RICH_COMPARE_BOOL_EQ( cmp34.asObject0(), _mvar_django__forms__models_ALL_FIELDS.asObject0() ) ) )
            {
                frame_guard.setLineNumber( 248 );
                SET_ATTRIBUTE( Py_None, _python_var_opts.asObject(), _python_str_plain_fields );
            }
            }
            frame_guard.setLineNumber( 250 );
            {
                PyObjectTempKeeper0 call42;
                PyObjectTempKeeper1 make_tuple36;
                PyObjectTempKeeper1 make_tuple37;
                PyObjectTempKeeper1 make_tuple38;
                PyObjectTempKeeper1 make_tuple39;
                PyObjectTempKeeper0 make_tuple40;
                _python_var_fields.assign1( ( call42.assign( _mvar_django__forms__models_fields_for_model.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call42.asObject0(), PyObjectTemporary( ( make_tuple36.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_model ) ), make_tuple37.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ), make_tuple38.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_exclude ) ), make_tuple39.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_widgets ) ), make_tuple40.assign( _python_var_formfield_callback.asObject() ), MAKE_TUPLE6( make_tuple36.asObject0(), make_tuple37.asObject0(), make_tuple38.asObject0(), make_tuple39.asObject0(), make_tuple40.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_localized_fields ) ).asObject() ) ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 254 );
            {
                PyObjectTempKeeper1 call44;
                _python_var_none_model_fields.assign1( impl_listcontr_2_of_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( MAKE_ITERATOR( PyObjectTemporary( ( call44.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call44.asObject0(), _python_var_fields.asObject() ) ) ).asObject() ), _python_var_k, _python_var_v ) );
            }
            frame_guard.setLineNumber( 255 );
            {
                PyObjectTempKeeper1 op46;
                _python_var_missing_fields.assign1( ( op46.assign( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), _python_var_none_model_fields.asObject() ) ), BINARY_OPERATION_SUB( op46.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_declared_fields.asObject(), _python_str_plain_keys ) ).asObject() ) ).asObject() ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 257 );
            if ( CHECK_IF_TRUE( _python_var_missing_fields.asObject() ) )
            {
                _python_var_message.assign0( _python_unicode_digest_6a1f2d4d5b3d4a12dc2519edf2710efd );
                frame_guard.setLineNumber( 259 );
                {
                    PyObjectTempKeeper1 call48;
                    PyObjectTempKeeper1 make_tuple50;
                    PyObjectTempKeeper0 op52;
                    _python_var_message.assign1( ( op52.assign( _python_var_message.asObject() ), BINARY_OPERATION_REMAINDER( op52.asObject0(), PyObjectTemporary( ( make_tuple50.assign( ( call48.assign( LOOKUP_ATTRIBUTE( _python_unicode_digest_fc763cb31e9938f37737394681228f83, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call48.asObject0(), _python_var_missing_fields.asObject() ) ) ), MAKE_TUPLE2( make_tuple50.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain___name__ ) ).asObject() ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 261 );
                {
                    PyObjectTempKeeper0 call54;
                    {
                        PyObjectTemporary tmp_exception_type( ( call54.assign( _mvar_django__forms__models_FieldError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call54.asObject0(), _python_var_message.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            frame_guard.setLineNumber( 264 );
            {
                PyObjectTempKeeper1 call56;
                DECREASE_REFCOUNT( ( call56.assign( LOOKUP_ATTRIBUTE( _python_var_fields.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call56.asObject0(), _python_var_declared_fields.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 266 );
            _python_var_fields.assign0( _python_var_declared_fields.asObject() );
        }
        frame_guard.setLineNumber( 267 );
        {
                PyObject *tmp_identifier = _python_var_declared_fields.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_new_class.asObject(), _python_str_plain_declared_fields );
        }
        frame_guard.setLineNumber( 268 );
        {
                PyObject *tmp_identifier = _python_var_fields.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_new_class.asObject(), _python_str_plain_base_fields );
        }
        frame_guard.setLineNumber( 269 );
        return _python_var_new_class.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_bases.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_k.updateLocalsDict( _python_var_b.updateLocalsDict( _python_var_message.updateLocalsDict( _python_var_missing_fields.updateLocalsDict( _python_var_none_model_fields.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_msg.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_opt.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_new_class.updateLocalsDict( _python_var_declared_fields.updateLocalsDict( _python_var_parents.updateLocalsDict( _python_var_formfield_callback.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models );
           frame_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_bases = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__new__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_bases == key )
            {
                if (unlikely( _python_par_bases ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'bases'" );
                    goto error_exit;
                }

                _python_par_bases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_bases, key ) )
            {
                if (unlikely( _python_par_bases ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'bases'" );
                    goto error_exit;
                }

                _python_par_bases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__new__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__new__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__new__() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_bases != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'bases'" );
             goto error_exit;
         }

        _python_par_bases = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( self, _python_par_cls, _python_par_name, _python_par_bases, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_bases );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_b )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 206 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 206 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_b.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call2;
                    if ( CHECK_IF_TRUE( PyObjectTemporary( ( call2.assign( python_closure_b.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_issubclass ), call2.asObject0(), _mvar_django__forms__models_ModelForm.asObject0() ) ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 206 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_b.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_k,PyObjectLocalVariable &python_closure_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 254 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 254 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 254 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_k.assign0( _python_tmp_element_1.asObject() );
                    python_closure_v.assign0( _python_tmp_element_2.asObject() );
                }
                if ( (!( CHECK_IF_TRUE( python_closure_v.asObject() ) )) )
                {
                    frame_guard.setLineNumber( 254 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_k.asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_7_BaseModelForm_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var__update_errors( _python_str_plain__update_errors );
    PyObjectLocalVariable _python_var__get_validation_exclusions( _python_str_plain__get_validation_exclusions );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var__post_clean( _python_str_plain__post_clean );
    PyObjectLocalVariable _python_var_validate_unique( _python_str_plain_validate_unique );
    PyObjectLocalVariable _python_var_save( _python_str_plain_save );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    static PyFrameObject *frame_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_b3b08b0e603fbbeb470a959f1051ad08, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 272 );
        _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( MAKE_TUPLE9( Py_None, Py_None, _python_unicode_digest_81276a30e3ecc4d5610b416768203372, Py_None, Py_None, _mvar_django__forms__models_ErrorList.asObject0(), _python_unicode_chr_58, Py_False, Py_None ) ) );
        _python_var__update_errors.assign1( MAKE_FUNCTION_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models(  ) );
        _python_var__get_validation_exclusions.assign1( MAKE_FUNCTION_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models(  ) );
        _python_var_clean.assign1( MAKE_FUNCTION_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models(  ) );
        _python_var__post_clean.assign1( MAKE_FUNCTION_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models(  ) );
        _python_var_validate_unique.assign1( MAKE_FUNCTION_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models(  ) );
        _python_var_save.assign1( MAKE_FUNCTION_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models(  ) );
        frame_guard.setLineNumber( 413 );
        SET_ATTRIBUTE( Py_True, _python_var_save.asObject(), _python_str_plain_alters_data );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_save.updateLocalsDict( _python_var_validate_unique.updateLocalsDict( _python_var__post_clean.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var__get_validation_exclusions.updateLocalsDict( _python_var__update_errors.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_class_7_BaseModelForm_of_module_django__forms__models );
           frame_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        throw;
    }
    return _python_var_save.updateLocalsDict( _python_var_validate_unique.updateLocalsDict( _python_var__post_clean.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var__get_validation_exclusions.updateLocalsDict( _python_var__update_errors.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_auto_id, PyObject *_python_par_prefix, PyObject *_python_par_initial, PyObject *_python_par_error_class, PyObject *_python_par_label_suffix, PyObject *_python_par_empty_permitted, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_auto_id( _python_str_plain_auto_id, _python_par_auto_id );
    PyObjectLocalParameterVariableNoDel _python_var_prefix( _python_str_plain_prefix, _python_par_prefix );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_error_class( _python_str_plain_error_class, _python_par_error_class );
    PyObjectLocalParameterVariableNoDel _python_var_label_suffix( _python_str_plain_label_suffix, _python_par_label_suffix );
    PyObjectLocalParameterVariableNoDel _python_var_empty_permitted( _python_str_plain_empty_permitted, _python_par_empty_permitted );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_object_data( _python_str_plain_object_data );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_33c190ac2ecac8b9ff6fbbddd70e05c1, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 275 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 276 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_model ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 277 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_96aad98c11c8243c5c45f8218b85f4c3 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 278 );
        if ( ( _python_var_instance.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 280 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_model ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_instance );
            }
            _python_var_object_data.assign1( PyDict_New() );
        }
        else
        {
            frame_guard.setLineNumber( 283 );
            {
                    PyObject *tmp_identifier = _python_var_instance.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_instance );
            }
            frame_guard.setLineNumber( 284 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call2;
                PyObjectTempKeeper1 call3;
                _python_var_object_data.assign1( ( call1.assign( _mvar_django__forms__models_model_to_dict.asObject0() ), call2.assign( _python_var_instance.asObject() ), call3.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_exclude ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 286 );
        if ( ( _python_var_initial.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 287 );
            {
                PyObjectTempKeeper1 call5;
                DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_object_data.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_initial.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 291 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain__validate_unique );
        frame_guard.setLineNumber( 292 );
        {
            PyObjectTempKeeper1 call17;
            PyObjectTempKeeper0 make_tuple10;
            PyObjectTempKeeper0 make_tuple11;
            PyObjectTempKeeper0 make_tuple12;
            PyObjectTempKeeper0 make_tuple13;
            PyObjectTempKeeper0 make_tuple14;
            PyObjectTempKeeper0 make_tuple15;
            PyObjectTempKeeper0 make_tuple9;
            PyObjectTempKeeper0 super7;
            DECREASE_REFCOUNT( ( call17.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super7.assign( _mvar_django__forms__models_BaseModelForm.asObject0() ), BUILTIN_SUPER( super7.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_POSARGS( call17.asObject0(), PyObjectTemporary( ( make_tuple9.assign( _python_var_data.asObject() ), make_tuple10.assign( _python_var_files.asObject() ), make_tuple11.assign( _python_var_auto_id.asObject() ), make_tuple12.assign( _python_var_prefix.asObject() ), make_tuple13.assign( _python_var_object_data.asObject() ), make_tuple14.assign( _python_var_error_class.asObject() ), make_tuple15.assign( _python_var_label_suffix.asObject() ), MAKE_TUPLE8( make_tuple9.asObject0(), make_tuple10.asObject0(), make_tuple11.asObject0(), make_tuple12.asObject0(), make_tuple13.asObject0(), make_tuple14.asObject0(), make_tuple15.asObject0(), _python_var_empty_permitted.asObject() ) ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance.updateLocalsDict( _python_var_empty_permitted.updateLocalsDict( _python_var_label_suffix.updateLocalsDict( _python_var_error_class.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_prefix.updateLocalsDict( _python_var_auto_id.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_object_data.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models );
           frame_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_auto_id = NULL;
    PyObject *_python_par_prefix = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_error_class = NULL;
    PyObject *_python_par_label_suffix = NULL;
    PyObject *_python_par_empty_permitted = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_auto_id == key )
            {
                if (unlikely( _python_par_auto_id ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_id'" );
                    goto error_exit;
                }

                _python_par_auto_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prefix == key )
            {
                if (unlikely( _python_par_prefix ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefix'" );
                    goto error_exit;
                }

                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_error_class == key )
            {
                if (unlikely( _python_par_error_class ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_class'" );
                    goto error_exit;
                }

                _python_par_error_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_label_suffix == key )
            {
                if (unlikely( _python_par_label_suffix ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label_suffix'" );
                    goto error_exit;
                }

                _python_par_label_suffix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_empty_permitted == key )
            {
                if (unlikely( _python_par_empty_permitted ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'empty_permitted'" );
                    goto error_exit;
                }

                _python_par_empty_permitted = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_auto_id, key ) )
            {
                if (unlikely( _python_par_auto_id ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_id'" );
                    goto error_exit;
                }

                _python_par_auto_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prefix, key ) )
            {
                if (unlikely( _python_par_prefix ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefix'" );
                    goto error_exit;
                }

                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_error_class, key ) )
            {
                if (unlikely( _python_par_error_class ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_class'" );
                    goto error_exit;
                }

                _python_par_error_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_label_suffix, key ) )
            {
                if (unlikely( _python_par_label_suffix ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label_suffix'" );
                    goto error_exit;
                }

                _python_par_label_suffix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_empty_permitted, key ) )
            {
                if (unlikely( _python_par_empty_permitted ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'empty_permitted'" );
                    goto error_exit;
                }

                _python_par_empty_permitted = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 10 ))
    {
        if ( 10 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 10, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 10 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
#else
            if ( 10 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 10, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 10 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 10, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 10 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 10 ? args_given : 10;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_auto_id != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_id'" );
             goto error_exit;
         }

        _python_par_auto_id = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_prefix != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefix'" );
             goto error_exit;
         }

        _python_par_prefix = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_error_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_class'" );
             goto error_exit;
         }

        _python_par_error_class = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_label_suffix != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label_suffix'" );
             goto error_exit;
         }

        _python_par_label_suffix = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_empty_permitted != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'empty_permitted'" );
             goto error_exit;
         }

        _python_par_empty_permitted = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 9 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_data == NULL )
    {
        _python_par_data = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_data );
    }
    if ( _python_par_files == NULL )
    {
        _python_par_files = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_files );
    }
    if ( _python_par_auto_id == NULL )
    {
        _python_par_auto_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_auto_id );
    }
    if ( _python_par_prefix == NULL )
    {
        _python_par_prefix = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_prefix );
    }
    if ( _python_par_initial == NULL )
    {
        _python_par_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_initial );
    }
    if ( _python_par_error_class == NULL )
    {
        _python_par_error_class = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_error_class );
    }
    if ( _python_par_label_suffix == NULL )
    {
        _python_par_label_suffix = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_label_suffix );
    }
    if ( _python_par_empty_permitted == NULL )
    {
        _python_par_empty_permitted = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_empty_permitted );
    }
    if ( _python_par_instance == NULL )
    {
        _python_par_instance = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 8 ) );
        assertObject( _python_par_instance );
    }


    return impl_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( self, _python_par_self, _python_par_data, _python_par_files, _python_par_auto_id, _python_par_prefix, _python_par_initial, _python_par_error_class, _python_par_label_suffix, _python_par_empty_permitted, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_auto_id );
    Py_XDECREF( _python_par_prefix );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_error_class );
    Py_XDECREF( _python_par_label_suffix );
    Py_XDECREF( _python_par_empty_permitted );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 10)
    {
        return impl_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_message_dict )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_message_dict( _python_str_plain_message_dict, _python_par_message_dict );
    PyObjectLocalVariable _python_var_k( _python_str_plain_k );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );
    PyObjectLocalVariable _python_var_messages( _python_str_plain_messages );

    // Actual function code.
    static PyFrameObject *frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_1b54413411bf6cff9d00708f45817fcd, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 296 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_message_dict.asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 296 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 296 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_k.assign0( _python_tmp_element_1.asObject() );
                        _python_var_v.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 297 );
                {
                    PyObjectTempKeeper0 cmp8;
                    if ( ( cmp8.assign( _python_var_k.asObject() ), RICH_COMPARE_BOOL_NE( cmp8.asObject0(), _mvar_django__forms__models_NON_FIELD_ERRORS.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 298 );
                    {
                        PyObjectTempKeeper1 call1;
                        PyObjectTempKeeper0 call2;
                        PyObjectTempKeeper1 call4;
                        DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__errors ) ).asObject(), _python_str_plain_setdefault ) ), call2.assign( _python_var_k.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_class ) ).asObject() ) ).asObject() ) ) ).asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_v.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 300 );
                    {
                        PyObjectTempKeeper0 cmp6;
                        if ( ( cmp6.assign( _python_var_k.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cleaned_data ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 301 );
                        {
                                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cleaned_data ) );
                                DEL_SUBSCRIPT( tmp_subscribed.asObject(), _python_var_k.asObject() );
                        }
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 302 );
        {
            PyObjectTempKeeper0 cmp17;
            if ( ( cmp17.assign( _mvar_django__forms__models_NON_FIELD_ERRORS.asObject0() ), SEQUENCE_CONTAINS_BOOL( cmp17.asObject0(), _python_var_message_dict.asObject() ) ) )
        {
            frame_guard.setLineNumber( 303 );
            {
                PyObjectTempKeeper0 subscr10;
                _python_var_messages.assign1( ( subscr10.assign( _python_var_message_dict.asObject() ), LOOKUP_SUBSCRIPT( subscr10.asObject0(), _mvar_django__forms__models_NON_FIELD_ERRORS.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 304 );
            {
                PyObjectTempKeeper1 call12;
                PyObjectTempKeeper0 call13;
                PyObjectTempKeeper1 call15;
                DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call12.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__errors ) ).asObject(), _python_str_plain_setdefault ) ), call13.assign( _mvar_django__forms__models_NON_FIELD_ERRORS.asObject0() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), call13.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_class ) ).asObject() ) ).asObject() ) ) ).asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_messages.asObject() ) ) );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_message_dict.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_messages.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_k.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models );
           frame_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_message_dict = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_update_errors() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_update_errors() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_message_dict == key )
            {
                if (unlikely( _python_par_message_dict ))
                {
                    PyErr_Format( PyExc_TypeError, "_update_errors() got multiple values for keyword argument 'message_dict'" );
                    goto error_exit;
                }

                _python_par_message_dict = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_update_errors() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_message_dict, key ) )
            {
                if (unlikely( _python_par_message_dict ))
                {
                    PyErr_Format( PyExc_TypeError, "_update_errors() got multiple values for keyword argument 'message_dict'" );
                    goto error_exit;
                }

                _python_par_message_dict = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_update_errors() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_update_errors() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_update_errors() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_update_errors() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_update_errors() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_update_errors() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_update_errors() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_update_errors() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_update_errors() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_update_errors() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_update_errors() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_update_errors() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_update_errors() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_update_errors() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_message_dict != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_update_errors() got multiple values for keyword argument 'message_dict'" );
             goto error_exit;
         }

        _python_par_message_dict = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models( self, _python_par_self, _python_par_message_dict );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_message_dict );

    return NULL;
}

static PyObject *dparse_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_exclude( _python_str_plain_exclude );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_form_field( _python_str_plain_form_field );
    PyObjectLocalVariable _python_var_field_value( _python_str_plain_field_value );

    // Actual function code.
    _python_var_exclude.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_65cccf1bacb500542ea9b3585450c907, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 315 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 315 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 316 );
                _python_var_field.assign1( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) );
                frame_guard.setLineNumber( 319 );
                {
                    PyObjectTempKeeper0 cmp24;
                    if ( ( cmp24.assign( _python_var_field.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp24.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fields ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 320 );
                    {
                        PyObjectTempKeeper1 call1;
                        DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_exclude.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 325 );
                    {
                        PyObjectTempKeeper0 cmp22;
                        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) && ( cmp22.assign( _python_var_field.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp22.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) ) ) )
                    {
                        frame_guard.setLineNumber( 326 );
                        {
                            PyObjectTempKeeper1 call3;
                            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_exclude.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 327 );
                        {
                            PyObjectTempKeeper0 cmp20;
                            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_exclude ) ).asObject() ) && ( cmp20.assign( _python_var_field.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp20.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_exclude ) ).asObject() ) ) ) )
                        {
                            frame_guard.setLineNumber( 328 );
                            {
                                PyObjectTempKeeper1 call5;
                                DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_exclude.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 332 );
                            {
                                PyObjectTempKeeper0 cmp18;
                                if ( ( cmp18.assign( _python_var_field.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp18.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__errors ) ).asObject(), _python_str_plain_keys ) ).asObject() ) ).asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 333 );
                                {
                                    PyObjectTempKeeper1 call7;
                                    DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_exclude.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                                }
                            }
                            else
                            {
                                frame_guard.setLineNumber( 342 );
                                {
                                    PyObjectTempKeeper1 subscr9;
                                    _python_var_form_field.assign1( ( subscr9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fields ) ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_var_field.asObject() ) ) );
                                }
                                frame_guard.setLineNumber( 343 );
                                {
                                    PyObjectTempKeeper1 call11;
                                    _python_var_field_value.assign1( ( call11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cleaned_data ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_field.asObject(), Py_None ) ) );
                                }
                                frame_guard.setLineNumber( 344 );
                                {
                                    PyObjectTempKeeper0 cmp16;
                                    if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_blank ) ).asObject() ) )) && ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form_field.asObject(), _python_str_plain_required ) ).asObject() ) )) && ( cmp16.assign( _python_var_field_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form_field.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) ) ) )
                                {
                                    frame_guard.setLineNumber( 345 );
                                    {
                                        PyObjectTempKeeper1 call14;
                                        DECREASE_REFCOUNT( ( call14.assign( LOOKUP_ATTRIBUTE( _python_var_exclude.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                                    }
                                }
                                }
                            }
                            }
                        }
                        }
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 346 );
        return _python_var_exclude.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_field_value.updateLocalsDict( _python_var_form_field.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_exclude.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models );
           frame_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_validation_exclusions() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_validation_exclusions() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_bfdd4050a1b2b2d5e181830c2544eea0, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 349 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain__validate_unique );
        frame_guard.setLineNumber( 350 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cleaned_data );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models );
           frame_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_exclude( _python_str_plain_exclude );
    PyObjectLocalVariable _python_var_f_name( _python_str_plain_f_name );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );

    // Actual function code.
    static PyFrameObject *frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_e83ebd342f62c98e08c1416ad78c290f, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 353 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 355 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( _mvar_django__forms__models_construct_instance.asObject0() ), call2.assign( _python_var_self.asObject() ), call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), call4.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_exclude ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_instance );
        }
        }
        frame_guard.setLineNumber( 357 );
        _python_var_exclude.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_validation_exclusions ) ).asObject() ) );
        {
            frame_guard.setLineNumber( 366 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fields ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 366 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 366 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_f_name.assign0( _python_tmp_element_1.asObject() );
                        _python_var_field.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 367 );
                {
                    PyObjectTempKeeper0 isinstance8;
                    if ( ( isinstance8.assign( _python_var_field.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance8.asObject0(), _mvar_django__forms__models_InlineForeignKeyField.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 368 );
                    {
                        PyObjectTempKeeper1 call6;
                        DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_exclude.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_f_name.asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 371 );
        try
        {
            frame_guard.setLineNumber( 372 );
            {
                PyObjectTempKeeper1 call12;
                DECREASE_REFCOUNT( ( call12.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_clean_fields ) ), CALL_FUNCTION( call12.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_exclude.asObject(), _python_str_plain_exclude ) ).asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( _mvar_django__forms__models_ValidationError.asObject0() ) )
            {
                frame_guard.detachFrame();
                _python_var_e.assign0( _exception.getValue() );
                frame_guard.setLineNumber( 374 );
                {
                    PyObjectTempKeeper1 call10;
                    DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__update_errors ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_message_dict ) ).asObject() ) ) );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 377 );
        try
        {
            frame_guard.setLineNumber( 378 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_clean ) ).asObject() ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( _mvar_django__forms__models_ValidationError.asObject0() ) )
            {
                frame_guard.detachFrame();
                _python_var_e.assign0( _exception.getValue() );
                frame_guard.setLineNumber( 380 );
                {
                    PyObjectTempKeeper1 call17;
                    PyObjectTempKeeper1 make_dict15;
                    DECREASE_REFCOUNT( ( call17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__update_errors ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), PyObjectTemporary( ( make_dict15.assign( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_messages ) ), MAKE_DICT1( make_dict15.asObject0(), _mvar_django__forms__models_NON_FIELD_ERRORS.asObject0() ) ) ).asObject() ) ) );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 383 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__validate_unique ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 384 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validate_unique ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_f_name.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models );
           frame_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_post_clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_post_clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_post_clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_post_clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_post_clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_post_clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_post_clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_post_clean() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_post_clean() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_post_clean() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_post_clean() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_post_clean() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_post_clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_post_clean() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_post_clean() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_post_clean() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_post_clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_exclude( _python_str_plain_exclude );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );

    // Actual function code.
    static PyFrameObject *frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_9211bd8c9326b425f7f95e91d7314022, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 391 );
        _python_var_exclude.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_validation_exclusions ) ).asObject() ) );
        frame_guard.setLineNumber( 392 );
        try
        {
            frame_guard.setLineNumber( 393 );
            {
                PyObjectTempKeeper1 call3;
                DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_validate_unique ) ), CALL_FUNCTION( call3.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_exclude.asObject(), _python_str_plain_exclude ) ).asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( _mvar_django__forms__models_ValidationError.asObject0() ) )
            {
                frame_guard.detachFrame();
                _python_var_e.assign0( _exception.getValue() );
                frame_guard.setLineNumber( 395 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__update_errors ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_message_dict ) ).asObject() ) ) );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_exclude.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models );
           frame_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate_unique() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate_unique() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate_unique() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_commit )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );
    PyObjectLocalVariable _python_var_fail_message( _python_str_plain_fail_message );

    // Actual function code.
    static PyFrameObject *frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models ) )
    {
        if ( frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models );
        }

        frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models = MAKE_FRAME( _codeobj_345cb8b5ba598ae98ad69fae542355ac, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 405 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_pk ) ).asObject() == Py_None ) )
        {
            _python_var_fail_message.assign0( _python_unicode_plain_created );
        }
        else
        {
            _python_var_fail_message.assign0( _python_unicode_plain_changed );
        }
        frame_guard.setLineNumber( 409 );
        {
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper1 make_tuple2;
            PyObjectTempKeeper1 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            PyObjectTempKeeper0 make_tuple5;
            return ( call7.assign( _mvar_django__forms__models_save_instance.asObject0() ), CALL_FUNCTION( call7.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_self.asObject() ), make_tuple2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), make_tuple3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ), make_tuple4.assign( _python_var_fail_message.asObject() ), make_tuple5.assign( _python_var_commit.asObject() ), MAKE_TUPLE6( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), make_tuple4.asObject0(), make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_exclude ) ).asObject() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_bf9f54bbc6ac19a2492858ef059b9977 ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_commit.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_fail_message.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models );
           frame_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_commit = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "save() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_commit );
    }


    return impl_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models( self, _python_par_self, _python_par_commit );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_commit );

    return NULL;
}

static PyObject *dparse_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_8_ModelForm_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


static PyObject *impl_function_9_modelform_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_model, PyObject *_python_par_form, PyObject *_python_par_fields, PyObject *_python_par_exclude, PyObject *_python_par_formfield_callback, PyObject *_python_par_widgets, PyObject *_python_par_localized_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_exclude( _python_str_plain_exclude, _python_par_exclude );
    PyObjectLocalParameterVariableNoDel _python_var_formfield_callback( _python_str_plain_formfield_callback, _python_par_formfield_callback );
    PyObjectLocalParameterVariableNoDel _python_var_widgets( _python_str_plain_widgets, _python_par_widgets );
    PyObjectLocalParameterVariableNoDel _python_var_localized_fields( _python_str_plain_localized_fields, _python_par_localized_fields );
    PyObjectLocalVariable _python_var_attrs( _python_str_plain_attrs );
    PyObjectLocalVariable _python_var_parent( _python_str_plain_parent );
    PyObjectLocalVariable _python_var_Meta( _python_str_plain_Meta );
    PyObjectLocalVariable _python_var_class_name( _python_str_plain_class_name );
    PyObjectLocalVariable _python_var_form_class_attrs( _python_str_plain_form_class_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_9_modelform_factory_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_9_modelform_factory_of_module_django__forms__models ) )
    {
        if ( frame_function_9_modelform_factory_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_modelform_factory_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_9_modelform_factory_of_module_django__forms__models );
        }

        frame_function_9_modelform_factory_of_module_django__forms__models = MAKE_FRAME( _codeobj_62c19cdff29580fb04a07e5ac131d74d, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_9_modelform_factory_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_9_modelform_factory_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 443 );
        _python_var_attrs.assign1( MAKE_DICT1( _python_var_model.asObject(), _python_unicode_plain_model ) );
        frame_guard.setLineNumber( 444 );
        if ( ( _python_var_fields.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 445 );
            {
                    PyObject *tmp_identifier = _python_var_fields.asObject();
                    SET_SUBSCRIPT( tmp_identifier, _python_var_attrs.asObject(), _python_unicode_plain_fields );
            }
        }
        frame_guard.setLineNumber( 446 );
        if ( ( _python_var_exclude.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 447 );
            {
                    PyObject *tmp_identifier = _python_var_exclude.asObject();
                    SET_SUBSCRIPT( tmp_identifier, _python_var_attrs.asObject(), _python_unicode_plain_exclude );
            }
        }
        frame_guard.setLineNumber( 448 );
        if ( ( _python_var_widgets.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 449 );
            {
                    PyObject *tmp_identifier = _python_var_widgets.asObject();
                    SET_SUBSCRIPT( tmp_identifier, _python_var_attrs.asObject(), _python_unicode_plain_widgets );
            }
        }
        frame_guard.setLineNumber( 450 );
        if ( ( _python_var_localized_fields.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 451 );
            {
                    PyObject *tmp_identifier = _python_var_localized_fields.asObject();
                    SET_SUBSCRIPT( tmp_identifier, _python_var_attrs.asObject(), _python_unicode_plain_localized_fields );
            }
        }
        frame_guard.setLineNumber( 455 );
        _python_var_parent.assign1( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
        frame_guard.setLineNumber( 456 );
        if ( HAS_ATTRIBUTE( _python_var_form.asObject(), _python_unicode_plain_Meta ) )
        {
            frame_guard.setLineNumber( 457 );
            _python_var_parent.assign1( MAKE_TUPLE2( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_Meta ) ).asObject(), LOOKUP_BUILTIN( _python_str_plain_object ) ) );
        }
        frame_guard.setLineNumber( 458 );
        {
            PyObjectTempKeeper0 type32;
            _python_var_Meta.assign1( ( type32.assign( _python_var_parent.asObject() ), BUILTIN_TYPE3( _python_str_digest_47e28c49f6b3257d092228301adff2a2, _python_str_plain_Meta, type32.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 461 );
        _python_var_class_name.assign1( BINARY_OPERATION_ADD( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain___name__ ) ).asObject(), _python_str_plain_Form ) );
        frame_guard.setLineNumber( 464 );
        {
            PyObjectTempKeeper0 make_dict4;
            _python_var_form_class_attrs.assign1( ( make_dict4.assign( _python_var_Meta.asObject() ), MAKE_DICT2( make_dict4.asObject0(), _python_unicode_plain_Meta, _python_var_formfield_callback.asObject(), _python_unicode_plain_formfield_callback ) ) );
        }
        frame_guard.setLineNumber( 472 );
        if ( ( ( PyObjectTemporary( BUILTIN_GETATTR( _python_var_Meta.asObject(), _python_unicode_plain_fields, Py_None ) ).asObject() == Py_None ) && ( PyObjectTemporary( BUILTIN_GETATTR( _python_var_Meta.asObject(), _python_unicode_plain_exclude, Py_None ) ).asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 474 );
            {
                PyObjectTempKeeper1 call8;
                DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_warnings.asObject0(), _python_str_plain_warn ) ), CALL_FUNCTION( call8.asObject0(), PyObjectTemporary( MAKE_TUPLE2( _python_unicode_digest_80d6a6f132e424200e32a3025d87f310, _mvar_django__forms__models_PendingDeprecationWarning.asObject0() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_f154c9a58c9419d7e391901d7b7fe49e ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 479 );
        {
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper0 call12;
            PyObjectTempKeeper1 call13;
            return ( call11.assign( BUILTIN_TYPE1( _python_var_form.asObject() ) ), call12.assign( _python_var_class_name.asObject() ), call13.assign( MAKE_TUPLE1( _python_var_form.asObject() ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), call12.asObject0(), call13.asObject0(), _python_var_form_class_attrs.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_localized_fields.updateLocalsDict( _python_var_widgets.updateLocalsDict( _python_var_formfield_callback.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_form_class_attrs.updateLocalsDict( _python_var_class_name.updateLocalsDict( _python_var_Meta.updateLocalsDict( _python_var_parent.updateLocalsDict( _python_var_attrs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_modelform_factory_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_9_modelform_factory_of_module_django__forms__models );
           frame_function_9_modelform_factory_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_modelform_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_exclude = NULL;
    PyObject *_python_par_formfield_callback = NULL;
    PyObject *_python_par_widgets = NULL;
    PyObject *_python_par_localized_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "modelform_factory() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exclude == key )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_formfield_callback == key )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widgets == key )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_localized_fields == key )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exclude, key ) )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_formfield_callback, key ) )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widgets, key ) )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_localized_fields, key ) )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "modelform_factory() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "modelform_factory() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "modelform_factory() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "modelform_factory() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "modelform_factory() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "modelform_factory() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "modelform_factory() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "modelform_factory() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "modelform_factory() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "modelform_factory() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "modelform_factory() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "modelform_factory() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_exclude != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'exclude'" );
             goto error_exit;
         }

        _python_par_exclude = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_formfield_callback != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'formfield_callback'" );
             goto error_exit;
         }

        _python_par_formfield_callback = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_widgets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'widgets'" );
             goto error_exit;
         }

        _python_par_widgets = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_localized_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_factory() got multiple values for keyword argument 'localized_fields'" );
             goto error_exit;
         }

        _python_par_localized_fields = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_form == NULL )
    {
        _python_par_form = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_form );
    }
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_fields );
    }
    if ( _python_par_exclude == NULL )
    {
        _python_par_exclude = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_exclude );
    }
    if ( _python_par_formfield_callback == NULL )
    {
        _python_par_formfield_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_formfield_callback );
    }
    if ( _python_par_widgets == NULL )
    {
        _python_par_widgets = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_widgets );
    }
    if ( _python_par_localized_fields == NULL )
    {
        _python_par_localized_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_localized_fields );
    }


    return impl_function_9_modelform_factory_of_module_django__forms__models( self, _python_par_model, _python_par_form, _python_par_fields, _python_par_exclude, _python_par_formfield_callback, _python_par_widgets, _python_par_localized_fields );

error_exit:;

    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_exclude );
    Py_XDECREF( _python_par_formfield_callback );
    Py_XDECREF( _python_par_widgets );
    Py_XDECREF( _python_par_localized_fields );

    return NULL;
}

static PyObject *dparse_function_9_modelform_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_9_modelform_factory_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_modelform_factory_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_model( _python_str_plain_model );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_initial_form_count( _python_str_plain_initial_form_count );
    PyObjectLocalVariable _python_var__existing_object( _python_str_plain__existing_object );
    PyObjectLocalVariable _python_var__construct_form( _python_str_plain__construct_form );
    PyObjectLocalVariable _python_var_get_queryset( _python_str_plain_get_queryset );
    PyObjectLocalVariable _python_var_save_new( _python_str_plain_save_new );
    PyObjectLocalVariable _python_var_save_existing( _python_str_plain_save_existing );
    PyObjectLocalVariable _python_var_save( _python_str_plain_save );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var_validate_unique( _python_str_plain_validate_unique );
    PyObjectLocalVariable _python_var_get_unique_error_message( _python_str_plain_get_unique_error_message );
    PyObjectLocalVariable _python_var_get_date_error_message( _python_str_plain_get_date_error_message );
    PyObjectLocalVariable _python_var_get_form_error( _python_str_plain_get_form_error );
    PyObjectLocalVariable _python_var_save_existing_objects( _python_str_plain_save_existing_objects );
    PyObjectLocalVariable _python_var_save_new_objects( _python_str_plain_save_new_objects );
    PyObjectLocalVariable _python_var_add_fields( _python_str_plain_add_fields );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    _python_var___doc__.assign0( _python_unicode_digest_91536548dda3261ef03094b59822e4d1 );
    _python_var_model.assign0( Py_None );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_initial_form_count.assign1( MAKE_FUNCTION_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var__existing_object.assign1( MAKE_FUNCTION_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var__construct_form.assign1( MAKE_FUNCTION_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_get_queryset.assign1( MAKE_FUNCTION_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_save_new.assign1( MAKE_FUNCTION_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_save_existing.assign1( MAKE_FUNCTION_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_save.assign1( MAKE_FUNCTION_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    static PyFrameObject *frame_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_b1406adf31acc275993420dd29a34c8e, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 571 );
        SET_ATTRIBUTE( Py_True, _python_var_save.asObject(), _python_str_plain_alters_data );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_add_fields.updateLocalsDict( _python_var_save_new_objects.updateLocalsDict( _python_var_save_existing_objects.updateLocalsDict( _python_var_get_form_error.updateLocalsDict( _python_var_get_date_error_message.updateLocalsDict( _python_var_get_unique_error_message.updateLocalsDict( _python_var_validate_unique.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_save.updateLocalsDict( _python_var_save_existing.updateLocalsDict( _python_var_save_new.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var__construct_form.updateLocalsDict( _python_var__existing_object.updateLocalsDict( _python_var_initial_form_count.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        throw;
    }
    _python_var_clean.assign1( MAKE_FUNCTION_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_validate_unique.assign1( MAKE_FUNCTION_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_get_unique_error_message.assign1( MAKE_FUNCTION_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_get_date_error_message.assign1( MAKE_FUNCTION_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_get_form_error.assign1( MAKE_FUNCTION_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_save_existing_objects.assign1( MAKE_FUNCTION_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_save_new_objects.assign1( MAKE_FUNCTION_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    _python_var_add_fields.assign1( MAKE_FUNCTION_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
    return _python_var_add_fields.updateLocalsDict( _python_var_save_new_objects.updateLocalsDict( _python_var_save_existing_objects.updateLocalsDict( _python_var_get_form_error.updateLocalsDict( _python_var_get_date_error_message.updateLocalsDict( _python_var_get_unique_error_message.updateLocalsDict( _python_var_validate_unique.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_save.updateLocalsDict( _python_var_save_existing.updateLocalsDict( _python_var_save_new.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var__construct_form.updateLocalsDict( _python_var__existing_object.updateLocalsDict( _python_var_initial_form_count.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_auto_id, PyObject *_python_par_prefix, PyObject *_python_par_queryset, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_auto_id( _python_str_plain_auto_id, _python_par_auto_id );
    PyObjectLocalParameterVariableNoDel _python_var_prefix( _python_str_plain_prefix, _python_par_prefix );
    PyObjectLocalParameterVariableNoDel _python_var_queryset( _python_str_plain_queryset, _python_par_queryset );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_8b86a1482990b8d4fbdc63d7a64f1762, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 492 );
        {
                PyObject *tmp_identifier = _python_var_queryset.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_queryset );
        }
        frame_guard.setLineNumber( 493 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_initial, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_initial_extra );
        }
        frame_guard.setLineNumber( 494 );
        {
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper0 make_dict3;
            PyObjectTempKeeper0 make_dict5;
            _python_var_defaults.assign1( ( make_dict1.assign( _python_var_data.asObject() ), make_dict3.assign( _python_var_files.asObject() ), make_dict5.assign( _python_var_auto_id.asObject() ), MAKE_DICT4( make_dict1.asObject0(), _python_unicode_plain_data, make_dict3.asObject0(), _python_unicode_plain_files, make_dict5.asObject0(), _python_unicode_plain_auto_id, _python_var_prefix.asObject(), _python_unicode_plain_prefix ) ) );
        }
        frame_guard.setLineNumber( 495 );
        {
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 496 );
        {
            PyObjectTempKeeper1 call_tmp13;
            PyObjectTempKeeper0 super11;
            DECREASE_REFCOUNT( ( call_tmp13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super11.assign( _mvar_django__forms__models_BaseModelFormSet.asObject0() ), BUILTIN_SUPER( super11.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp13.asObject(), _python_var_defaults.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_queryset.updateLocalsDict( _python_var_prefix.updateLocalsDict( _python_var_auto_id.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_auto_id = NULL;
    PyObject *_python_par_prefix = NULL;
    PyObject *_python_par_queryset = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument data was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_data );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_data == NULL );

            _python_par_data = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_data );

            kw_found += 1;
        }
    }

    // Check if argument files was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_files );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_files == NULL );

            _python_par_files = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_files );

            kw_found += 1;
        }
    }

    // Check if argument auto_id was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_auto_id );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_auto_id == NULL );

            _python_par_auto_id = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_auto_id );

            kw_found += 1;
        }
    }

    // Check if argument prefix was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_prefix );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_prefix == NULL );

            _python_par_prefix = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_prefix );

            kw_found += 1;
        }
    }

    // Check if argument queryset was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_queryset );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_queryset == NULL );

            _python_par_queryset = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_queryset );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_auto_id != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_id'" );
             goto error_exit;
         }

        _python_par_auto_id = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_prefix != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefix'" );
             goto error_exit;
         }

        _python_par_prefix = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_queryset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'queryset'" );
             goto error_exit;
         }

        _python_par_queryset = INCREASE_REFCOUNT( args[ 5 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_data == NULL )
    {
        _python_par_data = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_data );
    }
    if ( _python_par_files == NULL )
    {
        _python_par_files = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_files );
    }
    if ( _python_par_auto_id == NULL )
    {
        _python_par_auto_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_auto_id );
    }
    if ( _python_par_prefix == NULL )
    {
        _python_par_prefix = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_prefix );
    }
    if ( _python_par_queryset == NULL )
    {
        _python_par_queryset = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_queryset );
    }


    return impl_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_data, _python_par_files, _python_par_auto_id, _python_par_prefix, _python_par_queryset, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_auto_id );
    Py_XDECREF( _python_par_prefix );
    Py_XDECREF( _python_par_queryset );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_fed72baeb64361b35c6484b6d3cb69a6, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 500 );
        if ( (!( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_data ) ).asObject() ) || CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_files ) ).asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 501 );
            return BUILTIN_LEN( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ).asObject() ) ).asObject() );
        }
        frame_guard.setLineNumber( 502 );
        {
            PyObjectTempKeeper0 super1;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_BaseModelFormSet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_initial_form_count ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "initial_form_count() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "initial_form_count() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_pk )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_pk( _python_str_plain_pk, _python_par_pk );
    PyObjectLocalVariable _python_var_o( _python_str_plain_o );

    // Actual function code.
    static PyFrameObject *frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_316eb8d2d6b63b8ef0a84c40264c70d1, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 505 );
        if ( (!( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_unicode_plain__object_dict ) )) )
        {
            frame_guard.setLineNumber( 506 );
            {
                    PyObjectTemporary tmp_identifier( TO_DICT( PyObjectTemporary( impl_listcontr_1_of_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ).asObject() ) ).asObject() ), _python_var_o ) ).asObject(), NULL ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__object_dict );
            }
        }
        frame_guard.setLineNumber( 507 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__object_dict ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_pk.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_pk.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_o.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_pk = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_existing_object() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_existing_object() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_pk == key )
            {
                if (unlikely( _python_par_pk ))
                {
                    PyErr_Format( PyExc_TypeError, "_existing_object() got multiple values for keyword argument 'pk'" );
                    goto error_exit;
                }

                _python_par_pk = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_existing_object() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_pk, key ) )
            {
                if (unlikely( _python_par_pk ))
                {
                    PyErr_Format( PyExc_TypeError, "_existing_object() got multiple values for keyword argument 'pk'" );
                    goto error_exit;
                }

                _python_par_pk = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_existing_object() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_existing_object() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_existing_object() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_existing_object() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_existing_object() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_existing_object() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_existing_object() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_existing_object() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_existing_object() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_existing_object() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_existing_object() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_existing_object() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_existing_object() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_existing_object() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_pk != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_existing_object() got multiple values for keyword argument 'pk'" );
             goto error_exit;
         }

        _python_par_pk = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_pk );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_pk );

    return NULL;
}

static PyObject *dparse_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_o )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 506 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 506 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_o.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 make_tuple1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( python_closure_o.asObject(), _python_str_plain_pk ) ), MAKE_TUPLE2( make_tuple1.asObject0(), python_closure_o.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_i, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_i( _python_str_plain_i, _python_par_i );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_connections( _python_str_plain_connections );
    PyObjectLocalVariable _python_var_pk_key( _python_str_plain_pk_key );
    PyObjectLocalVariable _python_var_pk( _python_str_plain_pk );
    PyObjectLocalVariable _python_var_pk_field( _python_str_plain_pk_field );

    // Actual function code.
    static PyFrameObject *frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_44e6d30c964381966b9203dbdc054436, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 510 );
        {
            PyObjectTempKeeper0 cmp14;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_bound ) ).asObject() ) && ( cmp14.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp14.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_form_count ) ).asObject() ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 513 );
            _python_var_connections.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_kwargs.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_pk_field.updateLocalsDict( _python_var_pk.updateLocalsDict( _python_var_pk_key.updateLocalsDict( _python_var_connections.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_connections_list, _python_int_0 ) ).asObject(), _python_str_plain_connections ) );
            frame_guard.setLineNumber( 514 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper1 make_tuple3;
                _python_var_pk_key.assign1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_ffc99a244604bec334b1a0423370fbc8, PyObjectTemporary( ( make_tuple3.assign( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_add_prefix ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_i.asObject() ) ) ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) );
            }
            frame_guard.setLineNumber( 515 );
            {
                PyObjectTempKeeper1 subscr5;
                _python_var_pk.assign1( ( subscr5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_data ) ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), _python_var_pk_key.asObject() ) ) );
            }
            frame_guard.setLineNumber( 516 );
            _python_var_pk_field.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) );
            frame_guard.setLineNumber( 517 );
            {
                PyObjectTempKeeper1 call10;
                PyObjectTempKeeper1 call9;
                PyObjectTempKeeper0 subscr7;
                _python_var_pk.assign1( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_pk_field.asObject(), _python_str_plain_get_db_prep_lookup ) ), call10.assign( MAKE_TUPLE2( _python_unicode_plain_exact, _python_var_pk.asObject() ) ), CALL_FUNCTION( call9.asObject0(), call10.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( ( subscr7.assign( _python_var_connections.asObject() ), LOOKUP_SUBSCRIPT( subscr7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ).asObject() ) ).asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_connection ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 519 );
            if ( BUILTIN_ISINSTANCE_BOOL( _python_var_pk.asObject(), LOOKUP_BUILTIN( _python_str_plain_list ) ) )
            {
                frame_guard.setLineNumber( 520 );
                _python_var_pk.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_pk.asObject(), _python_int_0, 0 ) );
            }
            frame_guard.setLineNumber( 521 );
            {
                PyObjectTempKeeper1 call12;
                {
                    PyObjectTemporary tmp_identifier( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__existing_object ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_pk.asObject() ) ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_instance );
            }
            }
        }
        }
        frame_guard.setLineNumber( 522 );
        {
            PyObjectTempKeeper0 cmp18;
            if ( ( ( cmp18.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp18.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_form_count ) ).asObject() ) ).asObject() ) ) && (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_instance ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 523 );
            {
                PyObjectTempKeeper1 subscr16;
                {
                    PyObjectTemporary tmp_identifier( ( subscr16.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ).asObject() ) ), LOOKUP_SUBSCRIPT( subscr16.asObject0(), _python_var_i.asObject() ) ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_instance );
            }
            }
        }
        }
        frame_guard.setLineNumber( 524 );
        {
            PyObjectTempKeeper0 cmp24;
            if ( ( ( cmp24.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_GE( cmp24.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_form_count ) ).asObject() ) ).asObject() ) ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_extra ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 526 );
            try
            {
                frame_guard.setLineNumber( 527 );
                {
                    PyObjectTempKeeper0 op20;
                    PyObjectTempKeeper1 subscr22;
                    {
                        PyObjectTemporary tmp_identifier( ( subscr22.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_extra ) ), LOOKUP_SUBSCRIPT( subscr22.asObject0(), PyObjectTemporary( ( op20.assign( _python_var_i.asObject() ), BINARY_OPERATION_SUB( op20.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_form_count ) ).asObject() ) ).asObject() ) ) ).asObject() ) ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_initial );
                }
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( PyExc_IndexError ) )
                {

                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        }
        frame_guard.setLineNumber( 530 );
        {
            PyObjectTempKeeper1 call_tmp28;
            PyObjectTempKeeper1 call_tmp29;
            PyObjectTempKeeper0 super26;
            return ( call_tmp28.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super26.assign( _mvar_django__forms__models_BaseModelFormSet.asObject0() ), BUILTIN_SUPER( super26.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__construct_form ) ), call_tmp29.assign( MAKE_TUPLE1( _python_var_i.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp28.asObject(), call_tmp29.asObject(), _python_var_kwargs.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_pk_field.updateLocalsDict( _python_var_pk.updateLocalsDict( _python_var_pk_key.updateLocalsDict( _python_var_connections.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_i = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_construct_form() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_construct_form() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_construct_form() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument i was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_i );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_i == NULL );

            _python_par_i = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_i );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_construct_form() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_construct_form() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_construct_form() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_i != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_construct_form() got multiple values for keyword argument 'i'" );
             goto error_exit;
         }

        _python_par_i = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_i, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_i );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_f883adeb0e49d86a44f25f7a5d0ea128, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 533 );
        if ( (!( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_unicode_plain__queryset ) )) )
        {
            frame_guard.setLineNumber( 534 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 535 );
                _python_var_qs.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) );
            }
            else
            {
                frame_guard.setLineNumber( 537 );
                _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_get_queryset ) ).asObject() ) );
            }
            frame_guard.setLineNumber( 542 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_ordered ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 543 );
                {
                    PyObjectTempKeeper1 call1;
                    _python_var_qs.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_order_by ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) );
                }
            }
            frame_guard.setLineNumber( 548 );
            {
                    PyObject *tmp_identifier = _python_var_qs.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__queryset );
            }
        }
        frame_guard.setLineNumber( 549 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__queryset );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_qs.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_form, PyObject *_python_par_commit )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );

    // Actual function code.
    static PyFrameObject *frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_a88b246f5a348452eb85df4b5eaa27a6, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 553 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_save ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_commit.asObject(), _python_str_plain_commit ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_commit.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_commit = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_new() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_new() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_new() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_new() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_commit );
    }


    return impl_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_form, _python_par_commit );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_commit );

    return NULL;
}

static PyObject *dparse_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_form, PyObject *_python_par_instance, PyObject *_python_par_commit )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );

    // Actual function code.
    static PyFrameObject *frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_90960dfebe4091909e67c9dd6541a9af, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 557 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_save ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_commit.asObject(), _python_str_plain_commit ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_commit.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_commit = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_existing() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_existing() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_existing() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_existing() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_existing() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_existing() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_existing() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_existing() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_existing() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_existing() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_existing() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_existing() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_existing() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_existing() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_commit );
    }


    return impl_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_form, _python_par_instance, _python_par_commit );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_commit );

    return NULL;
}

static PyObject *dparse_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_commit )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );
    PyObjectLocalVariable _python_var_save_m2m( _python_str_plain_save_m2m );

    // Actual function code.
    static PyFrameObject *frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_57727438c7f94c877101ca1046bdccee, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 563 );
        if ( (!( CHECK_IF_TRUE( _python_var_commit.asObject() ) )) )
        {
            frame_guard.setLineNumber( 564 );
            SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_saved_forms );
            _python_var_save_m2m.assign1( MAKE_FUNCTION_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( _python_var_self ) );
            frame_guard.setLineNumber( 568 );
            {
                    PyObject *tmp_identifier = _python_var_save_m2m.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_save_m2m );
            }
        }
        frame_guard.setLineNumber( 569 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 op5;
            return ( op5.assign( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_save_existing_objects ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_commit.asObject() ) ) ), BINARY_OPERATION_ADD( op5.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_save_new_objects ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_commit.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_commit.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_save_m2m.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_commit = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "save() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_commit );
    }


    return impl_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_commit );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_commit );

    return NULL;
}

static PyObject *dparse_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self )
{
    // The context of the function.
    struct _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *_python_context = (struct _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable _python_var_form( _python_str_plain_form );

    // Actual function code.
    static PyFrameObject *frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_a3186c07a305464a023b4b4bd77262f8, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 566 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_saved_forms ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 566 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_form.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 567 );
                DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_save_m2m ) ).asObject() ) );

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_context->python_closure_self.updateLocalsDict( _python_var_form.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        PyErr_Format( PyExc_TypeError, "save_m2m() takes no arguments (%zd given)", args_given + kw_size );
#else
        if ( kw_size == 0 )
        {
           PyErr_Format( PyExc_TypeError, "save_m2m() takes 0 positional arguments but %zd was given", args_given );
        }
        else
        {
           PyObject *tmp_iter = PyObject_GetIter( kw );
           PyObject *tmp_arg_name = PyIter_Next( tmp_iter );
           Py_DECREF( tmp_iter );

           PyErr_Format( PyExc_TypeError, "save_m2m() got an unexpected keyword argument '%s'", Nuitka_String_AsString( tmp_arg_name ) );

           Py_DECREF( tmp_arg_name );
        }
#endif
        goto error_exit;
    }


    return impl_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0)
    {
        return impl_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( self );
    }
    else
    {
        PyObject *result = fparse_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_9694a0f575033025bd4182b20014a9b8, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 574 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validate_unique ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_all_unique_checks( _python_str_plain_all_unique_checks );
    PyObjectLocalVariable _python_var_all_date_checks( _python_str_plain_all_date_checks );
    PyObjectLocalVariable _python_var_forms_to_delete( _python_str_plain_forms_to_delete );
    PyObjectLocalVariable _python_var_valid_forms( _python_str_plain_valid_forms );
    PyObjectLocalVariable _python_var_form( _python_str_plain_form );
    PyObjectLocalVariable _python_var_exclude( _python_str_plain_exclude );
    PyObjectLocalVariable _python_var_unique_checks( _python_str_plain_unique_checks );
    PyObjectLocalVariable _python_var_date_checks( _python_str_plain_date_checks );
    PyObjectLocalVariable _python_var_errors( _python_str_plain_errors );
    PyObjectLocalVariable _python_var_uclass( _python_str_plain_uclass );
    PyObjectLocalVariable _python_var_unique_check( _python_str_plain_unique_check );
    PyObjectLocalVariable _python_var_seen_data( _python_str_plain_seen_data );
    PyObjectLocalVariable _python_var_row_data( _python_str_plain_row_data );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_date_check( _python_str_plain_date_check );
    PyObjectLocalVariable _python_var_lookup( _python_str_plain_lookup );
    PyObjectLocalVariable _python_var_unique_for( _python_str_plain_unique_for );
    PyObjectLocalVariable _python_var_date( _python_str_plain_date );
    PyObjectLocalVariable _python_var_date_data( _python_str_plain_date_data );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );

    // Actual function code.
    static PyFrameObject *frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_920e855d3efa23b8a97f159694445188, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 578 );
        _python_var_all_unique_checks.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
        frame_guard.setLineNumber( 579 );
        _python_var_all_date_checks.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
        frame_guard.setLineNumber( 580 );
        _python_var_forms_to_delete.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deleted_forms ) );
        frame_guard.setLineNumber( 581 );
        _python_var_valid_forms.assign1( impl_listcontr_1_of_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_forms ) ).asObject() ), _python_var_form, _python_var_forms_to_delete ) );
        {
            frame_guard.setLineNumber( 582 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_valid_forms.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 582 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_form.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 583 );
                _python_var_exclude.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__get_validation_exclusions ) ).asObject() ) );
                {
                    frame_guard.setLineNumber( 584 );
                    PyObject *_tmp_python_tmp_source_iter;
                    {
                        PyObjectTempKeeper1 call1;
                        _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain__get_unique_checks ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_exclude.asObject(), _python_str_plain_exclude ) ).asObject() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    _python_var_unique_checks.assign0( _python_tmp_element_1.asObject() );
                    _python_var_date_checks.assign0( _python_tmp_element_2.asObject() );
                }
                frame_guard.setLineNumber( 585 );
                {
                    PyObjectTempKeeper1 call4;
                    _python_var_all_unique_checks.assign1( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_all_unique_checks.asObject(), _python_str_plain_union ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), _python_var_unique_checks.asObject() ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 586 );
                {
                    PyObjectTempKeeper1 call6;
                    _python_var_all_date_checks.assign1( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_all_date_checks.asObject(), _python_str_plain_union ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), _python_var_date_checks.asObject() ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        _python_var_errors.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 590 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_all_unique_checks.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 590 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 590 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_uclass.assign0( _python_tmp_element_1.asObject() );
                        _python_var_unique_check.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 591 );
                _python_var_seen_data.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
                {
                    frame_guard.setLineNumber( 592 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_valid_forms.asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 592 );
                            PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_3 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                            _python_var_form.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 594 );
                        _python_var_row_data.assign1( TO_TUPLE( PyObjectTemporary( impl_listcontr_2_of_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( MAKE_ITERATOR( _python_var_unique_check.asObject() ), _python_var_field, _python_var_form ) ).asObject() ) );
                        frame_guard.setLineNumber( 595 );
                        if ( ( CHECK_IF_TRUE( _python_var_row_data.asObject() ) && SEQUENCE_CONTAINS_NOT_BOOL( Py_None, _python_var_row_data.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 597 );
                            {
                                PyObjectTempKeeper0 cmp16;
                                if ( ( cmp16.assign( _python_var_row_data.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp16.asObject0(), _python_var_seen_data.asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 600 );
                                {
                                    PyObjectTempKeeper1 call10;
                                    PyObjectTempKeeper1 call8;
                                    DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_unique_error_message ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_unique_check.asObject() ) ) ).asObject() ) ) );
                                }
                                frame_guard.setLineNumber( 601 );
                                {
                                    PyObjectTempKeeper1 call12;
                                    {
                                        PyObjectTemporary tmp_identifier( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_class ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), PyObjectTemporary( MAKE_LIST1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_form_error ) ).asObject() ) ) ).asObject() ) ) );
                                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__errors ) );
                                        SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _mvar_django__forms__models_NON_FIELD_ERRORS.asObject0() );
                                }
                                }
                                {
                                    frame_guard.setLineNumber( 603 );
                                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_unique_check.asObject() ) );
                                    while( true )
                                    {
                                        {
                                            frame_guard.setLineNumber( 603 );
                                            PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                            if ( _tmp_unpack_4 == NULL )
                                            {
                                                break;
                                            }
                                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                                            _python_var_field.assign0( _python_tmp_iter_value.asObject() );
                                        }
                                        frame_guard.setLineNumber( 604 );
                                        {
                                            PyObjectTempKeeper0 cmp14;
                                            if ( ( cmp14.assign( _python_var_field.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp14.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) ).asObject() ) ) )
                                        {
                                            frame_guard.setLineNumber( 605 );
                                            {
                                                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) );
                                                    DEL_SUBSCRIPT( tmp_subscribed.asObject(), _python_var_field.asObject() );
                                            }
                                        }
                                        }

                                       CONSIDER_THREADING();
                                    }
                                }
                            }
                            }
                            frame_guard.setLineNumber( 607 );
                            {
                                PyObjectTempKeeper1 call18;
                                DECREASE_REFCOUNT( ( call18.assign( LOOKUP_ATTRIBUTE( _python_var_seen_data.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), _python_var_row_data.asObject() ) ) );
                            }
                        }

                       CONSIDER_THREADING();
                    }
                }

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 609 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_all_date_checks.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 609 );
                    PyObject *_tmp_unpack_5 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_5 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_5 );
                    _python_var_date_check.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 610 );
                _python_var_seen_data.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
                {
                    frame_guard.setLineNumber( 611 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_var_date_check.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                    PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
                    _python_var_uclass.assign0( _python_tmp_element_1.asObject() );
                    _python_var_lookup.assign0( _python_tmp_element_2.asObject() );
                    _python_var_field.assign0( _python_tmp_element_3.asObject() );
                    _python_var_unique_for.assign0( _python_tmp_element_4.asObject() );
                }
                {
                    frame_guard.setLineNumber( 612 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_valid_forms.asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 612 );
                            PyObject *_tmp_unpack_6 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_6 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_6 );
                            _python_var_form.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 614 );
                        {
                            PyObjectTempKeeper1 subscr44;
                            PyObjectTempKeeper1 subscr46;
                            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) ).asObject() ) && ( ( PyObjectTemporary( ( subscr44.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) ), LOOKUP_SUBSCRIPT( subscr44.asObject0(), _python_var_field.asObject() ) ) ).asObject() != Py_None ) && ( PyObjectTemporary( ( subscr46.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) ), LOOKUP_SUBSCRIPT( subscr46.asObject0(), _python_var_unique_for.asObject() ) ) ).asObject() != Py_None ) ) ) )
                        {
                            frame_guard.setLineNumber( 617 );
                            if ( RICH_COMPARE_BOOL_EQ( _python_var_lookup.asObject(), _python_unicode_plain_date ) )
                            {
                                frame_guard.setLineNumber( 618 );
                                {
                                    PyObjectTempKeeper1 subscr20;
                                    _python_var_date.assign1( ( subscr20.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) ), LOOKUP_SUBSCRIPT( subscr20.asObject0(), _python_var_unique_for.asObject() ) ) );
                                }
                                frame_guard.setLineNumber( 619 );
                                {
                                    PyObjectTempKeeper1 make_tuple22;
                                    PyObjectTempKeeper1 make_tuple23;
                                    _python_var_date_data.assign1( ( make_tuple22.assign( LOOKUP_ATTRIBUTE( _python_var_date.asObject(), _python_str_plain_year ) ), make_tuple23.assign( LOOKUP_ATTRIBUTE( _python_var_date.asObject(), _python_str_plain_month ) ), MAKE_TUPLE3( make_tuple22.asObject0(), make_tuple23.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_date.asObject(), _python_str_plain_day ) ).asObject() ) ) );
                                }
                            }
                            else
                            {
                                frame_guard.setLineNumber( 623 );
                                {
                                    PyObjectTempKeeper1 getattr27;
                                    PyObjectTempKeeper1 subscr25;
                                    _python_var_date_data.assign1( MAKE_TUPLE1( PyObjectTemporary( ( getattr27.assign( ( subscr25.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) ), LOOKUP_SUBSCRIPT( subscr25.asObject0(), _python_var_unique_for.asObject() ) ) ), BUILTIN_GETATTR( getattr27.asObject0(), _python_var_lookup.asObject(), NULL ) ) ).asObject() ) );
                                }
                            }
                            frame_guard.setLineNumber( 624 );
                            {
                                PyObjectTempKeeper1 op32;
                                PyObjectTempKeeper1 subscr30;
                                _python_var_data.assign1( ( op32.assign( MAKE_TUPLE1( PyObjectTemporary( ( subscr30.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) ), LOOKUP_SUBSCRIPT( subscr30.asObject0(), _python_var_field.asObject() ) ) ).asObject() ) ), BINARY_OPERATION_ADD( op32.asObject0(), _python_var_date_data.asObject() ) ) );
                            }
                            frame_guard.setLineNumber( 626 );
                            {
                                PyObjectTempKeeper0 cmp40;
                                if ( ( cmp40.assign( _python_var_data.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp40.asObject0(), _python_var_seen_data.asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 629 );
                                {
                                    PyObjectTempKeeper1 call34;
                                    PyObjectTempKeeper1 call36;
                                    DECREASE_REFCOUNT( ( call36.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call36.asObject0(), PyObjectTemporary( ( call34.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_date_error_message ) ), CALL_FUNCTION_WITH_ARGS( call34.asObject0(), _python_var_date_check.asObject() ) ) ).asObject() ) ) );
                                }
                                frame_guard.setLineNumber( 630 );
                                {
                                    PyObjectTempKeeper1 call38;
                                    {
                                        PyObjectTemporary tmp_identifier( ( call38.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_class ) ), CALL_FUNCTION_WITH_ARGS( call38.asObject0(), PyObjectTemporary( MAKE_LIST1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_form_error ) ).asObject() ) ) ).asObject() ) ) );
                                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__errors ) );
                                        SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _mvar_django__forms__models_NON_FIELD_ERRORS.asObject0() );
                                }
                                }
                                frame_guard.setLineNumber( 632 );
                                {
                                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_cleaned_data ) );
                                        DEL_SUBSCRIPT( tmp_subscribed.asObject(), _python_var_field.asObject() );
                                }
                            }
                            }
                            frame_guard.setLineNumber( 634 );
                            {
                                PyObjectTempKeeper1 call42;
                                DECREASE_REFCOUNT( ( call42.assign( LOOKUP_ATTRIBUTE( _python_var_seen_data.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call42.asObject0(), _python_var_data.asObject() ) ) );
                            }
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 635 );
        if ( CHECK_IF_TRUE( _python_var_errors.asObject() ) )
        {
            frame_guard.setLineNumber( 636 );
            {
                PyObjectTempKeeper0 call48;
                {
                    PyObjectTemporary tmp_exception_type( ( call48.assign( _mvar_django__forms__models_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call48.asObject0(), _python_var_errors.asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_date_data.updateLocalsDict( _python_var_date.updateLocalsDict( _python_var_unique_for.updateLocalsDict( _python_var_lookup.updateLocalsDict( _python_var_date_check.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_row_data.updateLocalsDict( _python_var_seen_data.updateLocalsDict( _python_var_unique_check.updateLocalsDict( _python_var_uclass.updateLocalsDict( _python_var_errors.updateLocalsDict( _python_var_date_checks.updateLocalsDict( _python_var_unique_checks.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_valid_forms.updateLocalsDict( _python_var_forms_to_delete.updateLocalsDict( _python_var_all_date_checks.updateLocalsDict( _python_var_all_unique_checks.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate_unique() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate_unique() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate_unique() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate_unique() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_form,PyObjectLocalVariable &python_closure_forms_to_delete )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 581 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 581 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_form.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_form.asObject(), _python_str_plain_is_valid ) ).asObject() ) ).asObject() ) && ( cmp1.assign( python_closure_form.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), python_closure_forms_to_delete.asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 581 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_form.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_field,PyObjectLocalVariable &python_closure_form )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 594 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 594 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_field.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp3;
                    if ( ( cmp3.assign( python_closure_field.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_form.asObject(), _python_str_plain_cleaned_data ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 594 );
                    {
                        PyObjectTempKeeper1 subscr1;
                        APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( python_closure_form.asObject(), _python_str_plain_cleaned_data ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), python_closure_field.asObject() ) ) ).asObject() ), Py_None;
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_unique_check )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_unique_check( _python_str_plain_unique_check, _python_par_unique_check );

    // Actual function code.
    static PyFrameObject *frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_42c35422ef105f6b651f2988d06d7116, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 639 );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_unique_check.asObject() ) ).asObject(), _python_int_pos_1 ) )
        {
            frame_guard.setLineNumber( 640 );
            {
                PyObjectTempKeeper1 op1;
                return ( op1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models_ugettext.asObject0(), _python_unicode_digest_ff33eaf44f6c2de5dfbe025f239e52a6 ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_unique_check.asObject(), _python_int_0, 0 ) ).asObject(), _python_unicode_plain_field ) ).asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 644 );
            {
                PyObjectTempKeeper1 call3;
                PyObjectTempKeeper0 call5;
                PyObjectTempKeeper0 call6;
                PyObjectTempKeeper1 op8;
                return ( op8.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models_ugettext.asObject0(), _python_unicode_digest_8b6f5124fac558aa866a6a2f189b3a3d ) ), BINARY_OPERATION_REMAINDER( op8.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( ( call5.assign( _mvar_django__forms__models_get_text_list.asObject0() ), call6.assign( _python_var_unique_check.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_six.asObject0(), _python_str_plain_text_type ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models__.asObject0(), _python_unicode_plain_and ) ).asObject() ) ) ).asObject() ) ) ).asObject(), _python_unicode_plain_field ) ).asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_unique_check.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_unique_check = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_unique_check == key )
            {
                if (unlikely( _python_par_unique_check ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'unique_check'" );
                    goto error_exit;
                }

                _python_par_unique_check = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_unique_check, key ) )
            {
                if (unlikely( _python_par_unique_check ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'unique_check'" );
                    goto error_exit;
                }

                _python_par_unique_check = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_unique_error_message() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_unique_check != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'unique_check'" );
             goto error_exit;
         }

        _python_par_unique_check = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_unique_check );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_unique_check );

    return NULL;
}

static PyObject *dparse_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_date_check )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_date_check( _python_str_plain_date_check, _python_par_date_check );

    // Actual function code.
    static PyFrameObject *frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_2d0e636a0564e17afe7cff768fab2e9b, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 650 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            PyObjectTempKeeper1 op9;
            return ( op9.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models_ugettext.asObject0(), _python_unicode_digest_e83306aae115c31e8a28c55ca521d8b9 ) ), BINARY_OPERATION_REMAINDER( op9.asObject0(), PyObjectTemporary( ( make_dict3.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_date_check.asObject(), _python_int_pos_2, 2 ) ), make_dict5.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_date_check.asObject(), _python_int_pos_3, 3 ) ), MAKE_DICT3( make_dict3.asObject0(), _python_unicode_plain_field_name, make_dict5.asObject0(), _python_unicode_plain_date_field, PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_six.asObject0(), _python_str_plain_text_type ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_date_check.asObject(), _python_int_pos_1, 1 ) ).asObject() ) ) ).asObject(), _python_unicode_plain_lookup ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_date_check.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_date_check = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_date_error_message() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_date_error_message() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_date_check == key )
            {
                if (unlikely( _python_par_date_check ))
                {
                    PyErr_Format( PyExc_TypeError, "get_date_error_message() got multiple values for keyword argument 'date_check'" );
                    goto error_exit;
                }

                _python_par_date_check = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_date_error_message() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_date_check, key ) )
            {
                if (unlikely( _python_par_date_check ))
                {
                    PyErr_Format( PyExc_TypeError, "get_date_error_message() got multiple values for keyword argument 'date_check'" );
                    goto error_exit;
                }

                _python_par_date_check = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_date_error_message() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_date_error_message() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_date_error_message() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_date_error_message() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_date_error_message() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_date_error_message() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_date_error_message() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_date_error_message() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_date_error_message() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_date_error_message() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_date_error_message() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_date_error_message() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_date_error_message() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_date_error_message() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_date_check != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_date_error_message() got multiple values for keyword argument 'date_check'" );
             goto error_exit;
         }

        _python_par_date_check = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_date_check );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_date_check );

    return NULL;
}

static PyObject *dparse_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_ec70041aad790e36d825e07375b321b8, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 658 );
        return CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models_ugettext.asObject0(), _python_unicode_digest_a4b2f2d7d0fb544232e3bd15782262ba );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_form_error() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_form_error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_form_error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_form_error() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_form_error() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_form_error() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_form_error() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_form_error() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_form_error() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_form_error() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_form_error() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_form_error() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_form_error() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_form_error() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_form_error() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_form_error() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_form_error() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_commit )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );
    PyObjectLocalVariable _python_var_saved_instances( _python_str_plain_saved_instances );
    PyObjectLocalVariable _python_var_forms_to_delete( _python_str_plain_forms_to_delete );
    PyObjectLocalVariable _python_var_form( _python_str_plain_form );
    PyObjectLocalVariable _python_var_pk_name( _python_str_plain_pk_name );
    PyObjectLocalVariable _python_var_raw_pk_value( _python_str_plain_raw_pk_value );
    PyObjectLocalVariable _python_var_pk_value( _python_str_plain_pk_value );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_4224577704812343a6a4fc5c8b3f98f0, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 661 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_changed_objects );
        frame_guard.setLineNumber( 662 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_deleted_objects );
        frame_guard.setLineNumber( 663 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_forms ) ).asObject() ) )) )
        {
            return PyList_New( 0 );
        }
        _python_var_saved_instances.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 667 );
        _python_var_forms_to_delete.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deleted_forms ) );
        {
            frame_guard.setLineNumber( 668 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_forms ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 668 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_form.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 669 );
                _python_var_pk_name.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__pk_field ) ).asObject(), _python_str_plain_name ) );
                frame_guard.setLineNumber( 670 );
                {
                    PyObjectTempKeeper1 call1;
                    _python_var_raw_pk_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__raw_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_pk_name.asObject() ) ) );
                }
                frame_guard.setLineNumber( 674 );
                {
                    PyObjectTempKeeper1 call5;
                    PyObjectTempKeeper1 subscr3;
                    _python_var_pk_value.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_fields ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_pk_name.asObject() ) ) ).asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_raw_pk_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 675 );
                {
                    PyObjectTempKeeper0 getattr7;
                    _python_var_pk_value.assign1( ( getattr7.assign( _python_var_pk_value.asObject() ), BUILTIN_GETATTR( getattr7.asObject0(), _python_unicode_plain_pk, _python_var_pk_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 677 );
                {
                    PyObjectTempKeeper1 call10;
                    _python_var_obj.assign1( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__existing_object ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_pk_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 678 );
                {
                    PyObjectTempKeeper0 cmp14;
                    if ( ( cmp14.assign( _python_var_form.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp14.asObject0(), _python_var_forms_to_delete.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 679 );
                    {
                        PyObjectTempKeeper1 call12;
                        DECREASE_REFCOUNT( ( call12.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_deleted_objects ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_obj.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 680 );
                    DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_delete ) ).asObject() ) );
                    frame_guard.setLineNumber( 681 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 682 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_has_changed ) ).asObject() ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 683 );
                    {
                        PyObjectTempKeeper1 call18;
                        PyObjectTempKeeper0 make_tuple16;
                        DECREASE_REFCOUNT( ( call18.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_changed_objects ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), PyObjectTemporary( ( make_tuple16.assign( _python_var_obj.asObject() ), MAKE_TUPLE2( make_tuple16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_changed_data ) ).asObject() ) ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 684 );
                    {
                        PyObjectTempKeeper1 call22;
                        PyObjectTempKeeper1 call23;
                        PyObjectTempKeeper1 call25;
                        PyObjectTempKeeper0 make_tuple20;
                        DECREASE_REFCOUNT( ( call25.assign( LOOKUP_ATTRIBUTE( _python_var_saved_instances.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), PyObjectTemporary( ( call22.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_save_existing ) ), call23.assign( ( make_tuple20.assign( _python_var_form.asObject() ), MAKE_TUPLE2( make_tuple20.asObject0(), _python_var_obj.asObject() ) ) ), CALL_FUNCTION( call22.asObject0(), call23.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_commit.asObject(), _python_str_plain_commit ) ).asObject() ) ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 685 );
                    if ( (!( CHECK_IF_TRUE( _python_var_commit.asObject() ) )) )
                    {
                        frame_guard.setLineNumber( 686 );
                        {
                            PyObjectTempKeeper1 call27;
                            DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_saved_forms ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_var_form.asObject() ) ) );
                        }
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 687 );
        return _python_var_saved_instances.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_commit.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_pk_value.updateLocalsDict( _python_var_raw_pk_value.updateLocalsDict( _python_var_pk_name.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_forms_to_delete.updateLocalsDict( _python_var_saved_instances.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_commit = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_existing_objects() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing_objects() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_existing_objects() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_existing_objects() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_existing_objects() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_existing_objects() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_existing_objects() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_existing_objects() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save_existing_objects() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_existing_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save_existing_objects() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_existing_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_existing_objects() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_existing_objects() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "save_existing_objects() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_existing_objects() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_existing_objects() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_existing_objects() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_commit );
    }


    return impl_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_commit );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_commit );

    return NULL;
}

static PyObject *dparse_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_commit )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );
    PyObjectLocalVariable _python_var_form( _python_str_plain_form );

    // Actual function code.
    static PyFrameObject *frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_3c233ecabac1d377175122815f5bcc30, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 690 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_new_objects );
        {
            frame_guard.setLineNumber( 691 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_forms ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 691 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_form.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 692 );
                if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_has_changed ) ).asObject() ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 693 );
                    CONSIDER_THREADING(); continue;
                }
                frame_guard.setLineNumber( 696 );
                {
                    PyObjectTempKeeper1 call1;
                    if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_can_delete ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__should_delete_form ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_form.asObject() ) ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 697 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 698 );
                {
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper1 call4;
                    PyObjectTempKeeper1 call6;
                    DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_new_objects ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_save_new ) ), call4.assign( MAKE_TUPLE1( _python_var_form.asObject() ) ), CALL_FUNCTION( call3.asObject0(), call4.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_commit.asObject(), _python_str_plain_commit ) ).asObject() ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 699 );
                if ( (!( CHECK_IF_TRUE( _python_var_commit.asObject() ) )) )
                {
                    frame_guard.setLineNumber( 700 );
                    {
                        PyObjectTempKeeper1 call8;
                        DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_saved_forms ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_form.asObject() ) ) );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 701 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_new_objects );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_commit.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_form.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_commit = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_new_objects() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new_objects() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new_objects() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_new_objects() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_new_objects() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_new_objects() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_new_objects() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_new_objects() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save_new_objects() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_new_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "save_new_objects() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_new_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_new_objects() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_new_objects() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "save_new_objects() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_new_objects() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new_objects() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new_objects() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_commit );
    }


    return impl_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_commit );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_commit );

    return NULL;
}

static PyObject *dparse_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_form, PyObject *_python_par_index )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_index( _python_str_plain_index, _python_par_index );
    PyObjectSharedLocalVariable _python_var_AutoField( _python_str_plain_AutoField );
    PyObjectLocalVariable _python_var_OneToOneField( _python_str_plain_OneToOneField );
    PyObjectLocalVariable _python_var_ForeignKey( _python_str_plain_ForeignKey );
    PyObjectLocalVariable _python_var_pk( _python_str_plain_pk );
    PyObjectSharedLocalVariable _python_var_pk_is_not_editable( _python_str_plain_pk_is_not_editable );
    PyObjectLocalVariable _python_var_pk_value( _python_str_plain_pk_value );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );

    // Actual function code.
    static PyFrameObject *frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_3f7932d5e639333afafe793dc32d97c3, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 705 );
        _python_var_AutoField.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_index.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_pk_value.updateLocalsDict( _python_var_pk_is_not_editable.updateLocalsDict( _python_var_pk.updateLocalsDict( _python_var_ForeignKey.updateLocalsDict( _python_var_OneToOneField.updateLocalsDict( _python_var_AutoField.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_a0854412f6801281bfddb1fe3b876fda_list, _python_int_0 ) ).asObject(), _python_str_plain_AutoField ) );
        _python_var_OneToOneField.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_index.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_pk_value.updateLocalsDict( _python_var_pk_is_not_editable.updateLocalsDict( _python_var_pk.updateLocalsDict( _python_var_ForeignKey.updateLocalsDict( _python_var_OneToOneField.updateLocalsDict( _python_var_AutoField.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_a0854412f6801281bfddb1fe3b876fda_list, _python_int_0 ) ).asObject(), _python_str_plain_OneToOneField ) );
        _python_var_ForeignKey.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_index.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_pk_value.updateLocalsDict( _python_var_pk_is_not_editable.updateLocalsDict( _python_var_pk.updateLocalsDict( _python_var_ForeignKey.updateLocalsDict( _python_var_OneToOneField.updateLocalsDict( _python_var_AutoField.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_a0854412f6801281bfddb1fe3b876fda_list, _python_int_0 ) ).asObject(), _python_str_plain_ForeignKey ) );
        {
            frame_guard.setLineNumber( 706 );
            PyObjectTemporary _python_tmp_assign_source( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) );
            {
                    PyObject *tmp_identifier = _python_tmp_assign_source.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__pk_field );
            }
            _python_var_pk.assign0( _python_tmp_assign_source.asObject() );
        }
        _python_var_pk_is_not_editable.assign1( MAKE_FUNCTION_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( _python_var_AutoField, _python_var_pk_is_not_editable ) );
        frame_guard.setLineNumber( 715 );
        {
            PyObjectTempKeeper0 call21;
            PyObjectTempKeeper1 cmp23;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( ( call21.assign( _python_var_pk_is_not_editable.asObject() ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_var_pk.asObject() ) ) ).asObject() ) || ( cmp23.assign( LOOKUP_ATTRIBUTE( _python_var_pk.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp23.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_fields ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 716 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_is_bound ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 717 );
                _python_var_pk_value.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_pk ) );
            }
            else
            {
                frame_guard.setLineNumber( 719 );
                try
                {
                    frame_guard.setLineNumber( 720 );
                    if ( ( _python_var_index.asObject() != Py_None ) )
                    {
                        frame_guard.setLineNumber( 721 );
                        {
                            PyObjectTempKeeper1 subscr1;
                            _python_var_pk_value.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ).asObject() ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_index.asObject() ) ) ).asObject(), _python_str_plain_pk ) );
                        }
                    }
                    else
                    {
                        _python_var_pk_value.assign0( Py_None );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_IndexError ) )
                    {
                        frame_guard.detachFrame();
                        _python_var_pk_value.assign0( Py_None );
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
            }
            frame_guard.setLineNumber( 726 );
            {
                PyObjectTempKeeper0 isinstance3;
                PyObjectTempKeeper0 isinstance5;
                if ( ( ( isinstance3.assign( _python_var_pk.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _python_var_OneToOneField.asObject() ) ) || ( isinstance5.assign( _python_var_pk.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _python_var_ForeignKey.asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 727 );
                _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_pk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_get_queryset ) ).asObject() ) );
            }
            else
            {
                frame_guard.setLineNumber( 729 );
                _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_get_queryset ) ).asObject() ) );
            }
            }
            frame_guard.setLineNumber( 730 );
            {
                PyObjectTempKeeper1 call7;
                _python_var_qs.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 731 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_widgets ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 732 );
                {
                    PyObjectTempKeeper1 call10;
                    PyObjectTempKeeper1 call9;
                    _python_var_widget.assign1( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_widgets ) ).asObject(), _python_str_plain_get ) ), call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__pk_field ) ).asObject(), _python_str_plain_name ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), _mvar_django__forms__models_HiddenInput.asObject0() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 734 );
                _python_var_widget.assign0( _mvar_django__forms__models_HiddenInput.asObject0() );
            }
            frame_guard.setLineNumber( 735 );
            {
                PyObjectTempKeeper0 call18;
                PyObjectTempKeeper1 call19;
                PyObjectTempKeeper0 make_dict12;
                {
                    PyObjectTemporary tmp_identifier( ( call18.assign( _mvar_django__forms__models_ModelChoiceField.asObject0() ), call19.assign( MAKE_TUPLE1( _python_var_qs.asObject() ) ), CALL_FUNCTION( call18.asObject0(), call19.asObject0(), PyObjectTemporary( ( make_dict12.assign( _python_var_pk_value.asObject() ), MAKE_DICT3( make_dict12.asObject0(), _python_str_plain_initial, Py_False, _python_str_plain_required, _python_var_widget.asObject(), _python_str_plain_widget ) ) ).asObject() ) ) );
                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_fields ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__pk_field ) ).asObject(), _python_str_plain_name ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 736 );
        {
            PyObjectTempKeeper1 call27;
            PyObjectTempKeeper0 call28;
            PyObjectTempKeeper0 super25;
            DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super25.assign( _mvar_django__forms__models_BaseModelFormSet.asObject0() ), BUILTIN_SUPER( super25.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_add_fields ) ), call28.assign( _python_var_form.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), call28.asObject0(), _python_var_index.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_index.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_pk_value.updateLocalsDict( _python_var_pk_is_not_editable.updateLocalsDict( _python_var_pk.updateLocalsDict( _python_var_ForeignKey.updateLocalsDict( _python_var_OneToOneField.updateLocalsDict( _python_var_AutoField.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_index = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_index == key )
            {
                if (unlikely( _python_par_index ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'index'" );
                    goto error_exit;
                }

                _python_par_index = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_index, key ) )
            {
                if (unlikely( _python_par_index ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'index'" );
                    goto error_exit;
                }

                _python_par_index = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_index != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'index'" );
             goto error_exit;
         }

        _python_par_index = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_form, _python_par_index );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_index );

    return NULL;
}

static PyObject *dparse_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_pk )
{
    // The context of the function.
    struct _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *_python_context = (struct _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_pk( _python_str_plain_pk, _python_par_pk );

    // Actual function code.
    static PyFrameObject *frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models );
        }

        frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_393b7a6da7707c0a17b059ef28afcd01, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 713 );
        {
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper0 isinstance1;
            PyObjectTempKeeper1 keeper_0;
            PyObjectTempKeeper1 keeper_1;
            PyObjectTempKeeper1 keeper_2;
            PyObjectTempKeeper0 keeper_3;
            PyObjectTempKeeper0 keeper_4;
            return ( CHECK_IF_TRUE( keeper_4.assign( UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_pk.asObject(), _python_str_plain_editable ) ).asObject() ) ) ) ? INCREASE_REFCOUNT( keeper_4.asObject0() ) : ( CHECK_IF_TRUE( keeper_3.assign( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_pk.asObject(), _python_str_plain_auto_created ) ) ) ? PyObjectTemporary( keeper_0.asObject() ).asObject() : BOOL_FROM( ( isinstance1.assign( _python_var_pk.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), _python_context->python_closure_AutoField.asObject() ) ) ) ) ) ) ? INCREASE_REFCOUNT( keeper_3.asObject0() ) : ( CHECK_IF_TRUE( keeper_2.assign( LOOKUP_ATTRIBUTE( _python_var_pk.asObject(), _python_str_plain_rel ) ) ) ? ( CHECK_IF_TRUE( keeper_1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_pk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_parent_link ) ) ) ? ( call3.assign( _python_context->python_closure_pk_is_not_editable.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_pk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject() ) ) : keeper_1.asObject() ) : keeper_2.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_pk.updateLocalsDict( _python_context->python_closure_pk_is_not_editable.updateLocalsDict( _python_context->python_closure_AutoField.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models );
           frame_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_pk = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "pk_is_not_editable() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_pk == key )
            {
                if (unlikely( _python_par_pk ))
                {
                    PyErr_Format( PyExc_TypeError, "pk_is_not_editable() got multiple values for keyword argument 'pk'" );
                    goto error_exit;
                }

                _python_par_pk = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_pk, key ) )
            {
                if (unlikely( _python_par_pk ))
                {
                    PyErr_Format( PyExc_TypeError, "pk_is_not_editable() got multiple values for keyword argument 'pk'" );
                    goto error_exit;
                }

                _python_par_pk = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "pk_is_not_editable() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "pk_is_not_editable() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_pk != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pk_is_not_editable() got multiple values for keyword argument 'pk'" );
             goto error_exit;
         }

        _python_par_pk = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, _python_par_pk );

error_exit:;

    Py_XDECREF( _python_par_pk );

    return NULL;
}

static PyObject *dparse_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_modelformset_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_model, PyObject *_python_par_form, PyObject *_python_par_formfield_callback, PyObject *_python_par_formset, PyObject *_python_par_extra, PyObject *_python_par_can_delete, PyObject *_python_par_can_order, PyObject *_python_par_max_num, PyObject *_python_par_fields, PyObject *_python_par_exclude, PyObject *_python_par_widgets, PyObject *_python_par_validate_max, PyObject *_python_par_localized_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_formfield_callback( _python_str_plain_formfield_callback, _python_par_formfield_callback );
    PyObjectLocalParameterVariableNoDel _python_var_formset( _python_str_plain_formset, _python_par_formset );
    PyObjectLocalParameterVariableNoDel _python_var_extra( _python_str_plain_extra, _python_par_extra );
    PyObjectLocalParameterVariableNoDel _python_var_can_delete( _python_str_plain_can_delete, _python_par_can_delete );
    PyObjectLocalParameterVariableNoDel _python_var_can_order( _python_str_plain_can_order, _python_par_can_order );
    PyObjectLocalParameterVariableNoDel _python_var_max_num( _python_str_plain_max_num, _python_par_max_num );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_exclude( _python_str_plain_exclude, _python_par_exclude );
    PyObjectLocalParameterVariableNoDel _python_var_widgets( _python_str_plain_widgets, _python_par_widgets );
    PyObjectLocalParameterVariableNoDel _python_var_validate_max( _python_str_plain_validate_max, _python_par_validate_max );
    PyObjectLocalParameterVariableNoDel _python_var_localized_fields( _python_str_plain_localized_fields, _python_par_localized_fields );
    PyObjectLocalVariable _python_var_meta( _python_str_plain_meta );
    PyObjectLocalVariable _python_var_FormSet( _python_str_plain_FormSet );

    // Actual function code.
    static PyFrameObject *frame_function_11_modelformset_factory_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_11_modelformset_factory_of_module_django__forms__models ) )
    {
        if ( frame_function_11_modelformset_factory_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_modelformset_factory_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_11_modelformset_factory_of_module_django__forms__models );
        }

        frame_function_11_modelformset_factory_of_module_django__forms__models = MAKE_FRAME( _codeobj_056969e9c026d5fafdbb61699f459609, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_11_modelformset_factory_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_11_modelformset_factory_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 751 );
        _python_var_meta.assign1( BUILTIN_GETATTR( _python_var_form.asObject(), _python_unicode_plain_Meta, Py_None ) );
        frame_guard.setLineNumber( 752 );
        if ( ( _python_var_meta.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 753 );
            _python_var_meta.assign1( BUILTIN_TYPE3( _python_str_digest_47e28c49f6b3257d092228301adff2a2, _python_str_plain_Meta, PyObjectTemporary( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) ).asObject(), PyObjectTemporary( PyDict_New() ).asObject() ) );
        }
        frame_guard.setLineNumber( 754 );
        {
            PyObjectTempKeeper0 getattr4;
            PyObjectTempKeeper0 getattr7;
            if ( ( ( PyObjectTemporary( ( getattr4.assign( _python_var_meta.asObject() ), BUILTIN_GETATTR( getattr4.asObject0(), _python_unicode_plain_fields, _python_var_fields.asObject() ) ) ).asObject() == Py_None ) && ( PyObjectTemporary( ( getattr7.assign( _python_var_meta.asObject() ), BUILTIN_GETATTR( getattr7.asObject0(), _python_unicode_plain_exclude, _python_var_exclude.asObject() ) ) ).asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 756 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_warnings.asObject0(), _python_str_plain_warn ) ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE2( _python_unicode_digest_0a2ba1c478702d9564e1cdb8085d4459, _mvar_django__forms__models_PendingDeprecationWarning.asObject0() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_f154c9a58c9419d7e391901d7b7fe49e ) ).asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 760 );
        {
            PyObjectTempKeeper0 call22;
            PyObjectTempKeeper1 call23;
            PyObjectTempKeeper0 make_dict10;
            PyObjectTempKeeper0 make_dict12;
            PyObjectTempKeeper0 make_dict14;
            PyObjectTempKeeper0 make_dict16;
            PyObjectTempKeeper0 make_dict18;
            _python_var_form.assign1( ( call22.assign( _mvar_django__forms__models_modelform_factory.asObject0() ), call23.assign( MAKE_TUPLE1( _python_var_model.asObject() ) ), CALL_FUNCTION( call22.asObject0(), call23.asObject0(), PyObjectTemporary( ( make_dict10.assign( _python_var_form.asObject() ), make_dict12.assign( _python_var_fields.asObject() ), make_dict14.assign( _python_var_exclude.asObject() ), make_dict16.assign( _python_var_formfield_callback.asObject() ), make_dict18.assign( _python_var_widgets.asObject() ), MAKE_DICT6( make_dict10.asObject0(), _python_str_plain_form, make_dict12.asObject0(), _python_str_plain_fields, make_dict14.asObject0(), _python_str_plain_exclude, make_dict16.asObject0(), _python_str_plain_formfield_callback, make_dict18.asObject0(), _python_str_plain_widgets, _python_var_localized_fields.asObject(), _python_str_plain_localized_fields ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 763 );
        {
            PyObjectTempKeeper0 call37;
            PyObjectTempKeeper1 call38;
            PyObjectTempKeeper0 make_dict25;
            PyObjectTempKeeper0 make_dict27;
            PyObjectTempKeeper0 make_dict29;
            PyObjectTempKeeper0 make_dict31;
            PyObjectTempKeeper0 make_tuple35;
            _python_var_FormSet.assign1( ( call37.assign( _mvar_django__forms__models_formset_factory.asObject0() ), call38.assign( ( make_tuple35.assign( _python_var_form.asObject() ), MAKE_TUPLE2( make_tuple35.asObject0(), _python_var_formset.asObject() ) ) ), CALL_FUNCTION( call37.asObject0(), call38.asObject0(), PyObjectTemporary( ( make_dict25.assign( _python_var_extra.asObject() ), make_dict27.assign( _python_var_max_num.asObject() ), make_dict29.assign( _python_var_can_order.asObject() ), make_dict31.assign( _python_var_can_delete.asObject() ), MAKE_DICT5( make_dict25.asObject0(), _python_str_plain_extra, make_dict27.asObject0(), _python_str_plain_max_num, make_dict29.asObject0(), _python_str_plain_can_order, make_dict31.asObject0(), _python_str_plain_can_delete, _python_var_validate_max.asObject(), _python_str_plain_validate_max ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 766 );
        {
                PyObject *tmp_identifier = _python_var_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_FormSet.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 767 );
        return _python_var_FormSet.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_localized_fields.updateLocalsDict( _python_var_validate_max.updateLocalsDict( _python_var_widgets.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_max_num.updateLocalsDict( _python_var_can_order.updateLocalsDict( _python_var_can_delete.updateLocalsDict( _python_var_extra.updateLocalsDict( _python_var_formset.updateLocalsDict( _python_var_formfield_callback.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_FormSet.updateLocalsDict( _python_var_meta.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11_modelformset_factory_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_11_modelformset_factory_of_module_django__forms__models );
           frame_function_11_modelformset_factory_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_modelformset_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_formfield_callback = NULL;
    PyObject *_python_par_formset = NULL;
    PyObject *_python_par_extra = NULL;
    PyObject *_python_par_can_delete = NULL;
    PyObject *_python_par_can_order = NULL;
    PyObject *_python_par_max_num = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_exclude = NULL;
    PyObject *_python_par_widgets = NULL;
    PyObject *_python_par_validate_max = NULL;
    PyObject *_python_par_localized_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "modelformset_factory() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_formfield_callback == key )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_formset == key )
            {
                if (unlikely( _python_par_formset ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'formset'" );
                    goto error_exit;
                }

                _python_par_formset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_extra == key )
            {
                if (unlikely( _python_par_extra ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'extra'" );
                    goto error_exit;
                }

                _python_par_extra = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_delete == key )
            {
                if (unlikely( _python_par_can_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'can_delete'" );
                    goto error_exit;
                }

                _python_par_can_delete = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_order == key )
            {
                if (unlikely( _python_par_can_order ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'can_order'" );
                    goto error_exit;
                }

                _python_par_can_order = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_max_num == key )
            {
                if (unlikely( _python_par_max_num ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'max_num'" );
                    goto error_exit;
                }

                _python_par_max_num = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exclude == key )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widgets == key )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_validate_max == key )
            {
                if (unlikely( _python_par_validate_max ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'validate_max'" );
                    goto error_exit;
                }

                _python_par_validate_max = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_localized_fields == key )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_formfield_callback, key ) )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_formset, key ) )
            {
                if (unlikely( _python_par_formset ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'formset'" );
                    goto error_exit;
                }

                _python_par_formset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_extra, key ) )
            {
                if (unlikely( _python_par_extra ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'extra'" );
                    goto error_exit;
                }

                _python_par_extra = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_delete, key ) )
            {
                if (unlikely( _python_par_can_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'can_delete'" );
                    goto error_exit;
                }

                _python_par_can_delete = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_order, key ) )
            {
                if (unlikely( _python_par_can_order ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'can_order'" );
                    goto error_exit;
                }

                _python_par_can_order = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_max_num, key ) )
            {
                if (unlikely( _python_par_max_num ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'max_num'" );
                    goto error_exit;
                }

                _python_par_max_num = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exclude, key ) )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widgets, key ) )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_validate_max, key ) )
            {
                if (unlikely( _python_par_validate_max ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'validate_max'" );
                    goto error_exit;
                }

                _python_par_validate_max = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_localized_fields, key ) )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "modelformset_factory() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 13 ))
    {
        if ( 13 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "modelformset_factory() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "modelformset_factory() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "modelformset_factory() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "modelformset_factory() takes exactly %d arguments (%zd given)", 13, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 13 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "modelformset_factory() takes exactly %d positional arguments (%zd given)", 13, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "modelformset_factory() takes at most %d positional arguments (%zd given)", 13, args_given + kw_only_found );
            }
#else
            if ( 13 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "modelformset_factory() takes %d positional arguments but %zd were given", 13, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "modelformset_factory() takes at most %d positional arguments (%zd given)", 13, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 13 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "modelformset_factory() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "modelformset_factory() takes exactly %d non-keyword arguments (%zd given)", 13, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 13 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "modelformset_factory() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 13 ? args_given : 13;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_formfield_callback != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'formfield_callback'" );
             goto error_exit;
         }

        _python_par_formfield_callback = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_formset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'formset'" );
             goto error_exit;
         }

        _python_par_formset = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_extra != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'extra'" );
             goto error_exit;
         }

        _python_par_extra = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_can_delete != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'can_delete'" );
             goto error_exit;
         }

        _python_par_can_delete = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_can_order != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'can_order'" );
             goto error_exit;
         }

        _python_par_can_order = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_max_num != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'max_num'" );
             goto error_exit;
         }

        _python_par_max_num = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_exclude != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'exclude'" );
             goto error_exit;
         }

        _python_par_exclude = INCREASE_REFCOUNT( args[ 9 ] );
    }
    if (likely( 10 < args_usable_count ))
    {
         if (unlikely( _python_par_widgets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'widgets'" );
             goto error_exit;
         }

        _python_par_widgets = INCREASE_REFCOUNT( args[ 10 ] );
    }
    if (likely( 11 < args_usable_count ))
    {
         if (unlikely( _python_par_validate_max != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'validate_max'" );
             goto error_exit;
         }

        _python_par_validate_max = INCREASE_REFCOUNT( args[ 11 ] );
    }
    if (likely( 12 < args_usable_count ))
    {
         if (unlikely( _python_par_localized_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelformset_factory() got multiple values for keyword argument 'localized_fields'" );
             goto error_exit;
         }

        _python_par_localized_fields = INCREASE_REFCOUNT( args[ 12 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_form == NULL )
    {
        _python_par_form = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_form );
    }
    if ( _python_par_formfield_callback == NULL )
    {
        _python_par_formfield_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_formfield_callback );
    }
    if ( _python_par_formset == NULL )
    {
        _python_par_formset = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_formset );
    }
    if ( _python_par_extra == NULL )
    {
        _python_par_extra = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_extra );
    }
    if ( _python_par_can_delete == NULL )
    {
        _python_par_can_delete = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_can_delete );
    }
    if ( _python_par_can_order == NULL )
    {
        _python_par_can_order = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_can_order );
    }
    if ( _python_par_max_num == NULL )
    {
        _python_par_max_num = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_max_num );
    }
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_fields );
    }
    if ( _python_par_exclude == NULL )
    {
        _python_par_exclude = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 8 ) );
        assertObject( _python_par_exclude );
    }
    if ( _python_par_widgets == NULL )
    {
        _python_par_widgets = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 9 ) );
        assertObject( _python_par_widgets );
    }
    if ( _python_par_validate_max == NULL )
    {
        _python_par_validate_max = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 10 ) );
        assertObject( _python_par_validate_max );
    }
    if ( _python_par_localized_fields == NULL )
    {
        _python_par_localized_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 11 ) );
        assertObject( _python_par_localized_fields );
    }


    return impl_function_11_modelformset_factory_of_module_django__forms__models( self, _python_par_model, _python_par_form, _python_par_formfield_callback, _python_par_formset, _python_par_extra, _python_par_can_delete, _python_par_can_order, _python_par_max_num, _python_par_fields, _python_par_exclude, _python_par_widgets, _python_par_validate_max, _python_par_localized_fields );

error_exit:;

    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_formfield_callback );
    Py_XDECREF( _python_par_formset );
    Py_XDECREF( _python_par_extra );
    Py_XDECREF( _python_par_can_delete );
    Py_XDECREF( _python_par_can_order );
    Py_XDECREF( _python_par_max_num );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_exclude );
    Py_XDECREF( _python_par_widgets );
    Py_XDECREF( _python_par_validate_max );
    Py_XDECREF( _python_par_localized_fields );

    return NULL;
}

static PyObject *dparse_function_11_modelformset_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 13)
    {
        return impl_function_11_modelformset_factory_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ), INCREASE_REFCOUNT( args[ 10 ] ), INCREASE_REFCOUNT( args[ 11 ] ), INCREASE_REFCOUNT( args[ 12 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_modelformset_factory_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_initial_form_count( _python_str_plain_initial_form_count );
    PyObjectLocalVariable _python_var__construct_form( _python_str_plain__construct_form );
    PyObjectLocalVariable _python_var_get_default_prefix( _python_str_plain_get_default_prefix );
    PyObjectLocalVariable _python_var_save_new( _python_str_plain_save_new );
    PyObjectLocalVariable _python_var_add_fields( _python_str_plain_add_fields );
    PyObjectLocalVariable _python_var_get_unique_error_message( _python_str_plain_get_unique_error_message );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    _python_var___doc__.assign0( _python_unicode_digest_df874899e96b55118248ffa9886ba9a3 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) );
    _python_var_initial_form_count.assign1( MAKE_FUNCTION_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) );
    _python_var__construct_form.assign1( MAKE_FUNCTION_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) );
    static PyFrameObject *frame_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_104c0896153fe3b02933dc992f92d4cc, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 810 );
        _python_var_get_default_prefix.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_classmethod ), PyObjectTemporary( MAKE_FUNCTION_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_get_unique_error_message.updateLocalsDict( _python_var_add_fields.updateLocalsDict( _python_var_save_new.updateLocalsDict( _python_var_get_default_prefix.updateLocalsDict( _python_var__construct_form.updateLocalsDict( _python_var_initial_form_count.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        throw;
    }
    _python_var_save_new.assign1( MAKE_FUNCTION_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) );
    _python_var_add_fields.assign1( MAKE_FUNCTION_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) );
    _python_var_get_unique_error_message.assign1( MAKE_FUNCTION_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) );
    return _python_var_get_unique_error_message.updateLocalsDict( _python_var_add_fields.updateLocalsDict( _python_var_save_new.updateLocalsDict( _python_var_get_default_prefix.updateLocalsDict( _python_var__construct_form.updateLocalsDict( _python_var_initial_form_count.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_instance, PyObject *_python_par_save_as_new, PyObject *_python_par_prefix, PyObject *_python_par_queryset, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_save_as_new( _python_str_plain_save_as_new, _python_par_save_as_new );
    PyObjectLocalParameterVariableNoDel _python_var_prefix( _python_str_plain_prefix, _python_par_prefix );
    PyObjectLocalParameterVariableNoDel _python_var_queryset( _python_str_plain_queryset, _python_par_queryset );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_e5ef6d1d153bb13ece0b8d8ff878e6db, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 776 );
        if ( ( _python_var_instance.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 777 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_instance );
            }
        }
        else
        {
            frame_guard.setLineNumber( 779 );
            {
                    PyObject *tmp_identifier = _python_var_instance.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_instance );
            }
        }
        frame_guard.setLineNumber( 780 );
        {
                PyObject *tmp_identifier = _python_var_save_as_new.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_save_as_new );
        }
        frame_guard.setLineNumber( 781 );
        if ( ( _python_var_queryset.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 782 );
            _python_var_queryset.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__default_manager ) );
        }
        frame_guard.setLineNumber( 783 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_pk ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 784 );
            {
                PyObjectTempKeeper1 call_tmp3;
                PyObjectTempKeeper1 make_dict1;
                _python_var_qs.assign1( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( _python_var_queryset.asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp3.asObject(), ( make_dict1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), MAKE_DICT1( make_dict1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 786 );
            _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_queryset.asObject(), _python_str_plain_none ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 787 );
        {
            PyObjectTempKeeper1 call_tmp13;
            PyObjectTempKeeper1 call_tmp14;
            PyObjectTempKeeper1 call_tmp15;
            PyObjectTempKeeper0 make_dict9;
            PyObjectTempKeeper0 make_tuple7;
            PyObjectTempKeeper0 super5;
            DECREASE_REFCOUNT( ( call_tmp13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super5.assign( _mvar_django__forms__models_BaseInlineFormSet.asObject0() ), BUILTIN_SUPER( super5.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp14.assign( ( make_tuple7.assign( _python_var_data.asObject() ), MAKE_TUPLE2( make_tuple7.asObject0(), _python_var_files.asObject() ) ) ), call_tmp15.assign( ( make_dict9.assign( _python_var_prefix.asObject() ), MAKE_DICT2( make_dict9.asObject0(), _python_str_plain_prefix, _python_var_qs.asObject(), _python_str_plain_queryset ) ) ), impl_function_11_complex_call_helper_pos_keywords_star_dict_of_module___internal__( call_tmp13.asObject(), call_tmp14.asObject(), call_tmp15.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_queryset.updateLocalsDict( _python_var_prefix.updateLocalsDict( _python_var_save_as_new.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_qs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_save_as_new = NULL;
    PyObject *_python_par_prefix = NULL;
    PyObject *_python_par_queryset = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument data was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_data );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_data == NULL );

            _python_par_data = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_data );

            kw_found += 1;
        }
    }

    // Check if argument files was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_files );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_files == NULL );

            _python_par_files = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_files );

            kw_found += 1;
        }
    }

    // Check if argument instance was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_instance );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_instance == NULL );

            _python_par_instance = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_instance );

            kw_found += 1;
        }
    }

    // Check if argument save_as_new was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_save_as_new );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_save_as_new == NULL );

            _python_par_save_as_new = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_save_as_new );

            kw_found += 1;
        }
    }

    // Check if argument prefix was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_prefix );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_prefix == NULL );

            _python_par_prefix = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_prefix );

            kw_found += 1;
        }
    }

    // Check if argument queryset was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_queryset );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_queryset == NULL );

            _python_par_queryset = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_queryset );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_save_as_new != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'save_as_new'" );
             goto error_exit;
         }

        _python_par_save_as_new = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_prefix != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefix'" );
             goto error_exit;
         }

        _python_par_prefix = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_queryset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'queryset'" );
             goto error_exit;
         }

        _python_par_queryset = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_data == NULL )
    {
        _python_par_data = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_data );
    }
    if ( _python_par_files == NULL )
    {
        _python_par_files = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_files );
    }
    if ( _python_par_instance == NULL )
    {
        _python_par_instance = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_instance );
    }
    if ( _python_par_save_as_new == NULL )
    {
        _python_par_save_as_new = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_save_as_new );
    }
    if ( _python_par_prefix == NULL )
    {
        _python_par_prefix = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_prefix );
    }
    if ( _python_par_queryset == NULL )
    {
        _python_par_queryset = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_queryset );
    }


    return impl_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_data, _python_par_files, _python_par_instance, _python_par_save_as_new, _python_par_prefix, _python_par_queryset, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_save_as_new );
    Py_XDECREF( _python_par_prefix );
    Py_XDECREF( _python_par_queryset );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 8)
    {
        return impl_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_55799eafe24003ebca4e682b3ad970b8, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 791 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_save_as_new ) ).asObject() ) )
        {
            return INCREASE_REFCOUNT( _python_int_0 );
        }
        frame_guard.setLineNumber( 793 );
        {
            PyObjectTempKeeper0 super1;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_BaseInlineFormSet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_initial_form_count ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "initial_form_count() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "initial_form_count() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "initial_form_count() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_i, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_i( _python_str_plain_i, _python_par_i );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_form( _python_str_plain_form );

    // Actual function code.
    static PyFrameObject *frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_3baecc72bda4fbe9c61e4533b7ba5b50, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 797 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper0 super1;
            _python_var_form.assign1( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_BaseInlineFormSet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__construct_form ) ), call_tmp4.assign( MAKE_TUPLE1( _python_var_i.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 798 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_save_as_new ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 801 );
            {
                PyObjectTempKeeper1 call6;
                {
                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_data ) );
                    SET_SUBSCRIPT( Py_None, tmp_subscribed.asObject(), PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_add_prefix ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__pk_field ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() );
            }
            }
            frame_guard.setLineNumber( 804 );
            {
                PyObjectTempKeeper1 call8;
                {
                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_data ) );
                    SET_SUBSCRIPT( Py_None, tmp_subscribed.asObject(), PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_add_prefix ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 807 );
        {
            PyObjectTempKeeper1 setattr10;
            PyObjectTempKeeper1 setattr11;
            ( ( setattr10.assign( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_instance ) ), setattr11.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_get_attname ) ).asObject() ) ), BUILTIN_SETATTR( setattr10.asObject0(), setattr11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_pk ) ).asObject() ) ), Py_None );
        }
        frame_guard.setLineNumber( 808 );
        return _python_var_form.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_form.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_i = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_construct_form() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_construct_form() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_construct_form() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument i was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_i );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_i == NULL );

            _python_par_i = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_i );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_construct_form() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_construct_form() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_construct_form() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_construct_form() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_i != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_construct_form() got multiple values for keyword argument 'i'" );
             goto error_exit;
         }

        _python_par_i = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_i, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_i );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_cls )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalVariable _python_var_RelatedObject( _python_str_plain_RelatedObject );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_92067fef748eede4eb1f8ce21f51ef9f, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 812 );
        _python_var_RelatedObject.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_429a1979feac8a565a5c2aef69a2e26c, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_cls.updateLocalsDict( _python_var_RelatedObject.updateLocalsDict( PyDict_New() ) ) ).asObject(), _python_list_str_plain_RelatedObject_list, _python_int_0 ) ).asObject(), _python_str_plain_RelatedObject ) );
        frame_guard.setLineNumber( 813 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            PyObjectTempKeeper1 call3;
            return CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( _python_var_RelatedObject.asObject() ), call2.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), call3.assign( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain_model ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain_fk ) ).asObject() ) ) ).asObject(), _python_str_plain_get_accessor_name ) ).asObject() ) ).asObject(), _python_str_plain_replace ) ).asObject(), _python_unicode_chr_43, _python_unicode_empty );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_cls.updateLocalsDict( _python_var_RelatedObject.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_default_prefix() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default_prefix() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default_prefix() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_default_prefix() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default_prefix() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_default_prefix() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_default_prefix() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default_prefix() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default_prefix() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default_prefix() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default_prefix() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default_prefix() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_default_prefix() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_default_prefix() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_default_prefix() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_default_prefix() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_default_prefix() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, _python_par_cls );

error_exit:;

    Py_XDECREF( _python_par_cls );

    return NULL;
}

static PyObject *dparse_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_form, PyObject *_python_par_commit )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_commit( _python_str_plain_commit, _python_par_commit );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_pk_value( _python_str_plain_pk_value );

    // Actual function code.
    static PyFrameObject *frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_a876fb2f6beeb0bc05e3db469eb046c5, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 818 );
        _python_var_obj.assign1( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_save ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_e1e01f3a485417c71cf4f4b078852437 ) ).asObject() ) );
        frame_guard.setLineNumber( 819 );
        {
            PyObjectTempKeeper1 getattr1;
            _python_var_pk_value.assign1( ( getattr1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ).asObject(), NULL ) ) );
        }
        frame_guard.setLineNumber( 820 );
        {
            PyObjectTempKeeper0 getattr4;
            PyObjectTempKeeper0 setattr7;
            PyObjectTempKeeper1 setattr8;
            ( ( setattr7.assign( _python_var_obj.asObject() ), setattr8.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_get_attname ) ).asObject() ) ), BUILTIN_SETATTR( setattr7.asObject0(), setattr8.asObject0(), PyObjectTemporary( ( getattr4.assign( _python_var_pk_value.asObject() ), BUILTIN_GETATTR( getattr4.asObject0(), _python_unicode_plain_pk, _python_var_pk_value.asObject() ) ) ).asObject() ) ), Py_None );
        }
        frame_guard.setLineNumber( 821 );
        if ( CHECK_IF_TRUE( _python_var_commit.asObject() ) )
        {
            frame_guard.setLineNumber( 822 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_save ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 824 );
        if ( ( CHECK_IF_TRUE( _python_var_commit.asObject() ) && HAS_ATTRIBUTE( _python_var_form.asObject(), _python_unicode_plain_save_m2m ) ) )
        {
            frame_guard.setLineNumber( 825 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_save_m2m ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 826 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_commit.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_pk_value.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_commit = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_new() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_commit == key )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_commit, key ) )
            {
                if (unlikely( _python_par_commit ))
                {
                    PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'commit'" );
                    goto error_exit;
                }

                _python_par_commit = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_new() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_new() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_new() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "save_new() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_new() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_commit != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_new() got multiple values for keyword argument 'commit'" );
             goto error_exit;
         }

        _python_par_commit = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_commit == NULL )
    {
        _python_par_commit = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_commit );
    }


    return impl_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_form, _python_par_commit );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_commit );

    return NULL;
}

static PyObject *dparse_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_form, PyObject *_python_par_index )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_index( _python_str_plain_index, _python_par_index );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_kwargs( _python_str_plain_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_fc6e3d2d51868c676a53a01e66442d6d, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 829 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_BaseInlineFormSet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_add_fields ) ), call4.assign( _python_var_form.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_index.asObject() ) ) );
        }
        frame_guard.setLineNumber( 830 );
        {
            PyObjectTempKeeper1 cmp15;
            if ( ( cmp15.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__pk_field ) ), RICH_COMPARE_BOOL_EQ( cmp15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 831 );
            _python_var_name.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__pk_field ) ).asObject(), _python_str_plain_name ) );
            _python_var_kwargs.assign1( PyDict_Copy( _python_dict_2d7c14ef7a2101d6434009ed830a6efd ) );
        }
        else
        {
            frame_guard.setLineNumber( 836 );
            _python_var_name.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_name ) );
            frame_guard.setLineNumber( 837 );
            {
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 call8;
                PyObjectTempKeeper1 getattr10;
                _python_var_kwargs.assign1( MAKE_DICT1( PyObjectTemporary( ( getattr10.assign( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_fields ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_name.asObject() ) ) ), BUILTIN_GETATTR( getattr10.asObject0(), _python_unicode_plain_label, PyObjectTemporary( ( call8.assign( _mvar_django__forms__models_capfirst.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_verbose_name ) ).asObject() ) ) ).asObject() ) ) ).asObject(), _python_unicode_plain_label ) );
            }
            frame_guard.setLineNumber( 840 );
            {
                PyObjectTempKeeper1 cmp13;
                if ( ( cmp13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ), RICH_COMPARE_BOOL_NE( cmp13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 841 );
                {
                        PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_to_field );
                }
            }
            }
        }
        }
        frame_guard.setLineNumber( 843 );
        {
            PyObjectTempKeeper0 call_tmp17;
            PyObjectTempKeeper1 call_tmp18;
            {
                PyObjectTemporary tmp_identifier( ( call_tmp17.assign( _mvar_django__forms__models_InlineForeignKeyField.asObject0() ), call_tmp18.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp17.asObject(), call_tmp18.asObject(), _python_var_kwargs.asObject1() ) ) );
                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain_fields ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _python_var_name.asObject() );
        }
        }
        frame_guard.setLineNumber( 847 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 848 );
            if ( BUILTIN_ISINSTANCE_BOOL( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject(), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) )
            {
                frame_guard.setLineNumber( 849 );
                {
                        PyObjectTemporary tmp_identifier( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields );
                }
            }
            frame_guard.setLineNumber( 850 );
            {
                PyObjectTempKeeper1 call20;
                DECREASE_REFCOUNT( ( call20.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_index.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_name.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_index = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_index == key )
            {
                if (unlikely( _python_par_index ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'index'" );
                    goto error_exit;
                }

                _python_par_index = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_index, key ) )
            {
                if (unlikely( _python_par_index ))
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'index'" );
                    goto error_exit;
                }

                _python_par_index = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_fields() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_index != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_fields() got multiple values for keyword argument 'index'" );
             goto error_exit;
         }

        _python_par_index = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_form, _python_par_index );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_index );

    return NULL;
}

static PyObject *dparse_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_unique_check )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_unique_check( _python_str_plain_unique_check, _python_par_unique_check );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );

    // Actual function code.
    static PyFrameObject *frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) )
    {
        if ( frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
        }

        frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models = MAKE_FRAME( _codeobj_ad7990ce984804f6c2c7994abfb42c04, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 853 );
        _python_var_unique_check.assign1( impl_listcontr_1_of_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( MAKE_ITERATOR( _python_var_unique_check.asObject() ), _python_var_field, _python_var_self ) );
        frame_guard.setLineNumber( 854 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_BaseInlineFormSet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_unique_error_message ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_unique_check.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_unique_check.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models );
           frame_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_unique_check = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_unique_check == key )
            {
                if (unlikely( _python_par_unique_check ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'unique_check'" );
                    goto error_exit;
                }

                _python_par_unique_check = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_unique_check, key ) )
            {
                if (unlikely( _python_par_unique_check ))
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'unique_check'" );
                    goto error_exit;
                }

                _python_par_unique_check = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_unique_error_message() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_unique_error_message() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_unique_check != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_unique_error_message() got multiple values for keyword argument 'unique_check'" );
             goto error_exit;
         }

        _python_par_unique_check = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, _python_par_self, _python_par_unique_check );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_unique_check );

    return NULL;
}

static PyObject *dparse_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_field,PyObjectLocalParameterVariableNoDel &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 853 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 853 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_field.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( cmp1.assign( python_closure_field.asObject() ), RICH_COMPARE_BOOL_NE( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_fk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 853 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_field.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_13__get_foreign_key_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_parent_model, PyObject *_python_par_model, PyObject *_python_par_fk_name, PyObject *_python_par_can_fail )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_parent_model( _python_str_plain_parent_model, _python_par_parent_model );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_fk_name( _python_str_plain_fk_name, _python_par_fk_name );
    PyObjectLocalParameterVariableNoDel _python_var_can_fail( _python_str_plain_can_fail, _python_par_can_fail );
    PyObjectLocalVariable _python_var_ForeignKey( _python_str_plain_ForeignKey );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_fks_to_parent( _python_str_plain_fks_to_parent );
    PyObjectLocalVariable _python_var_fk( _python_str_plain_fk );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_13__get_foreign_key_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_13__get_foreign_key_of_module_django__forms__models ) )
    {
        if ( frame_function_13__get_foreign_key_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13__get_foreign_key_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_13__get_foreign_key_of_module_django__forms__models );
        }

        frame_function_13__get_foreign_key_of_module_django__forms__models = MAKE_FRAME( _codeobj_5e7b1f73d41e51fb54831d7bcada5d2f, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_13__get_foreign_key_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_13__get_foreign_key_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 866 );
        _python_var_ForeignKey.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__forms__models)->md_dict, PyObjectTemporary( _python_var_can_fail.updateLocalsDict( _python_var_fk_name.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_parent_model.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_fk.updateLocalsDict( _python_var_fks_to_parent.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_ForeignKey.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_ForeignKey_list, _python_int_0 ) ).asObject(), _python_str_plain_ForeignKey ) );
        frame_guard.setLineNumber( 867 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 868 );
        if ( CHECK_IF_TRUE( _python_var_fk_name.asObject() ) )
        {
            frame_guard.setLineNumber( 869 );
            _python_var_fks_to_parent.assign1( impl_listcontr_1_of_function_13__get_foreign_key_of_module_django__forms__models( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ).asObject() ), _python_var_f, _python_var_fk_name ) );
            frame_guard.setLineNumber( 870 );
            if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_fks_to_parent.asObject() ) ).asObject(), _python_int_pos_1 ) )
            {
                frame_guard.setLineNumber( 871 );
                _python_var_fk.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_fks_to_parent.asObject(), _python_int_0, 0 ) );
                frame_guard.setLineNumber( 872 );
                {
                    PyObjectTempKeeper1 cmp5;
                    PyObjectTempKeeper1 cmp7;
                    PyObjectTempKeeper0 isinstance3;
                    if ( ( (!( ( isinstance3.assign( _python_var_fk.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _python_var_ForeignKey.asObject() ) ) )) || ( ( cmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), RICH_COMPARE_BOOL_NE( cmp5.asObject0(), _python_var_parent_model.asObject() ) ) && ( cmp7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp7.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_parent_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_parent_list ) ).asObject() ) ).asObject() ) ) ) ) )
                {
                    frame_guard.setLineNumber( 875 );
                    {
                        PyObjectTempKeeper0 make_tuple1;
                        {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_Exception, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_b380c61c15604d1b62715ee3b5b8ce21, PyObjectTemporary( ( make_tuple1.assign( _python_var_fk_name.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_parent_model.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
            }
            else
            {
                frame_guard.setLineNumber( 876 );
                if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_fks_to_parent.asObject() ) ).asObject(), _python_int_0 ) )
                {
                    frame_guard.setLineNumber( 877 );
                    {
                        PyObjectTempKeeper0 make_tuple9;
                        {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_Exception, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_a36d7956f82d41eb29e494e9b2de7a40, PyObjectTemporary( ( make_tuple9.assign( _python_var_model.asObject() ), MAKE_TUPLE2( make_tuple9.asObject0(), _python_var_fk_name.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 880 );
            _python_var_fks_to_parent.assign1( impl_listcontr_2_of_function_13__get_foreign_key_of_module_django__forms__models( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_fields ) ).asObject() ), _python_var_ForeignKey, _python_var_f, _python_var_parent_model ) );
            frame_guard.setLineNumber( 886 );
            if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_fks_to_parent.asObject() ) ).asObject(), _python_int_pos_1 ) )
            {
                frame_guard.setLineNumber( 887 );
                _python_var_fk.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_fks_to_parent.asObject(), _python_int_0, 0 ) );
            }
            else
            {
                frame_guard.setLineNumber( 888 );
                if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_fks_to_parent.asObject() ) ).asObject(), _python_int_0 ) )
                {
                    frame_guard.setLineNumber( 889 );
                    if ( CHECK_IF_TRUE( _python_var_can_fail.asObject() ) )
                    {
                        return INCREASE_REFCOUNT( Py_None );
                    }
                    frame_guard.setLineNumber( 891 );
                    {
                        PyObjectTempKeeper0 make_tuple11;
                        {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_Exception, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_d1de2b32885eb3e409b95c647f5e017d, PyObjectTemporary( ( make_tuple11.assign( _python_var_model.asObject() ), MAKE_TUPLE2( make_tuple11.asObject0(), _python_var_parent_model.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 893 );
                    {
                        PyObjectTempKeeper0 make_tuple13;
                        {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_Exception, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_02dabfde879c3334007a63e56f43f478, PyObjectTemporary( ( make_tuple13.assign( _python_var_model.asObject() ), MAKE_TUPLE2( make_tuple13.asObject0(), _python_var_parent_model.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
            }
        }
        frame_guard.setLineNumber( 894 );
        return _python_var_fk.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_can_fail.updateLocalsDict( _python_var_fk_name.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_parent_model.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_fk.updateLocalsDict( _python_var_fks_to_parent.updateLocalsDict( _python_var_opts.updateLocalsDict( _python_var_ForeignKey.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_13__get_foreign_key_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_13__get_foreign_key_of_module_django__forms__models );
           frame_function_13__get_foreign_key_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13__get_foreign_key_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_parent_model = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_fk_name = NULL;
    PyObject *_python_par_can_fail = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_foreign_key() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_parent_model == key )
            {
                if (unlikely( _python_par_parent_model ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'parent_model'" );
                    goto error_exit;
                }

                _python_par_parent_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fk_name == key )
            {
                if (unlikely( _python_par_fk_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'fk_name'" );
                    goto error_exit;
                }

                _python_par_fk_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_fail == key )
            {
                if (unlikely( _python_par_can_fail ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'can_fail'" );
                    goto error_exit;
                }

                _python_par_can_fail = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parent_model, key ) )
            {
                if (unlikely( _python_par_parent_model ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'parent_model'" );
                    goto error_exit;
                }

                _python_par_parent_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fk_name, key ) )
            {
                if (unlikely( _python_par_fk_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'fk_name'" );
                    goto error_exit;
                }

                _python_par_fk_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_fail, key ) )
            {
                if (unlikely( _python_par_can_fail ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'can_fail'" );
                    goto error_exit;
                }

                _python_par_can_fail = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_foreign_key() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_foreign_key() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'parent_model'" );
             goto error_exit;
         }

        _python_par_parent_model = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_fk_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'fk_name'" );
             goto error_exit;
         }

        _python_par_fk_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_can_fail != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_foreign_key() got multiple values for keyword argument 'can_fail'" );
             goto error_exit;
         }

        _python_par_can_fail = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_fk_name == NULL )
    {
        _python_par_fk_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_fk_name );
    }
    if ( _python_par_can_fail == NULL )
    {
        _python_par_can_fail = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_can_fail );
    }


    return impl_function_13__get_foreign_key_of_module_django__forms__models( self, _python_par_parent_model, _python_par_model, _python_par_fk_name, _python_par_can_fail );

error_exit:;

    Py_XDECREF( _python_par_parent_model );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_fk_name );
    Py_XDECREF( _python_par_can_fail );

    return NULL;
}

static PyObject *dparse_function_13__get_foreign_key_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_13__get_foreign_key_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13__get_foreign_key_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_13__get_foreign_key_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f,PyObjectLocalParameterVariableNoDel &python_closure_fk_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 869 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 869 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 cmp1;
                    if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_name ) ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), python_closure_fk_name.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 869 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_f.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_13__get_foreign_key_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_ForeignKey,PyObjectLocalVariable &python_closure_f,PyObjectLocalParameterVariableNoDel &python_closure_parent_model )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 881 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 881 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 cmp3;
                    PyObjectTempKeeper1 cmp5;
                    PyObjectTempKeeper0 isinstance1;
                    if ( ( ( isinstance1.assign( python_closure_f.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), python_closure_ForeignKey.asObject() ) ) && ( ( cmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), python_closure_parent_model.asObject() ) ) || ( cmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_parent_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_parent_list ) ).asObject() ) ).asObject() ) ) ) ) )
                {
                    frame_guard.setLineNumber( 881 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_f.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_14_inlineformset_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_parent_model, PyObject *_python_par_model, PyObject *_python_par_form, PyObject *_python_par_formset, PyObject *_python_par_fk_name, PyObject *_python_par_fields, PyObject *_python_par_exclude, PyObject *_python_par_extra, PyObject *_python_par_can_order, PyObject *_python_par_can_delete, PyObject *_python_par_max_num, PyObject *_python_par_formfield_callback, PyObject *_python_par_widgets, PyObject *_python_par_validate_max, PyObject *_python_par_localized_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_parent_model( _python_str_plain_parent_model, _python_par_parent_model );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_form( _python_str_plain_form, _python_par_form );
    PyObjectLocalParameterVariableNoDel _python_var_formset( _python_str_plain_formset, _python_par_formset );
    PyObjectLocalParameterVariableNoDel _python_var_fk_name( _python_str_plain_fk_name, _python_par_fk_name );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_exclude( _python_str_plain_exclude, _python_par_exclude );
    PyObjectLocalParameterVariableNoDel _python_var_extra( _python_str_plain_extra, _python_par_extra );
    PyObjectLocalParameterVariableNoDel _python_var_can_order( _python_str_plain_can_order, _python_par_can_order );
    PyObjectLocalParameterVariableNoDel _python_var_can_delete( _python_str_plain_can_delete, _python_par_can_delete );
    PyObjectLocalParameterVariableNoDel _python_var_max_num( _python_str_plain_max_num, _python_par_max_num );
    PyObjectLocalParameterVariableNoDel _python_var_formfield_callback( _python_str_plain_formfield_callback, _python_par_formfield_callback );
    PyObjectLocalParameterVariableNoDel _python_var_widgets( _python_str_plain_widgets, _python_par_widgets );
    PyObjectLocalParameterVariableNoDel _python_var_validate_max( _python_str_plain_validate_max, _python_par_validate_max );
    PyObjectLocalParameterVariableNoDel _python_var_localized_fields( _python_str_plain_localized_fields, _python_par_localized_fields );
    PyObjectLocalVariable _python_var_fk( _python_str_plain_fk );
    PyObjectLocalVariable _python_var_kwargs( _python_str_plain_kwargs );
    PyObjectLocalVariable _python_var_FormSet( _python_str_plain_FormSet );

    // Actual function code.
    static PyFrameObject *frame_function_14_inlineformset_factory_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_14_inlineformset_factory_of_module_django__forms__models ) )
    {
        if ( frame_function_14_inlineformset_factory_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_inlineformset_factory_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_14_inlineformset_factory_of_module_django__forms__models );
        }

        frame_function_14_inlineformset_factory_of_module_django__forms__models = MAKE_FRAME( _codeobj_170ace467b71dface872954558ee28fa, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_14_inlineformset_factory_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_14_inlineformset_factory_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 908 );
        {
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper0 make_tuple1;
            _python_var_fk.assign1( ( call3.assign( _mvar_django__forms__models__get_foreign_key.asObject0() ), call4.assign( ( make_tuple1.assign( _python_var_parent_model.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_model.asObject() ) ) ), CALL_FUNCTION( call3.asObject0(), call4.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_fk_name.asObject(), _python_str_plain_fk_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 910 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_unique ) ).asObject() ) )
        {
            _python_var_max_num.assign0( _python_int_pos_1 );
        }
        frame_guard.setLineNumber( 912 );
        {
            PyObjectTempKeeper0 make_dict10;
            PyObjectTempKeeper0 make_dict12;
            PyObjectTempKeeper0 make_dict14;
            PyObjectTempKeeper0 make_dict16;
            PyObjectTempKeeper0 make_dict18;
            PyObjectTempKeeper0 make_dict20;
            PyObjectTempKeeper0 make_dict22;
            PyObjectTempKeeper0 make_dict24;
            PyObjectTempKeeper0 make_dict26;
            PyObjectTempKeeper0 make_dict6;
            PyObjectTempKeeper0 make_dict8;
            _python_var_kwargs.assign1( ( make_dict6.assign( _python_var_form.asObject() ), make_dict8.assign( _python_var_formfield_callback.asObject() ), make_dict10.assign( _python_var_formset.asObject() ), make_dict12.assign( _python_var_extra.asObject() ), make_dict14.assign( _python_var_can_delete.asObject() ), make_dict16.assign( _python_var_can_order.asObject() ), make_dict18.assign( _python_var_fields.asObject() ), make_dict20.assign( _python_var_exclude.asObject() ), make_dict22.assign( _python_var_max_num.asObject() ), make_dict24.assign( _python_var_widgets.asObject() ), make_dict26.assign( _python_var_validate_max.asObject() ), MAKE_DICT12( make_dict6.asObject0(), _python_unicode_plain_form, make_dict8.asObject0(), _python_unicode_plain_formfield_callback, make_dict10.asObject0(), _python_unicode_plain_formset, make_dict12.asObject0(), _python_unicode_plain_extra, make_dict14.asObject0(), _python_unicode_plain_can_delete, make_dict16.asObject0(), _python_unicode_plain_can_order, make_dict18.asObject0(), _python_unicode_plain_fields, make_dict20.asObject0(), _python_unicode_plain_exclude, make_dict22.asObject0(), _python_unicode_plain_max_num, make_dict24.asObject0(), _python_unicode_plain_widgets, make_dict26.asObject0(), _python_unicode_plain_validate_max, _python_var_localized_fields.asObject(), _python_unicode_plain_localized_fields ) ) );
        }
        frame_guard.setLineNumber( 926 );
        {
            PyObjectTempKeeper0 call_tmp30;
            PyObjectTempKeeper1 call_tmp31;
            _python_var_FormSet.assign1( ( call_tmp30.assign( _mvar_django__forms__models_modelformset_factory.asObject0() ), call_tmp31.assign( MAKE_TUPLE1( _python_var_model.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp30.asObject(), call_tmp31.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 927 );
        {
                PyObject *tmp_identifier = _python_var_fk.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_FormSet.asObject(), _python_str_plain_fk );
        }
        frame_guard.setLineNumber( 928 );
        return _python_var_FormSet.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_localized_fields.updateLocalsDict( _python_var_validate_max.updateLocalsDict( _python_var_widgets.updateLocalsDict( _python_var_formfield_callback.updateLocalsDict( _python_var_max_num.updateLocalsDict( _python_var_can_delete.updateLocalsDict( _python_var_can_order.updateLocalsDict( _python_var_extra.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_fk_name.updateLocalsDict( _python_var_formset.updateLocalsDict( _python_var_form.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_parent_model.updateLocalsDict( _python_var_FormSet.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_fk.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_14_inlineformset_factory_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_14_inlineformset_factory_of_module_django__forms__models );
           frame_function_14_inlineformset_factory_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14_inlineformset_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_parent_model = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_form = NULL;
    PyObject *_python_par_formset = NULL;
    PyObject *_python_par_fk_name = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_exclude = NULL;
    PyObject *_python_par_extra = NULL;
    PyObject *_python_par_can_order = NULL;
    PyObject *_python_par_can_delete = NULL;
    PyObject *_python_par_max_num = NULL;
    PyObject *_python_par_formfield_callback = NULL;
    PyObject *_python_par_widgets = NULL;
    PyObject *_python_par_validate_max = NULL;
    PyObject *_python_par_localized_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "inlineformset_factory() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_parent_model == key )
            {
                if (unlikely( _python_par_parent_model ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'parent_model'" );
                    goto error_exit;
                }

                _python_par_parent_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_form == key )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_formset == key )
            {
                if (unlikely( _python_par_formset ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'formset'" );
                    goto error_exit;
                }

                _python_par_formset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fk_name == key )
            {
                if (unlikely( _python_par_fk_name ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'fk_name'" );
                    goto error_exit;
                }

                _python_par_fk_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_exclude == key )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_extra == key )
            {
                if (unlikely( _python_par_extra ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'extra'" );
                    goto error_exit;
                }

                _python_par_extra = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_order == key )
            {
                if (unlikely( _python_par_can_order ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'can_order'" );
                    goto error_exit;
                }

                _python_par_can_order = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_can_delete == key )
            {
                if (unlikely( _python_par_can_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'can_delete'" );
                    goto error_exit;
                }

                _python_par_can_delete = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_max_num == key )
            {
                if (unlikely( _python_par_max_num ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'max_num'" );
                    goto error_exit;
                }

                _python_par_max_num = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_formfield_callback == key )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widgets == key )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_validate_max == key )
            {
                if (unlikely( _python_par_validate_max ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'validate_max'" );
                    goto error_exit;
                }

                _python_par_validate_max = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_localized_fields == key )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parent_model, key ) )
            {
                if (unlikely( _python_par_parent_model ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'parent_model'" );
                    goto error_exit;
                }

                _python_par_parent_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form, key ) )
            {
                if (unlikely( _python_par_form ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'form'" );
                    goto error_exit;
                }

                _python_par_form = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_formset, key ) )
            {
                if (unlikely( _python_par_formset ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'formset'" );
                    goto error_exit;
                }

                _python_par_formset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fk_name, key ) )
            {
                if (unlikely( _python_par_fk_name ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'fk_name'" );
                    goto error_exit;
                }

                _python_par_fk_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_exclude, key ) )
            {
                if (unlikely( _python_par_exclude ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'exclude'" );
                    goto error_exit;
                }

                _python_par_exclude = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_extra, key ) )
            {
                if (unlikely( _python_par_extra ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'extra'" );
                    goto error_exit;
                }

                _python_par_extra = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_order, key ) )
            {
                if (unlikely( _python_par_can_order ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'can_order'" );
                    goto error_exit;
                }

                _python_par_can_order = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_can_delete, key ) )
            {
                if (unlikely( _python_par_can_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'can_delete'" );
                    goto error_exit;
                }

                _python_par_can_delete = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_max_num, key ) )
            {
                if (unlikely( _python_par_max_num ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'max_num'" );
                    goto error_exit;
                }

                _python_par_max_num = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_formfield_callback, key ) )
            {
                if (unlikely( _python_par_formfield_callback ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'formfield_callback'" );
                    goto error_exit;
                }

                _python_par_formfield_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widgets, key ) )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_validate_max, key ) )
            {
                if (unlikely( _python_par_validate_max ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'validate_max'" );
                    goto error_exit;
                }

                _python_par_validate_max = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_localized_fields, key ) )
            {
                if (unlikely( _python_par_localized_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'localized_fields'" );
                    goto error_exit;
                }

                _python_par_localized_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "inlineformset_factory() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 15 ))
    {
        if ( 15 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes exactly %d arguments (%zd given)", 15, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 15 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes exactly %d positional arguments (%zd given)", 15, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes at most %d positional arguments (%zd given)", 15, args_given + kw_only_found );
            }
#else
            if ( 15 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes %d positional arguments but %zd were given", 15, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes at most %d positional arguments (%zd given)", 15, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 15 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes exactly %d non-keyword arguments (%zd given)", 15, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 15 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "inlineformset_factory() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 15 ? args_given : 15;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'parent_model'" );
             goto error_exit;
         }

        _python_par_parent_model = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_form != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'form'" );
             goto error_exit;
         }

        _python_par_form = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_formset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'formset'" );
             goto error_exit;
         }

        _python_par_formset = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_fk_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'fk_name'" );
             goto error_exit;
         }

        _python_par_fk_name = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_exclude != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'exclude'" );
             goto error_exit;
         }

        _python_par_exclude = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_extra != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'extra'" );
             goto error_exit;
         }

        _python_par_extra = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_can_order != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'can_order'" );
             goto error_exit;
         }

        _python_par_can_order = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_can_delete != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'can_delete'" );
             goto error_exit;
         }

        _python_par_can_delete = INCREASE_REFCOUNT( args[ 9 ] );
    }
    if (likely( 10 < args_usable_count ))
    {
         if (unlikely( _python_par_max_num != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'max_num'" );
             goto error_exit;
         }

        _python_par_max_num = INCREASE_REFCOUNT( args[ 10 ] );
    }
    if (likely( 11 < args_usable_count ))
    {
         if (unlikely( _python_par_formfield_callback != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'formfield_callback'" );
             goto error_exit;
         }

        _python_par_formfield_callback = INCREASE_REFCOUNT( args[ 11 ] );
    }
    if (likely( 12 < args_usable_count ))
    {
         if (unlikely( _python_par_widgets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'widgets'" );
             goto error_exit;
         }

        _python_par_widgets = INCREASE_REFCOUNT( args[ 12 ] );
    }
    if (likely( 13 < args_usable_count ))
    {
         if (unlikely( _python_par_validate_max != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'validate_max'" );
             goto error_exit;
         }

        _python_par_validate_max = INCREASE_REFCOUNT( args[ 13 ] );
    }
    if (likely( 14 < args_usable_count ))
    {
         if (unlikely( _python_par_localized_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inlineformset_factory() got multiple values for keyword argument 'localized_fields'" );
             goto error_exit;
         }

        _python_par_localized_fields = INCREASE_REFCOUNT( args[ 14 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_form == NULL )
    {
        _python_par_form = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_form );
    }
    if ( _python_par_formset == NULL )
    {
        _python_par_formset = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_formset );
    }
    if ( _python_par_fk_name == NULL )
    {
        _python_par_fk_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_fk_name );
    }
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_fields );
    }
    if ( _python_par_exclude == NULL )
    {
        _python_par_exclude = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_exclude );
    }
    if ( _python_par_extra == NULL )
    {
        _python_par_extra = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_extra );
    }
    if ( _python_par_can_order == NULL )
    {
        _python_par_can_order = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_can_order );
    }
    if ( _python_par_can_delete == NULL )
    {
        _python_par_can_delete = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_can_delete );
    }
    if ( _python_par_max_num == NULL )
    {
        _python_par_max_num = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 8 ) );
        assertObject( _python_par_max_num );
    }
    if ( _python_par_formfield_callback == NULL )
    {
        _python_par_formfield_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 9 ) );
        assertObject( _python_par_formfield_callback );
    }
    if ( _python_par_widgets == NULL )
    {
        _python_par_widgets = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 10 ) );
        assertObject( _python_par_widgets );
    }
    if ( _python_par_validate_max == NULL )
    {
        _python_par_validate_max = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 11 ) );
        assertObject( _python_par_validate_max );
    }
    if ( _python_par_localized_fields == NULL )
    {
        _python_par_localized_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 12 ) );
        assertObject( _python_par_localized_fields );
    }


    return impl_function_14_inlineformset_factory_of_module_django__forms__models( self, _python_par_parent_model, _python_par_model, _python_par_form, _python_par_formset, _python_par_fk_name, _python_par_fields, _python_par_exclude, _python_par_extra, _python_par_can_order, _python_par_can_delete, _python_par_max_num, _python_par_formfield_callback, _python_par_widgets, _python_par_validate_max, _python_par_localized_fields );

error_exit:;

    Py_XDECREF( _python_par_parent_model );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_form );
    Py_XDECREF( _python_par_formset );
    Py_XDECREF( _python_par_fk_name );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_exclude );
    Py_XDECREF( _python_par_extra );
    Py_XDECREF( _python_par_can_order );
    Py_XDECREF( _python_par_can_delete );
    Py_XDECREF( _python_par_max_num );
    Py_XDECREF( _python_par_formfield_callback );
    Py_XDECREF( _python_par_widgets );
    Py_XDECREF( _python_par_validate_max );
    Py_XDECREF( _python_par_localized_fields );

    return NULL;
}

static PyObject *dparse_function_14_inlineformset_factory_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 15)
    {
        return impl_function_14_inlineformset_factory_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ), INCREASE_REFCOUNT( args[ 10 ] ), INCREASE_REFCOUNT( args[ 11 ] ), INCREASE_REFCOUNT( args[ 12 ] ), INCREASE_REFCOUNT( args[ 13 ] ), INCREASE_REFCOUNT( args[ 14 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_inlineformset_factory_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_15_InlineForeignKeyField_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    _python_var___doc__.assign0( _python_unicode_digest_82fdb7c68cc94fb40fdecc016d9b1a6b );
    static PyFrameObject *frame_class_15_InlineForeignKeyField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_class_15_InlineForeignKeyField_of_module_django__forms__models ) )
    {
        if ( frame_class_15_InlineForeignKeyField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_15_InlineForeignKeyField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_class_15_InlineForeignKeyField_of_module_django__forms__models );
        }

        frame_class_15_InlineForeignKeyField_of_module_django__forms__models = MAKE_FRAME( _codeobj_d80a6c8556f17d2ffbdd19aaa79d6d4b, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_class_15_InlineForeignKeyField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_class_15_InlineForeignKeyField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 938 );
        _python_var_widget.assign0( _mvar_django__forms__models_HiddenInput.asObject0() );
        frame_guard.setLineNumber( 939 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models__.asObject0(), _python_unicode_digest_2f997df18d783df46c11b82514281223 ) ).asObject(), _python_unicode_plain_invalid_choice ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_15_InlineForeignKeyField_of_module_django__forms__models )
        {
           Py_DECREF( frame_class_15_InlineForeignKeyField_of_module_django__forms__models );
           frame_class_15_InlineForeignKeyField_of_module_django__forms__models = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models(  ) );
    _python_var_clean.assign1( MAKE_FUNCTION_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_parent_instance, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_parent_instance( _python_str_plain_parent_instance, _python_par_parent_instance );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models = MAKE_FRAME( _codeobj_88aa8b5ad42b716040699487cfcf7d20, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 944 );
        {
                PyObject *tmp_identifier = _python_var_parent_instance.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_parent_instance );
        }
        frame_guard.setLineNumber( 945 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_pk_field, Py_False ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_pk_field );
        }
        frame_guard.setLineNumber( 946 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_to_field, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_to_field );
        }
        frame_guard.setLineNumber( 947 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_instance ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 948 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 949 );
                {
                    PyObjectTempKeeper1 getattr1;
                    {
                        PyObjectTemporary tmp_identifier( ( getattr1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_instance ) ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field ) ).asObject(), NULL ) ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_initial );
                }
                }
            }
            else
            {
                frame_guard.setLineNumber( 951 );
                {
                        PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_instance ) ).asObject(), _python_str_plain_pk ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_initial );
                }
            }
        }
        frame_guard.setLineNumber( 952 );
        SET_SUBSCRIPT( Py_False, _python_var_kwargs.asObject(), _python_unicode_plain_required );
        frame_guard.setLineNumber( 953 );
        {
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper0 call_tmp7;
            PyObjectTempKeeper0 super4;
            DECREASE_REFCOUNT( ( call_tmp6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _mvar_django__forms__models_InlineForeignKeyField.asObject0() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp7.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_parent_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models );
           frame_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_parent_instance = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument parent_instance was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_parent_instance );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_parent_instance == NULL );

            _python_par_parent_instance = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_parent_instance );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 2, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_instance'" );
             goto error_exit;
         }

        _python_par_parent_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 2 )
    {
        _python_par_args = PyTuple_New( args_size - 2 );

        for( Py_ssize_t i = 0; i < args_size - 2; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[2+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, _python_par_self, _python_par_parent_instance, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_parent_instance );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), MAKE_TUPLE( &args[ 2 ], size > 2 ? size-2 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_orig( _python_str_plain_orig );

    // Actual function code.
    static PyFrameObject *frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models ) )
    {
        if ( frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models );
        }

        frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models = MAKE_FRAME( _codeobj_c86b1f796904e8d19584b03dcc5fad2d, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 956 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 957 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_pk_field ) ).asObject() ) )
            {
                return INCREASE_REFCOUNT( Py_None );
            }
            frame_guard.setLineNumber( 960 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_instance );
        }
        }
        frame_guard.setLineNumber( 962 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 963 );
            {
                PyObjectTempKeeper1 getattr3;
                _python_var_orig.assign1( ( getattr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_instance ) ), BUILTIN_GETATTR( getattr3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field ) ).asObject(), NULL ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 965 );
            _python_var_orig.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_instance ) ).asObject(), _python_str_plain_pk ) );
        }
        frame_guard.setLineNumber( 966 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper0 call8;
            PyObjectTempKeeper1 cmp12;
            if ( ( cmp12.assign( ( call8.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_value.asObject() ) ) ), RICH_COMPARE_BOOL_NE( cmp12.asObject0(), PyObjectTemporary( ( call10.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_orig.asObject() ) ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 967 );
            {
                PyObjectTempKeeper0 call6;
                {
                    PyObjectTemporary tmp_exception_type( ( call6.assign( _mvar_django__forms__models_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 968 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_instance );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_orig.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models );
           frame_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_False );
}
static PyObject *fparse_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_16_ModelChoiceIterator_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___iter__( _python_str_plain___iter__ );
    PyObjectLocalVariable _python_var___len__( _python_str_plain___len__ );
    PyObjectLocalVariable _python_var_choice( _python_str_plain_choice );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  ) );
    _python_var___iter__.assign1( MAKE_FUNCTION_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  ) );
    _python_var___len__.assign1( MAKE_FUNCTION_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  ) );
    _python_var_choice.assign1( MAKE_FUNCTION_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models(  ) );
    return _python_var_choice.updateLocalsDict( _python_var___len__.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models = MAKE_FRAME( _codeobj_7ac924e487b280cae61772f253d4c768, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 975 );
        {
                PyObject *tmp_identifier = _python_var_field.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_field );
        }
        frame_guard.setLineNumber( 976 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_queryset ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_queryset );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
           frame_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, _python_par_self, _python_par_field );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalVariable python_var_choice;
    PyObjectLocalVariable python_var_obj;
};

static void _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_destructor( void *context_voidptr )
{
    _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_t *_python_context = (struct _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_t *)context_voidptr;

    delete _python_context;
}

static void function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_t *_python_context = (_context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_choice.setVariableName( _python_str_plain_choice );
        _python_context->python_var_obj.setVariableName( _python_str_plain_obj );

        // Actual function code.
        static PyFrameObject *frame_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models ) )
        {
            if ( frame_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models" );
#endif
                Py_DECREF( frame_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
            }

            frame_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models = MAKE_FRAME( _codeobj_676c127078423755cfdcc8fb0fd86dc2, _module_django__forms__models );
        }

        Py_INCREF( frame_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
        generator->m_frame = frame_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 979 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_empty_label ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 980 );
                YIELD_VALUE( generator, MAKE_TUPLE2( _python_unicode_empty, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_empty_label ) ).asObject() ) );
            }
            frame_guard.setLineNumber( 981 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_cache_choices ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 982 );
                if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_choice_cache ) ).asObject() == Py_None ) )
                {
                    frame_guard.setLineNumber( 983 );
                    {
                            PyObjectTemporary tmp_identifier( impl_listcontr_1_of_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_queryset ) ).asObject(), _python_str_plain_all ) ).asObject() ) ).asObject() ), _python_context->python_var_obj, _python_context->python_var_self ) );
                            SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_choice_cache );
                    }
                }
                {
                    frame_guard.setLineNumber( 986 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_choice_cache ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 986 );
                            PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_1 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                            _python_context->python_var_choice.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 987 );
                        YIELD_VALUE( generator, _python_context->python_var_choice.asObject1() );

                       CONSIDER_THREADING();
                    }
                }
            }
            else
            {
                {
                    frame_guard.setLineNumber( 989 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_queryset ) ).asObject(), _python_str_plain_all ) ).asObject() ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 989 );
                            PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_2 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                            _python_context->python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 990 );
                        {
                            PyObjectTempKeeper1 call1;
                            YIELD_VALUE( generator, ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_choice ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_obj.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_t *_python_context = new _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_context,
            _python_str_plain___iter__,
            _codeobj_676c127078423755cfdcc8fb0fd86dc2,
            _python_context,
            _context_generator_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function __iter__" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__iter__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_obj,PyObjectLocalParameterVariableNoDel &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 984 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 984 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_obj.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_choice ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_obj.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models ) )
    {
        if ( frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
        }

        frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models = MAKE_FRAME( _codeobj_e03f333e14b7c3f5f3db4c00a983b208, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 993 );
        {
            PyObjectTempKeeper1 op1;
            return ( op1.assign( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) ).asObject() ) ), BINARY_OPERATION_ADD( op1.asObject0(), ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_empty_label ) ).asObject() != Py_None ) ? _python_int_pos_1 : _python_int_0 ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models );
           frame_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__len__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__len__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__len__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__len__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__len__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__len__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__len__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models ) )
    {
        if ( frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models );
        }

        frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models = MAKE_FRAME( _codeobj_183dd04b1c9248ba0187348c427cbcc7, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 997 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 make_tuple5;
            return ( make_tuple5.assign( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_prepare_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_obj.asObject() ) ) ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_label_from_instance ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_obj.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models );
           frame_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "choice() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "choice() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "choice() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "choice() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "choice() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "choice() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "choice() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "choice() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "choice() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "choice() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "choice() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "choice() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "choice() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "choice() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "choice() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "choice() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "choice() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "choice() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "choice() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "choice() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );
    PyObjectLocalVariable _python_var__get_queryset( _python_str_plain__get_queryset );
    PyObjectLocalVariable _python_var__set_queryset( _python_str_plain__set_queryset );
    PyObjectLocalVariable _python_var_queryset( _python_str_plain_queryset );
    PyObjectLocalVariable _python_var_label_from_instance( _python_str_plain_label_from_instance );
    PyObjectLocalVariable _python_var__get_choices( _python_str_plain__get_choices );
    PyObjectLocalVariable _python_var_choices( _python_str_plain_choices );
    PyObjectLocalVariable _python_var_prepare_value( _python_str_plain_prepare_value );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    _python_var___doc__.assign0( _python_unicode_digest_fca5b1a6f6ea5bd4fd7d9555c650a572 );
    static PyFrameObject *frame_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_1dd443ef6c252a9b4ffe06229704002e, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1003 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models__.asObject0(), _python_unicode_digest_bf9066b27c647b8d3cc6b70ecc08c850 ) ).asObject(), _python_unicode_plain_invalid_choice ) );
        _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
        _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
        _python_var__get_queryset.assign1( MAKE_FUNCTION_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
        _python_var__set_queryset.assign1( MAKE_FUNCTION_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
        frame_guard.setLineNumber( 1038 );
        {
            PyObjectTempKeeper0 call2;
            _python_var_queryset.assign1( ( call2.assign( _python_var__get_queryset.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), call2.asObject0(), _python_var__set_queryset.asObject() ) ) );
        }
        _python_var_label_from_instance.assign1( MAKE_FUNCTION_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
        _python_var__get_choices.assign1( MAKE_FUNCTION_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
        frame_guard.setLineNumber( 1065 );
        {
            PyObjectTempKeeper0 call5;
            _python_var_choices.assign1( ( call5.assign( _python_var__get_choices.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_ChoiceField.asObject0(), _python_str_plain__set_choices ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var__get_choices.updateLocalsDict( _python_var_label_from_instance.updateLocalsDict( _python_var_queryset.updateLocalsDict( _python_var__set_queryset.updateLocalsDict( _python_var__get_queryset.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        throw;
    }
    _python_var_prepare_value.assign1( MAKE_FUNCTION_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var__get_choices.updateLocalsDict( _python_var_label_from_instance.updateLocalsDict( _python_var_queryset.updateLocalsDict( _python_var__set_queryset.updateLocalsDict( _python_var__get_queryset.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_queryset, PyObject *_python_par_empty_label, PyObject *_python_par_cache_choices, PyObject *_python_par_required, PyObject *_python_par_widget, PyObject *_python_par_label, PyObject *_python_par_initial, PyObject *_python_par_help_text, PyObject *_python_par_to_field_name, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_queryset( _python_str_plain_queryset, _python_par_queryset );
    PyObjectLocalParameterVariableNoDel _python_var_empty_label( _python_str_plain_empty_label, _python_par_empty_label );
    PyObjectLocalParameterVariableNoDel _python_var_cache_choices( _python_str_plain_cache_choices, _python_par_cache_choices );
    PyObjectLocalParameterVariableNoDel _python_var_required( _python_str_plain_required, _python_par_required );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalParameterVariableNoDel _python_var_label( _python_str_plain_label, _python_par_label );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_help_text( _python_str_plain_help_text, _python_par_help_text );
    PyObjectLocalParameterVariableNoDel _python_var_to_field_name( _python_str_plain_to_field_name, _python_par_to_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_28fed38556b332bac08f89c60efb46ed, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1011 );
        if ( ( CHECK_IF_TRUE( _python_var_required.asObject() ) && ( _python_var_initial.asObject() != Py_None ) ) )
        {
            frame_guard.setLineNumber( 1012 );
            SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_empty_label );
        }
        else
        {
            frame_guard.setLineNumber( 1014 );
            {
                    PyObject *tmp_identifier = _python_var_empty_label.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_empty_label );
            }
        }
        frame_guard.setLineNumber( 1015 );
        {
                PyObject *tmp_identifier = _python_var_cache_choices.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_cache_choices );
        }
        frame_guard.setLineNumber( 1019 );
        {
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 call_tmp9;
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            PyObjectTempKeeper0 make_tuple5;
            DECREASE_REFCOUNT( ( call_tmp7.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp8.assign( ( make_tuple1.assign( _python_var_self.asObject() ), make_tuple2.assign( _python_var_required.asObject() ), make_tuple3.assign( _python_var_widget.asObject() ), make_tuple4.assign( _python_var_label.asObject() ), make_tuple5.assign( _python_var_initial.asObject() ), MAKE_TUPLE6( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), make_tuple4.asObject0(), make_tuple5.asObject0(), _python_var_help_text.asObject() ) ) ), call_tmp9.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp7.asObject(), call_tmp8.asObject(), call_tmp9.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1021 );
        {
                PyObject *tmp_identifier = _python_var_queryset.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_queryset );
        }
        frame_guard.setLineNumber( 1022 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_choice_cache );
        frame_guard.setLineNumber( 1023 );
        {
                PyObject *tmp_identifier = _python_var_to_field_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_to_field_name );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_to_field_name.updateLocalsDict( _python_var_help_text.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_label.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_required.updateLocalsDict( _python_var_cache_choices.updateLocalsDict( _python_var_empty_label.updateLocalsDict( _python_var_queryset.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_queryset = NULL;
    PyObject *_python_par_empty_label = NULL;
    PyObject *_python_par_cache_choices = NULL;
    PyObject *_python_par_required = NULL;
    PyObject *_python_par_widget = NULL;
    PyObject *_python_par_label = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_help_text = NULL;
    PyObject *_python_par_to_field_name = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument queryset was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_queryset );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_queryset == NULL );

            _python_par_queryset = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_queryset );

            kw_found += 1;
        }
    }

    // Check if argument empty_label was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_empty_label );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_empty_label == NULL );

            _python_par_empty_label = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_empty_label );

            kw_found += 1;
        }
    }

    // Check if argument cache_choices was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_cache_choices );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_cache_choices == NULL );

            _python_par_cache_choices = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_cache_choices );

            kw_found += 1;
        }
    }

    // Check if argument required was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_required );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_required == NULL );

            _python_par_required = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_required );

            kw_found += 1;
        }
    }

    // Check if argument widget was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_widget );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_widget == NULL );

            _python_par_widget = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_widget );

            kw_found += 1;
        }
    }

    // Check if argument label was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_label );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_label == NULL );

            _python_par_label = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_label );

            kw_found += 1;
        }
    }

    // Check if argument initial was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_initial );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_initial == NULL );

            _python_par_initial = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_initial );

            kw_found += 1;
        }
    }

    // Check if argument help_text was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_help_text );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_help_text == NULL );

            _python_par_help_text = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_help_text );

            kw_found += 1;
        }
    }

    // Check if argument to_field_name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to_field_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to_field_name == NULL );

            _python_par_to_field_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to_field_name );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 10 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 10, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 10, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 10 ? args_given : 10;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_queryset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'queryset'" );
             goto error_exit;
         }

        _python_par_queryset = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_empty_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'empty_label'" );
             goto error_exit;
         }

        _python_par_empty_label = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_cache_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'cache_choices'" );
             goto error_exit;
         }

        _python_par_cache_choices = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_required != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'required'" );
             goto error_exit;
         }

        _python_par_required = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label'" );
             goto error_exit;
         }

        _python_par_label = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_help_text != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
             goto error_exit;
         }

        _python_par_help_text = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_to_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to_field_name'" );
             goto error_exit;
         }

        _python_par_to_field_name = INCREASE_REFCOUNT( args[ 9 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 10 )
    {
        _python_par_args = PyTuple_New( args_size - 10 );

        for( Py_ssize_t i = 0; i < args_size - 10; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[10+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_empty_label == NULL )
    {
        _python_par_empty_label = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_empty_label );
    }
    if ( _python_par_cache_choices == NULL )
    {
        _python_par_cache_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_cache_choices );
    }
    if ( _python_par_required == NULL )
    {
        _python_par_required = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_required );
    }
    if ( _python_par_widget == NULL )
    {
        _python_par_widget = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_widget );
    }
    if ( _python_par_label == NULL )
    {
        _python_par_label = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_label );
    }
    if ( _python_par_initial == NULL )
    {
        _python_par_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_initial );
    }
    if ( _python_par_help_text == NULL )
    {
        _python_par_help_text = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_help_text );
    }
    if ( _python_par_to_field_name == NULL )
    {
        _python_par_to_field_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_to_field_name );
    }


    return impl_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_queryset, _python_par_empty_label, _python_par_cache_choices, _python_par_required, _python_par_widget, _python_par_label, _python_par_initial, _python_par_help_text, _python_par_to_field_name, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_queryset );
    Py_XDECREF( _python_par_empty_label );
    Py_XDECREF( _python_par_cache_choices );
    Py_XDECREF( _python_par_required );
    Py_XDECREF( _python_par_widget );
    Py_XDECREF( _python_par_label );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_help_text );
    Py_XDECREF( _python_par_to_field_name );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 12)
    {
        return impl_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ), MAKE_TUPLE( &args[ 10 ], size > 10 ? size-10 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );

    // Actual function code.
    static PyFrameObject *frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_cd8acdb6ca03de32a3d09d543dba0818, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1026 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_result.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_ChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___deepcopy__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_memo.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1028 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_result.asObject(), _python_str_plain_queryset ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_result.asObject(), _python_str_plain_queryset );
        }
        frame_guard.setLineNumber( 1029 );
        return _python_var_result.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memo.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_result.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memo == key )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memo, key ) )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_memo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memo );

    return NULL;
}

static PyObject *dparse_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_36dc61fa88388ca34205e192edc2c3a1, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1032 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__queryset );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_queryset() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_queryset() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_queryset() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_queryset() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_queryset )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_queryset( _python_str_plain_queryset, _python_par_queryset );

    // Actual function code.
    static PyFrameObject *frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_3102c64ec98e3169bc150a3cff63d43e, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1035 );
        {
                PyObject *tmp_identifier = _python_var_queryset.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__queryset );
        }
        frame_guard.setLineNumber( 1036 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ).asObject(), _python_str_plain_choices );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_queryset.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_queryset = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_set_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_queryset == key )
            {
                if (unlikely( _python_par_queryset ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_queryset() got multiple values for keyword argument 'queryset'" );
                    goto error_exit;
                }

                _python_par_queryset = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_queryset, key ) )
            {
                if (unlikely( _python_par_queryset ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_queryset() got multiple values for keyword argument 'queryset'" );
                    goto error_exit;
                }

                _python_par_queryset = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_set_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_set_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_set_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_set_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_set_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_set_queryset() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_set_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_set_queryset() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_set_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_set_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_set_queryset() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_set_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_set_queryset() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_set_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_queryset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_set_queryset() got multiple values for keyword argument 'queryset'" );
             goto error_exit;
         }

        _python_par_queryset = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_queryset );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_queryset );

    return NULL;
}

static PyObject *dparse_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_cb265846324fa70a151684204cd8ede7, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1048 );
        {
            PyObjectTempKeeper0 call1;
            return ( call1.assign( _mvar_django__forms__models_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_obj.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "label_from_instance() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "label_from_instance() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "label_from_instance() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "label_from_instance() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "label_from_instance() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "label_from_instance() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "label_from_instance() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "label_from_instance() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "label_from_instance() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "label_from_instance() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "label_from_instance() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "label_from_instance() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "label_from_instance() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "label_from_instance() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "label_from_instance() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "label_from_instance() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "label_from_instance() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "label_from_instance() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "label_from_instance() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "label_from_instance() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_c17c3d3ef61a78efbc42f1b78bab35a5, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1053 );
        if ( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_unicode_plain__choices ) )
        {
            frame_guard.setLineNumber( 1054 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__choices );
        }
        frame_guard.setLineNumber( 1063 );
        {
            PyObjectTempKeeper0 call1;
            return ( call1.assign( _mvar_django__forms__models_ModelChoiceIterator.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_self.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_choices() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_choices() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_9f850214d6ecac2e960190128993d400, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1068 );
        if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain__meta ) )
        {
            frame_guard.setLineNumber( 1069 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field_name ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 1070 );
                {
                    PyObjectTempKeeper1 call1;
                    return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_serializable_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field_name ) ).asObject() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1072 );
                return LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_pk );
            }
        }
        frame_guard.setLineNumber( 1073 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__models_ModelChoiceField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_prepare_value ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prepare_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prepare_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_key( _python_str_plain_key );

    // Actual function code.
    static PyFrameObject *frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_94daaa7f7f2b9bbc6d009d5dcb4ae720, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1076 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 1078 );
        try
        {
            frame_guard.setLineNumber( 1079 );
            {
                PyObjectTempKeeper1 keeper_0;
                _python_var_key.assign0( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field_name ) ) ) ? PyObjectTemporary( keeper_0.asObject() ).asObject() : _python_unicode_plain_pk ) );
            }
            frame_guard.setLineNumber( 1080 );
            {
                PyObjectTempKeeper1 call_tmp7;
                PyObjectTempKeeper0 make_dict5;
                _python_var_value.assign1( ( call_tmp7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) ).asObject(), _python_str_plain_get ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp7.asObject(), ( make_dict5.assign( _python_var_value.asObject() ), MAKE_DICT1( make_dict5.asObject0(), _python_var_key.asObject() ) ) ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) || _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) ).asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain_DoesNotExist ) ).asObject() ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1082 );
                {
                    PyObjectTempKeeper0 call3;
                    {
                        PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__forms__models_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 1083 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_key.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_5bda96b46cd1e9fcb1f366c93ef5a5cd, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1086 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_Field.asObject0(), _python_str_plain_validate ) ), call2.assign( _python_var_self.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_initial_value( _python_str_plain_initial_value );
    PyObjectLocalVariable _python_var_data_value( _python_str_plain_data_value );

    // Actual function code.
    static PyFrameObject *frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models );
        }

        frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_f67fe337bb07f222b69ebbd70332caf1, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1089 );
        _python_var_initial_value.assign0( ( ( _python_var_initial.asObject() != Py_None ) ? _python_var_initial.asObject() : _python_unicode_empty ) );
        frame_guard.setLineNumber( 1090 );
        _python_var_data_value.assign0( ( ( _python_var_data.asObject() != Py_None ) ? _python_var_data.asObject() : _python_unicode_empty ) );
        frame_guard.setLineNumber( 1091 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper1 cmp7;
            return ( cmp7.assign( ( call3.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_prepare_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_initial_value.asObject() ) ) ).asObject() ) ) ), RICH_COMPARE_NE( cmp7.asObject0(), PyObjectTemporary( ( call5.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_data_value.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_data_value.updateLocalsDict( _python_var_initial_value.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models );
           frame_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_hidden_widget( _python_str_plain_hidden_widget );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var_prepare_value( _python_str_plain_prepare_value );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_models );
    _python_var___doc__.assign0( _python_unicode_digest_3546307fa40d2d9f4a49f73618b58154 );
    static PyFrameObject *frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_18_ModelMultipleChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
        }

        frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_035eb61cda3114c6e7cd38977b47e1a3, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1095 );
        _python_var_widget.assign0( _mvar_django__forms__models_SelectMultiple.asObject0() );
        frame_guard.setLineNumber( 1096 );
        _python_var_hidden_widget.assign0( _mvar_django__forms__models_MultipleHiddenInput.asObject0() );
        frame_guard.setLineNumber( 1097 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models__.asObject0(), _python_unicode_digest_dca1926e8b7d0edcdb4d788e72ca4ddb ) ), make_dict3.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models__.asObject0(), _python_unicode_digest_dc7e57c48d98c9d0f0372702f09e7ff2 ) ), MAKE_DICT3( make_dict1.asObject0(), _python_unicode_plain_list, make_dict3.asObject0(), _python_unicode_plain_invalid_choice, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models__.asObject0(), _python_unicode_digest_942a84a5b8cccc7a610fae3f3e4de540 ) ).asObject(), _python_unicode_plain_invalid_pk_value ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
           frame_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  ) );
    _python_var_clean.assign1( MAKE_FUNCTION_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  ) );
    _python_var_prepare_value.assign1( MAKE_FUNCTION_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_queryset, PyObject *_python_par_cache_choices, PyObject *_python_par_required, PyObject *_python_par_widget, PyObject *_python_par_label, PyObject *_python_par_initial, PyObject *_python_par_help_text, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_queryset( _python_str_plain_queryset, _python_par_queryset );
    PyObjectLocalParameterVariableNoDel _python_var_cache_choices( _python_str_plain_cache_choices, _python_par_cache_choices );
    PyObjectLocalParameterVariableNoDel _python_var_required( _python_str_plain_required, _python_par_required );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalParameterVariableNoDel _python_var_label( _python_str_plain_label, _python_par_label );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_help_text( _python_str_plain_help_text, _python_par_help_text );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
        }

        frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_e29e34b72580beabc7cfcb0275ba445c, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1107 );
        {
            PyObjectTempKeeper1 call_tmp11;
            PyObjectTempKeeper1 call_tmp12;
            PyObjectTempKeeper0 call_tmp13;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple5;
            PyObjectTempKeeper0 make_tuple6;
            PyObjectTempKeeper0 make_tuple7;
            PyObjectTempKeeper0 make_tuple8;
            PyObjectTempKeeper0 make_tuple9;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_ModelMultipleChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp12.assign( ( make_tuple3.assign( _python_var_queryset.asObject() ), make_tuple5.assign( _python_var_cache_choices.asObject() ), make_tuple6.assign( _python_var_required.asObject() ), make_tuple7.assign( _python_var_widget.asObject() ), make_tuple8.assign( _python_var_label.asObject() ), make_tuple9.assign( _python_var_initial.asObject() ), MAKE_TUPLE8( make_tuple3.asObject0(), Py_None, make_tuple5.asObject0(), make_tuple6.asObject0(), make_tuple7.asObject0(), make_tuple8.asObject0(), make_tuple9.asObject0(), _python_var_help_text.asObject() ) ) ), call_tmp13.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp11.asObject(), call_tmp12.asObject(), call_tmp13.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1111 );
        {
            PyObjectTempKeeper1 isinstance19;
            PyObjectTempKeeper1 isinstance21;
            if ( ( ( isinstance19.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ), BUILTIN_ISINSTANCE_BOOL( isinstance19.asObject0(), _mvar_django__forms__models_SelectMultiple.asObject0() ) ) && (!( ( isinstance21.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ), BUILTIN_ISINSTANCE_BOOL( isinstance21.asObject0(), _mvar_django__forms__models_CheckboxSelectMultiple.asObject0() ) ) )) ) )
        {
            frame_guard.setLineNumber( 1112 );
            _python_var_msg.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__models__.asObject0(), _python_unicode_digest_425fb2112914abdd313618062a94b1b9 ) );
            frame_guard.setLineNumber( 1113 );
            {
                PyObjectTempKeeper0 call15;
                PyObjectTempKeeper1 call16;
                {
                    PyObjectTemporary tmp_identifier( ( call15.assign( _mvar_django__forms__models_string_concat.asObject0() ), call16.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_help_text ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), call16.asObject0(), _python_unicode_space, _python_var_msg.asObject() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_help_text );
            }
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_help_text.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_label.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_required.updateLocalsDict( _python_var_cache_choices.updateLocalsDict( _python_var_queryset.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
           frame_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_queryset = NULL;
    PyObject *_python_par_cache_choices = NULL;
    PyObject *_python_par_required = NULL;
    PyObject *_python_par_widget = NULL;
    PyObject *_python_par_label = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_help_text = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument queryset was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_queryset );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_queryset == NULL );

            _python_par_queryset = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_queryset );

            kw_found += 1;
        }
    }

    // Check if argument cache_choices was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_cache_choices );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_cache_choices == NULL );

            _python_par_cache_choices = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_cache_choices );

            kw_found += 1;
        }
    }

    // Check if argument required was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_required );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_required == NULL );

            _python_par_required = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_required );

            kw_found += 1;
        }
    }

    // Check if argument widget was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_widget );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_widget == NULL );

            _python_par_widget = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_widget );

            kw_found += 1;
        }
    }

    // Check if argument label was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_label );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_label == NULL );

            _python_par_label = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_label );

            kw_found += 1;
        }
    }

    // Check if argument initial was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_initial );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_initial == NULL );

            _python_par_initial = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_initial );

            kw_found += 1;
        }
    }

    // Check if argument help_text was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_help_text );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_help_text == NULL );

            _python_par_help_text = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_help_text );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 8 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 8, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 8, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 8 ? args_given : 8;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_queryset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'queryset'" );
             goto error_exit;
         }

        _python_par_queryset = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_cache_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'cache_choices'" );
             goto error_exit;
         }

        _python_par_cache_choices = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_required != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'required'" );
             goto error_exit;
         }

        _python_par_required = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label'" );
             goto error_exit;
         }

        _python_par_label = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_help_text != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
             goto error_exit;
         }

        _python_par_help_text = INCREASE_REFCOUNT( args[ 7 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 8 )
    {
        _python_par_args = PyTuple_New( args_size - 8 );

        for( Py_ssize_t i = 0; i < args_size - 8; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[8+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_cache_choices == NULL )
    {
        _python_par_cache_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_cache_choices );
    }
    if ( _python_par_required == NULL )
    {
        _python_par_required = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_required );
    }
    if ( _python_par_widget == NULL )
    {
        _python_par_widget = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_widget );
    }
    if ( _python_par_label == NULL )
    {
        _python_par_label = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_label );
    }
    if ( _python_par_initial == NULL )
    {
        _python_par_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_initial );
    }
    if ( _python_par_help_text == NULL )
    {
        _python_par_help_text = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_help_text );
    }


    return impl_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_queryset, _python_par_cache_choices, _python_par_required, _python_par_widget, _python_par_label, _python_par_initial, _python_par_help_text, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_queryset );
    Py_XDECREF( _python_par_cache_choices );
    Py_XDECREF( _python_par_required );
    Py_XDECREF( _python_par_widget );
    Py_XDECREF( _python_par_label );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_help_text );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 10)
    {
        return impl_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), MAKE_TUPLE( &args[ 8 ], size > 8 ? size-8 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_key( _python_str_plain_key );
    PyObjectLocalVariable _python_var_pk( _python_str_plain_pk );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_pks( _python_str_plain_pks );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );
    PyObjectLocalVariable _python_var_o( _python_str_plain_o );

    // Actual function code.
    static PyFrameObject *frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
        }

        frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_361f2e8686358f2482565605fd199394, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1116 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) && (!( CHECK_IF_TRUE( _python_var_value.asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 1117 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__models_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_required ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 1118 );
            if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) )) && (!( CHECK_IF_TRUE( _python_var_value.asObject() ) )) ) )
            {
                frame_guard.setLineNumber( 1119 );
                return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) ).asObject(), _python_str_plain_none ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 1120 );
        if ( (!( BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 1121 );
            {
                PyObjectTempKeeper0 call3;
                {
                    PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__forms__models_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_list ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 1122 );
        {
            PyObjectTempKeeper1 keeper_2;
            _python_var_key.assign0( ( CHECK_IF_TRUE( keeper_2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_field_name ) ) ) ? PyObjectTemporary( keeper_2.asObject() ).asObject() : _python_unicode_plain_pk ) );
        }
        {
            frame_guard.setLineNumber( 1123 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_value.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1123 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_pk.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1124 );
                try
                {
                    frame_guard.setLineNumber( 1125 );
                    {
                        PyObjectTempKeeper1 call_tmp11;
                        PyObjectTempKeeper0 make_dict9;
                        DECREASE_REFCOUNT( ( call_tmp11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp11.asObject(), ( make_dict9.assign( _python_var_pk.asObject() ), MAKE_DICT1( make_dict9.asObject0(), _python_var_key.asObject() ) ) ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_ValueError ) )
                    {
                        frame_guard.detachFrame();
                        frame_guard.setLineNumber( 1127 );
                        {
                            PyObjectTempKeeper0 call7;
                            PyObjectTempKeeper1 op5;
                            {
                                PyObjectTemporary tmp_exception_type( ( call7.assign( _mvar_django__forms__models_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( ( op5.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_pk_value ) ), BINARY_OPERATION_REMAINDER( op5.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_pk.asObject(), _python_unicode_plain_pk ) ).asObject() ) ) ).asObject() ) ) );
                                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                        }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1128 );
        {
            PyObjectTempKeeper1 call_tmp15;
            PyObjectTempKeeper0 make_dict13;
            _python_var_qs.assign1( ( call_tmp15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_queryset ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp15.asObject(), ( make_dict13.assign( _python_var_value.asObject() ), MAKE_DICT1( make_dict13.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, _python_var_key.asObject() ) ).asObject() ) ) ) ) );
        }
        frame_guard.setLineNumber( 1129 );
        _python_var_pks.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_listcontr_1_of_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( MAKE_ITERATOR( _python_var_qs.asObject() ), _python_var_key, _python_var_o ) ).asObject() ) );
        {
            frame_guard.setLineNumber( 1130 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_value.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1130 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    _python_var_val.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1131 );
                {
                    PyObjectTempKeeper0 call21;
                    PyObjectTempKeeper1 cmp23;
                    if ( ( cmp23.assign( ( call21.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_var_val.asObject() ) ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp23.asObject0(), _python_var_pks.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1132 );
                    {
                        PyObjectTempKeeper0 call19;
                        PyObjectTempKeeper1 op17;
                        {
                            PyObjectTemporary tmp_exception_type( ( call19.assign( _mvar_django__forms__models_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), PyObjectTemporary( ( op17.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ), BINARY_OPERATION_REMAINDER( op17.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_val.asObject(), _python_unicode_plain_value ) ).asObject() ) ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1135 );
        {
            PyObjectTempKeeper1 call25;
            DECREASE_REFCOUNT( ( call25.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_run_validators ) ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1136 );
        return _python_var_qs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_o.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_pks.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_pk.updateLocalsDict( _python_var_key.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
           frame_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_key,PyObjectLocalVariable &python_closure_o )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1129 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1129 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_o.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call4;
                    PyObjectTempKeeper0 getattr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call4.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), PyObjectTemporary( ( getattr1.assign( python_closure_o.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), python_closure_key.asObject(), NULL ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    static PyFrameObject *frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
        }

        frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_2821408966747212df0a595593300ccc, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1139 );
        {
            PyObjectTempKeeper0 isinstance1;
            if ( ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain___iter__ ) && ( (!( ( isinstance1.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_six.asObject0(), _python_str_plain_text_type ) ).asObject() ) ) )) && (!( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain__meta ) )) ) ) )
        {
            frame_guard.setLineNumber( 1142 );
            return impl_listcontr_1_of_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( MAKE_ITERATOR( _python_var_value.asObject() ), _python_var_self, _python_var_v );
        }
        }
        frame_guard.setLineNumber( 1143 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__models_ModelMultipleChoiceField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_prepare_value ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_v.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
           frame_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prepare_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prepare_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalVariable &python_closure_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1142 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1142 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_v.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper0 super1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__models_ModelMultipleChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), python_closure_self.asObject() ) ) ).asObject(), _python_str_plain_prepare_value ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), python_closure_v.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_initial_set( _python_str_plain_initial_set );
    PyObjectLocalVariable _python_var_data_set( _python_str_plain_data_set );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) )
    {
        if ( frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
        }

        frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = MAKE_FRAME( _codeobj_be43cf1f03a2dbf1941b6c4ac435026b, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1146 );
        if ( ( _python_var_initial.asObject() == Py_None ) )
        {
            _python_var_initial.assign1( PyList_New( 0 ) );
        }
        frame_guard.setLineNumber( 1148 );
        if ( ( _python_var_data.asObject() == Py_None ) )
        {
            _python_var_data.assign1( PyList_New( 0 ) );
        }
        frame_guard.setLineNumber( 1150 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( BUILTIN_LEN( _python_var_initial.asObject() ) ), RICH_COMPARE_BOOL_NE( cmp1.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_data.asObject() ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_True );
        }
        }
        frame_guard.setLineNumber( 1152 );
        {
            PyObjectTempKeeper1 call3;
            _python_var_initial_set.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_listcontr_1_of_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( MAKE_ITERATOR( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_prepare_value ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_initial.asObject() ) ) ).asObject() ), _python_var_value ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1153 );
        _python_var_data_set.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_listcontr_2_of_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( MAKE_ITERATOR( _python_var_data.asObject() ), _python_var_value ) ).asObject() ) );
        frame_guard.setLineNumber( 1154 );
        {
            PyObjectTempKeeper0 cmp5;
            return ( cmp5.assign( _python_var_data_set.asObject() ), RICH_COMPARE_NE( cmp5.asObject0(), _python_var_initial_set.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_data_set.updateLocalsDict( _python_var_initial_set.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models );
           frame_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1152 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1152 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_value.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_value.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1153 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1153 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_value.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( _mvar_django__forms__models_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_value.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_19_modelform_defines_fields_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject *_python_par_form_class )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_form_class( _python_str_plain_form_class, _python_par_form_class );

    // Actual function code.
    static PyFrameObject *frame_function_19_modelform_defines_fields_of_module_django__forms__models = NULL;

    if ( isFrameUnusable( frame_function_19_modelform_defines_fields_of_module_django__forms__models ) )
    {
        if ( frame_function_19_modelform_defines_fields_of_module_django__forms__models )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_modelform_defines_fields_of_module_django__forms__models" );
#endif
            Py_DECREF( frame_function_19_modelform_defines_fields_of_module_django__forms__models );
        }

        frame_function_19_modelform_defines_fields_of_module_django__forms__models = MAKE_FRAME( _codeobj_2bc6dc7815082e8c7b1734bead6876ee, _module_django__forms__models );
    }

    FrameGuard frame_guard( frame_function_19_modelform_defines_fields_of_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_function_19_modelform_defines_fields_of_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1158 );
        {
            PyObjectTempKeeper0 keeper_0;
            PyObjectTempKeeper0 keeper_1;
            PyObjectTempKeeper0 keeper_2;
            return INCREASE_REFCOUNT( ( CHECK_IF_TRUE( keeper_2.assign( BOOL_FROM( ( _python_var_form_class.asObject() != Py_None ) ) ) ) ? ( CHECK_IF_TRUE( keeper_1.assign( BOOL_FROM( HAS_ATTRIBUTE( _python_var_form_class.asObject(), _python_unicode_plain__meta ) ) ) ) ? ( CHECK_IF_TRUE( keeper_0.assign( BOOL_FROM( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form_class.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() != Py_None ) ) ) ) ? keeper_0.asObject0() : BOOL_FROM( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_form_class.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_exclude ) ).asObject() != Py_None ) ) ) : keeper_1.asObject0() ) : keeper_2.asObject0() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_form_class.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_19_modelform_defines_fields_of_module_django__forms__models )
        {
           Py_DECREF( frame_function_19_modelform_defines_fields_of_module_django__forms__models );
           frame_function_19_modelform_defines_fields_of_module_django__forms__models = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_19_modelform_defines_fields_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_form_class = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "modelform_defines_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_form_class == key )
            {
                if (unlikely( _python_par_form_class ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_defines_fields() got multiple values for keyword argument 'form_class'" );
                    goto error_exit;
                }

                _python_par_form_class = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_form_class, key ) )
            {
                if (unlikely( _python_par_form_class ))
                {
                    PyErr_Format( PyExc_TypeError, "modelform_defines_fields() got multiple values for keyword argument 'form_class'" );
                    goto error_exit;
                }

                _python_par_form_class = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "modelform_defines_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "modelform_defines_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_form_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "modelform_defines_fields() got multiple values for keyword argument 'form_class'" );
             goto error_exit;
         }

        _python_par_form_class = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_19_modelform_defines_fields_of_module_django__forms__models( self, _python_par_form_class );

error_exit:;

    Py_XDECREF( _python_par_form_class );

    return NULL;
}

static PyObject *dparse_function_19_modelform_defines_fields_of_module_django__forms__models( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_19_modelform_defines_fields_of_module_django__forms__models( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_modelform_defines_fields_of_module_django__forms__models( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_10__has_changed_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f67fe337bb07f222b69ebbd70332caf1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_10_validate_unique_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_validate_unique,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_920e855d3efa23b8a97f159694445188,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_11_get_unique_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_get_unique_error_message,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_42c35422ef105f6b651f2988d06d7116,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_modelformset_factory_of_module_django__forms__models( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_modelformset_factory_of_module_django__forms__models,
        dparse_function_11_modelformset_factory_of_module_django__forms__models,
        _python_str_plain_modelformset_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_056969e9c026d5fafdbb61699f459609,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_3336c3fb4fe52f3f3ff997426553b1c5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_12_get_date_error_message_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_get_date_error_message,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2d0e636a0564e17afe7cff768fab2e9b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13__get_foreign_key_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13__get_foreign_key_of_module_django__forms__models,
        dparse_function_13__get_foreign_key_of_module_django__forms__models,
        _python_str_plain__get_foreign_key,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5e7b1f73d41e51fb54831d7bcada5d2f,
        INCREASE_REFCOUNT( _python_tuple_none_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_bae56e8241713e409ee64b2876ab2873
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_13_get_form_error_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_get_form_error,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ec70041aad790e36d825e07375b321b8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_inlineformset_factory_of_module_django__forms__models( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_inlineformset_factory_of_module_django__forms__models,
        dparse_function_14_inlineformset_factory_of_module_django__forms__models,
        _python_str_plain_inlineformset_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_170ace467b71dface872954558ee28fa,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_217887f5525bef06d3c52bdb77244a2c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_14_save_existing_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_save_existing_objects,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4224577704812343a6a4fc5c8b3f98f0,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_15_save_new_objects_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_save_new_objects,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3c233ecabac1d377175122815f5bcc30,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_add_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3f7932d5e639333afafe793dc32d97c3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_f2e875c1f6e68d6f6d7154a3def7d6b5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_modelform_defines_fields_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_modelform_defines_fields_of_module_django__forms__models,
        dparse_function_19_modelform_defines_fields_of_module_django__forms__models,
        _python_str_plain_modelform_defines_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2bc6dc7815082e8c7b1734bead6876ee,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_1___init___of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8b86a1482990b8d4fbdc63d7a64f1762,
        INCREASE_REFCOUNT( _python_tuple_01f5234e6a199844859d7846c005b732_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        dparse_function_1___init___of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e5ef6d1d153bb13ece0b8d8ff878e6db,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_false_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models,
        dparse_function_1___init___of_class_15_InlineForeignKeyField_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_88aa8b5ad42b716040699487cfcf7d20,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        dparse_function_1___init___of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7ac924e487b280cae61772f253d4c768,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_1___init___of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_28fed38556b332bac08f89c60efb46ed,
        INCREASE_REFCOUNT( _python_tuple_37f5519b679ea9650f0b43e208e0603f_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        dparse_function_1___init___of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e29e34b72580beabc7cfcb0275ba445c,
        INCREASE_REFCOUNT( _python_tuple_false_true_none_none_none_unicode_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models,
        dparse_function_1___init___of_class_5_ModelFormOptions_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c8201573c85989eb38f9b7c9cb00a128,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models,
        dparse_function_1___init___of_class_7_BaseModelForm_of_module_django__forms__models,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_33c190ac2ecac8b9ff6fbbddd70e05c1,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models,
        dparse_function_1___new___of_class_6_ModelFormMetaclass_of_module_django__forms__models,
        _python_str_plain___new__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_12040f0a2617034e43b2694f885dcda6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_construct_instance_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_construct_instance_of_module_django__forms__models,
        dparse_function_1_construct_instance_of_module_django__forms__models,
        _python_str_plain_construct_instance,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1a378f3015b0e85dcd1a80e41c2744bf,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_e67846506a4494afd3dcb8979705f5ee
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObjectSharedLocalVariable &python_closure_AutoField, PyObjectSharedLocalVariable &python_closure_pk_is_not_editable )
{
    struct _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *_python_context = new _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_AutoField.shareWith( python_closure_AutoField );
    _python_context->python_closure_pk_is_not_editable.shareWith( python_closure_pk_is_not_editable );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_pk_is_not_editable,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_393b7a6da7707c0a17b059ef28afcd01,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None,
        _python_context,
        _context_function_1_pk_is_not_editable_of_function_16_add_fields_of_class_10_BaseModelFormSet_of_module_django__forms__models_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models( PyObjectSharedLocalVariable &python_closure_exclude, PyObjectSharedLocalVariable &python_closure_fields, PyObjectSharedLocalVariable &python_closure_form, PyObjectSharedLocalVariable &python_closure_instance, PyObjectSharedLocalVariable &python_closure_opts )
{
    struct _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_t *_python_context = new _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_exclude.shareWith( python_closure_exclude );
    _python_context->python_closure_fields.shareWith( python_closure_fields );
    _python_context->python_closure_form.shareWith( python_closure_form );
    _python_context->python_closure_instance.shareWith( python_closure_instance );
    _python_context->python_closure_opts.shareWith( python_closure_opts );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models,
        dparse_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models,
        _python_str_plain_save_m2m,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3fd407bd1b448401d1e635f927b8658e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None,
        _python_context,
        _context_function_1_save_m2m_of_function_2_save_instance_of_module_django__forms__models_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models( PyObjectSharedLocalVariable &python_closure_self )
{
    struct _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_t *_python_context = new _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_self.shareWith( python_closure_self );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_save_m2m,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a3186c07a305464a023b4b4bd77262f8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None,
        _python_context,
        _context_function_1_save_m2m_of_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_2___deepcopy___of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cd8acdb6ca03de32a3d09d543dba0818,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  )
{
    return Nuitka_Function_New(
        fparse_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        dparse_function_2___iter___of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        _python_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_676c127078423755cfdcc8fb0fd86dc2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models,
        dparse_function_2__update_errors_of_class_7_BaseModelForm_of_module_django__forms__models,
        _python_str_plain__update_errors,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1b54413411bf6cff9d00708f45817fcd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models,
        dparse_function_2_clean_of_class_15_InlineForeignKeyField_of_module_django__forms__models,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c86b1f796904e8d19584b03dcc5fad2d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        dparse_function_2_clean_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_361f2e8686358f2482565605fd199394,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_2_initial_form_count_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_initial_form_count,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fed72baeb64361b35c6484b6d3cb69a6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_7190874433a1d77cccefc8b0fd9bab1b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        dparse_function_2_initial_form_count_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        _python_str_plain_initial_form_count,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_55799eafe24003ebca4e682b3ad970b8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_save_instance_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_save_instance_of_module_django__forms__models,
        dparse_function_2_save_instance_of_module_django__forms__models,
        _python_str_plain_save_instance,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4838d0ba73e084c7d2687fbac762fbd2,
        INCREASE_REFCOUNT( _python_tuple_none_unicode_plain_saved_true_none_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_5ac408457f6e7b758d980e0dee1475cd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        dparse_function_3___len___of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        _python_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e03f333e14b7c3f5f3db4c00a983b208,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        dparse_function_3__construct_form_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        _python_str_plain__construct_form,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3baecc72bda4fbe9c61e4533b7ba5b50,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_3__existing_object_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain__existing_object,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_316eb8d2d6b63b8ef0a84c40264c70d1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_3__get_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain__get_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_36dc61fa88388ca34205e192edc2c3a1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models,
        dparse_function_3__get_validation_exclusions_of_class_7_BaseModelForm_of_module_django__forms__models,
        _python_str_plain__get_validation_exclusions,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_65cccf1bacb500542ea9b3585450c907,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_fd5619227ef5c3ceba936d5ac0e5f551
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models,
        dparse_function_3__has_changed_of_class_15_InlineForeignKeyField_of_module_django__forms__models,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_af2fc11f2b2fdce3d97abcccd3064448,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_model_to_dict_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_model_to_dict_of_module_django__forms__models,
        dparse_function_3_model_to_dict_of_module_django__forms__models,
        _python_str_plain_model_to_dict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5b55a6950d12aabdc78172cc8c072898,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_eadaf4c029513ffd5f136cfe174d0282
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        dparse_function_3_prepare_value_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        _python_str_plain_prepare_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2821408966747212df0a595593300ccc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_4__construct_form_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain__construct_form,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_44e6d30c964381966b9203dbdc054436,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        dparse_function_4__has_changed_of_class_18_ModelMultipleChoiceField_of_module_django__forms__models,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_be43cf1f03a2dbf1941b6c4ac435026b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_4__set_queryset_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain__set_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3102c64ec98e3169bc150a3cff63d43e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        dparse_function_4_choice_of_class_16_ModelChoiceIterator_of_module_django__forms__models,
        _python_str_plain_choice,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_183dd04b1c9248ba0187348c427cbcc7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models,
        dparse_function_4_clean_of_class_7_BaseModelForm_of_module_django__forms__models,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bfdd4050a1b2b2d5e181830c2544eea0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_fields_for_model_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_fields_for_model_of_module_django__forms__models,
        dparse_function_4_fields_for_model_of_module_django__forms__models,
        _python_str_plain_fields_for_model,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_09c4df3063d7d4d4f56c28e2ed3a79dc,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_668981bb4c2c9a6364a507b37a45c4e5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        dparse_function_4_get_default_prefix_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        _python_str_plain_get_default_prefix,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_92067fef748eede4eb1f8ce21f51ef9f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models,
        dparse_function_5__post_clean_of_class_7_BaseModelForm_of_module_django__forms__models,
        _python_str_plain__post_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e83ebd342f62c98e08c1416ad78c290f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_5_get_queryset_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_get_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f883adeb0e49d86a44f25f7a5d0ea128,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_5_label_from_instance_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain_label_from_instance,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cb265846324fa70a151684204cd8ede7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_c75fa7a409861cf6c6ba222ca9118e6a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        dparse_function_5_save_new_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        _python_str_plain_save_new,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a876fb2f6beeb0bc05e3db469eb046c5,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_6__get_choices_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain__get_choices,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c17c3d3ef61a78efbc42f1b78bab35a5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        dparse_function_6_add_fields_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        _python_str_plain_add_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fc6e3d2d51868c676a53a01e66442d6d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_6_save_new_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_save_new,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a88b246f5a348452eb85df4b5eaa27a6,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_b0d9a8f67cae9ce2323d1f253151e93f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models,
        dparse_function_6_validate_unique_of_class_7_BaseModelForm_of_module_django__forms__models,
        _python_str_plain_validate_unique,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9211bd8c9326b425f7f95e91d7314022,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_2f250b1b086771e10eaeafff71e4d508
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        dparse_function_7_get_unique_error_message_of_class_12_BaseInlineFormSet_of_module_django__forms__models,
        _python_str_plain_get_unique_error_message,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ad7990ce984804f6c2c7994abfb42c04,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_7_prepare_value_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain_prepare_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9f850214d6ecac2e960190128993d400,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_7_save_existing_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_save_existing,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_90960dfebe4091909e67c9dd6541a9af,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_c9e8e711e31bb8ad81666b8ee626bff0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models,
        dparse_function_7_save_of_class_7_BaseModelForm_of_module_django__forms__models,
        _python_str_plain_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_345cb8b5ba598ae98ad69fae542355ac,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_157910d956cd141795e2700ed1a8491d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_8_save_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_57727438c7f94c877101ca1046bdccee,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_292abf5b77574a5d889c1c2caf4e231c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_8_to_python_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_94daaa7f7f2b9bbc6d009d5dcb4ae720,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        dparse_function_9_clean_of_class_10_BaseModelFormSet_of_module_django__forms__models,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9694a0f575033025bd4182b20014a9b8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_modelform_factory_of_module_django__forms__models( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_modelform_factory_of_module_django__forms__models,
        dparse_function_9_modelform_factory_of_module_django__forms__models,
        _python_str_plain_modelform_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_62c19cdff29580fb04a07e5ac131d74d,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        _python_unicode_digest_862afdd57daf7bb50d356e71275cd69a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models,
        dparse_function_9_validate_of_class_17_ModelChoiceField_of_module_django__forms__models,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5bda96b46cd1e9fcb1f366c93ef5a5cd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__models,
        Py_None
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.forms.models",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__forms__models )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__forms__models );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__forms__models" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__forms__models = Py_InitModule4(
        "django.forms.models",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__forms__models = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__forms__models = (PyDictObject *)((PyModuleObject *)_module_django__forms__models)->md_dict;

    assertObject( _module_django__forms__models );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_47e28c49f6b3257d092228301adff2a2, _module_django__forms__models );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__forms__models );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__forms__models != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain___doc__, _python_unicode_digest_c6e086eb4ecd98ce01792b170a8734c1 );
    UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_6d1d38bd0fc3cef030d88e0562978ee7 );
    PyFrameObject *frame_module_django__forms__models = MAKE_FRAME( _codeobj_30ba1778223ee2b63a184aeb000e5ab0, _module_django__forms__models );

    FrameGuard frame_guard( frame_module_django__forms__models );
    try
    {
        assert( Py_REFCNT( frame_module_django__forms__models ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 6 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_absolute_import, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_absolute_import ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_unicode_literals, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_unicode_literals ) );
        frame_guard.setLineNumber( 8 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_warnings, IMPORT_MODULE( _python_str_plain_warnings, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 10 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ValidationError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d9333e07c409926fdd89a4c3c526d0b5, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_2b41744db545d47dde0e64bf4ee6d78f_list, _python_int_0 ) ).asObject(), _python_str_plain_ValidationError ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_NON_FIELD_ERRORS, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d9333e07c409926fdd89a4c3c526d0b5, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_2b41744db545d47dde0e64bf4ee6d78f_list, _python_int_0 ) ).asObject(), _python_str_plain_NON_FIELD_ERRORS ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_FieldError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d9333e07c409926fdd89a4c3c526d0b5, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_2b41744db545d47dde0e64bf4ee6d78f_list, _python_int_0 ) ).asObject(), _python_str_plain_FieldError ) );
        frame_guard.setLineNumber( 11 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_Field, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8c057bb609340e126205cffce924dfec, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_Field_str_plain_ChoiceField_list, _python_int_0 ) ).asObject(), _python_str_plain_Field ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ChoiceField, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8c057bb609340e126205cffce924dfec, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_Field_str_plain_ChoiceField_list, _python_int_0 ) ).asObject(), _python_str_plain_ChoiceField ) );
        frame_guard.setLineNumber( 12 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_BaseForm, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_9c340bf00385a8a1f453a507b575bdca, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_BaseForm_str_plain_get_declared_fields_list, _python_int_0 ) ).asObject(), _python_str_plain_BaseForm ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_get_declared_fields, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_9c340bf00385a8a1f453a507b575bdca, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_BaseForm_str_plain_get_declared_fields_list, _python_int_0 ) ).asObject(), _python_str_plain_get_declared_fields ) );
        frame_guard.setLineNumber( 13 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_BaseFormSet, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_4f4dff4c409f32c8e72e610b681ea86a, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_BaseFormSet_str_plain_formset_factory_list, _python_int_0 ) ).asObject(), _python_str_plain_BaseFormSet ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_formset_factory, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_4f4dff4c409f32c8e72e610b681ea86a, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_BaseFormSet_str_plain_formset_factory_list, _python_int_0 ) ).asObject(), _python_str_plain_formset_factory ) );
        frame_guard.setLineNumber( 14 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ErrorList, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1b1c01abd93a1fdb33baf4e4eaa9ff68, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_ErrorList_list, _python_int_0 ) ).asObject(), _python_str_plain_ErrorList ) );
        frame_guard.setLineNumber( 15 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_SelectMultiple, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a6267543eddcb35058205a44bdb17ad6_list, _python_int_0 ) ).asObject(), _python_str_plain_SelectMultiple ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_HiddenInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a6267543eddcb35058205a44bdb17ad6_list, _python_int_0 ) ).asObject(), _python_str_plain_HiddenInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_MultipleHiddenInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a6267543eddcb35058205a44bdb17ad6_list, _python_int_0 ) ).asObject(), _python_str_plain_MultipleHiddenInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_media_property, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a6267543eddcb35058205a44bdb17ad6_list, _python_int_0 ) ).asObject(), _python_str_plain_media_property ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_CheckboxSelectMultiple, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a6267543eddcb35058205a44bdb17ad6_list, _python_int_0 ) ).asObject(), _python_str_plain_CheckboxSelectMultiple ) );
        frame_guard.setLineNumber( 17 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_smart_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_smart_text_str_plain_force_text_list, _python_int_0 ) ).asObject(), _python_str_plain_smart_text ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_force_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_smart_text_str_plain_force_text_list, _python_int_0 ) ).asObject(), _python_str_plain_force_text ) );
        frame_guard.setLineNumber( 18 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_SortedDict, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_36fff8b06be9a51fbe6af4a1029911c0, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_SortedDict_list, _python_int_0 ) ).asObject(), _python_str_plain_SortedDict ) );
        frame_guard.setLineNumber( 19 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_six_list, _python_int_0 ) ).asObject(), _python_str_plain_six ) );
        frame_guard.setLineNumber( 20 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_get_text_list, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1863593e728059f3c0ba0d01334514dd, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_get_text_list_str_plain_capfirst_list, _python_int_0 ) ).asObject(), _python_str_plain_get_text_list ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_capfirst, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1863593e728059f3c0ba0d01334514dd, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_str_plain_get_text_list_str_plain_capfirst_list, _python_int_0 ) ).asObject(), _python_str_plain_capfirst ) );
        frame_guard.setLineNumber( 21 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain__, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a48fb36753cc90f8a2bea6201c5943b2_list, _python_int_0 ) ).asObject(), _python_str_plain_ugettext_lazy ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ugettext, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a48fb36753cc90f8a2bea6201c5943b2_list, _python_int_0 ) ).asObject(), _python_str_plain_ugettext ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_string_concat, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__forms__models)->md_dict, ((PyModuleObject *)_module_django__forms__models)->md_dict, _python_list_a48fb36753cc90f8a2bea6201c5943b2_list, _python_int_0 ) ).asObject(), _python_str_plain_string_concat ) );
        UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain___all__, _python_tuple_69cd770474bbaac04748b24451a21878_tuple );
        UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ALL_FIELDS, _python_unicode_plain___all__ );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_construct_instance, MAKE_FUNCTION_function_1_construct_instance_of_module_django__forms__models(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_save_instance, MAKE_FUNCTION_function_2_save_instance_of_module_django__forms__models(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_model_to_dict, MAKE_FUNCTION_function_3_model_to_dict_of_module_django__forms__models(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_fields_for_model, MAKE_FUNCTION_function_4_fields_for_model_of_module_django__forms__models(  ) );
        {
            frame_guard.setLineNumber( 193 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_5_ModelFormOptions_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_ModelFormOptions, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ModelFormOptions, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 202 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_type ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_6_ModelFormMetaclass_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call5;
                PyObjectTempKeeper0 call7;
                _tmp_python_tmp_class = ( call5.assign( _python_tmp_metaclass.asObject() ), call7.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_str_plain_ModelFormMetaclass, call7.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ModelFormMetaclass, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 271 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__models_BaseForm.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_7_BaseModelForm_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 call9;
                _tmp_python_tmp_class = ( call9.assign( _python_tmp_metaclass.asObject() ), call11.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_str_plain_BaseModelForm, call11.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_BaseModelForm, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 415 );
            PyObject *_tmp_python_tmp_bases;
            {
                PyObjectTempKeeper1 call13;
                PyObjectTempKeeper0 call14;
                _tmp_python_tmp_bases = MAKE_TUPLE1( PyObjectTemporary( ( call13.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__models_six.asObject0(), _python_str_plain_with_metaclass ) ), call14.assign( _mvar_django__forms__models_ModelFormMetaclass.asObject0() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), _mvar_django__forms__models_BaseModelForm.asObject0() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_bases( _tmp_python_tmp_bases );
            PyObjectTemporary _python_tmp_class_dict( impl_class_8_ModelForm_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call16;
                PyObjectTempKeeper0 call18;
                _tmp_python_tmp_class = ( call16.assign( _python_tmp_metaclass.asObject() ), call18.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), _python_str_plain_ModelForm, call18.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ModelForm, _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 418 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_modelform_factory, MAKE_FUNCTION_function_9_modelform_factory_of_module_django__forms__models( MAKE_TUPLE6( _mvar_django__forms__models_ModelForm.asObject0(), Py_None, Py_None, Py_None, Py_None, Py_None ) ) );
        {
            frame_guard.setLineNumber( 484 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__models_BaseFormSet.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_10_BaseModelFormSet_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call20;
                PyObjectTempKeeper0 call22;
                _tmp_python_tmp_class = ( call20.assign( _python_tmp_metaclass.asObject() ), call22.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), _python_str_plain_BaseModelFormSet, call22.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_BaseModelFormSet, _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 738 );
        {
            PyObjectTempKeeper0 make_tuple24;
            UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_modelformset_factory, MAKE_FUNCTION_function_11_modelformset_factory_of_module_django__forms__models( ( make_tuple24.assign( _mvar_django__forms__models_ModelForm.asObject0() ), MAKE_TUPLE12( make_tuple24.asObject0(), Py_None, _mvar_django__forms__models_BaseModelFormSet.asObject0(), _python_int_pos_1, Py_False, Py_False, Py_None, Py_None, Py_None, Py_None, Py_False, Py_None ) ) ) );
        }
        {
            frame_guard.setLineNumber( 772 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__models_BaseModelFormSet.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_12_BaseInlineFormSet_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call36;
                PyObjectTempKeeper0 call38;
                _tmp_python_tmp_class = ( call36.assign( _python_tmp_metaclass.asObject() ), call38.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call36.asObject0(), _python_str_plain_BaseInlineFormSet, call38.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_BaseInlineFormSet, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain__get_foreign_key, MAKE_FUNCTION_function_13__get_foreign_key_of_module_django__forms__models(  ) );
        frame_guard.setLineNumber( 897 );
        {
            PyObjectTempKeeper0 make_tuple40;
            UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_inlineformset_factory, MAKE_FUNCTION_function_14_inlineformset_factory_of_module_django__forms__models( ( make_tuple40.assign( _mvar_django__forms__models_ModelForm.asObject0() ), MAKE_TUPLE13( make_tuple40.asObject0(), _mvar_django__forms__models_BaseInlineFormSet.asObject0(), Py_None, Py_None, Py_None, _python_int_pos_3, Py_False, Py_True, Py_None, Py_None, Py_None, Py_False, Py_None ) ) ) );
        }
        {
            frame_guard.setLineNumber( 933 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__models_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_15_InlineForeignKeyField_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call53;
                PyObjectTempKeeper0 call55;
                _tmp_python_tmp_class = ( call53.assign( _python_tmp_metaclass.asObject() ), call55.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call53.asObject0(), _python_str_plain_InlineForeignKeyField, call55.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_InlineForeignKeyField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 973 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_16_ModelChoiceIterator_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call57;
                PyObjectTempKeeper0 call59;
                _tmp_python_tmp_class = ( call57.assign( _python_tmp_metaclass.asObject() ), call59.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call57.asObject0(), _python_str_plain_ModelChoiceIterator, call59.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ModelChoiceIterator, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 999 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__models_ChoiceField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_17_ModelChoiceField_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call61;
                PyObjectTempKeeper0 call63;
                _tmp_python_tmp_class = ( call61.assign( _python_tmp_metaclass.asObject() ), call63.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call61.asObject0(), _python_str_plain_ModelChoiceField, call63.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ModelChoiceField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1093 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__models_ModelChoiceField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_18_ModelMultipleChoiceField_of_module_django__forms__models(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__models___metaclass__.isInitialized( false ) ? _mvar_django__forms__models___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call65;
                PyObjectTempKeeper0 call67;
                _tmp_python_tmp_class = ( call65.assign( _python_tmp_metaclass.asObject() ), call67.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call65.asObject0(), _python_str_plain_ModelMultipleChoiceField, call67.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_ModelMultipleChoiceField, _python_tmp_class.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__forms__models)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }
    UPDATE_STRING_DICT1( _moduledict_django__forms__models, (Nuitka_StringObject *)_python_str_plain_modelform_defines_fields, MAKE_FUNCTION_function_19_modelform_defines_fields_of_module_django__forms__models(  ) );

   return MOD_RETURN_VALUE( _module_django__forms__models );
}
