// Generated code for Python source for module 'django.db.models.query'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__db__models__query is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__db__models__query;
PyDictObject *_moduledict_django__db__models__query;

// The module level variables.
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_AutoField( &_module_django__db__models__query, &_python_str_plain_AutoField );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_Collector( &_module_django__db__models__query, &_python_str_plain_Collector );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_DatabaseError( &_module_django__db__models__query, &_python_str_plain_DatabaseError );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_DateQuerySet( &_module_django__db__models__query, &_python_str_plain_DateQuerySet );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_DateTimeQuerySet( &_module_django__db__models__query, &_python_str_plain_DateTimeQuerySet );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_DeprecationWarning( &_module_django__db__models__query, &_python_str_plain_DeprecationWarning );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_EmptyQuerySet( &_module_django__db__models__query, &_python_str_plain_EmptyQuerySet );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_InstanceCheckMeta( &_module_django__db__models__query, &_python_str_plain_InstanceCheckMeta );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_InvalidQuery( &_module_django__db__models__query, &_python_str_plain_InvalidQuery );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_LOOKUP_SEP( &_module_django__db__models__query, &_python_str_plain_LOOKUP_SEP );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_Q( &_module_django__db__models__query, &_python_str_plain_Q );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_QuerySet( &_module_django__db__models__query, &_python_str_plain_QuerySet );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_REPR_OUTPUT_SIZE( &_module_django__db__models__query, &_python_str_plain_REPR_OUTPUT_SIZE );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_RawQuerySet( &_module_django__db__models__query, &_python_str_plain_RawQuerySet );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_ValuesListQuerySet( &_module_django__db__models__query, &_python_str_plain_ValuesListQuerySet );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_ValuesQuerySet( &_module_django__db__models__query, &_python_str_plain_ValuesQuerySet );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query___metaclass__( &_module_django__db__models__query, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_connections( &_module_django__db__models__query, &_python_str_plain_connections );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_copy( &_module_django__db__models__query, &_python_str_plain_copy );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_deferred_class_factory( &_module_django__db__models__query, &_python_str_plain_deferred_class_factory );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_exceptions( &_module_django__db__models__query, &_python_str_plain_exceptions );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_get_cached_row( &_module_django__db__models__query, &_python_str_plain_get_cached_row );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_get_klass_info( &_module_django__db__models__query, &_python_str_plain_get_klass_info );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_get_prefetcher( &_module_django__db__models__query, &_python_str_plain_get_prefetcher );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_itertools( &_module_django__db__models__query, &_python_str_plain_itertools );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_partition( &_module_django__db__models__query, &_python_str_plain_partition );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_prefetch_one_level( &_module_django__db__models__query, &_python_str_plain_prefetch_one_level );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_prefetch_related_objects( &_module_django__db__models__query, &_python_str_plain_prefetch_related_objects );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_router( &_module_django__db__models__query, &_python_str_plain_router );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_select_related_descend( &_module_django__db__models__query, &_python_str_plain_select_related_descend );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_settings( &_module_django__db__models__query, &_python_str_plain_settings );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_six( &_module_django__db__models__query, &_python_str_plain_six );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_sql( &_module_django__db__models__query, &_python_str_plain_sql );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_sys( &_module_django__db__models__query, &_python_str_plain_sys );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_timezone( &_module_django__db__models__query, &_python_str_plain_timezone );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_transaction( &_module_django__db__models__query, &_python_str_plain_transaction );
static PyObjectGlobalVariable_django__db__models__query _mvar_django__db__models__query_warnings( &_module_django__db__models__query, &_python_str_plain_warnings );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_QuerySet_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_obj );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_batch_size, PyObjectLocalVariable &python_closure_i, PyObjectLocalParameterVariableNoDel &python_closure_objs );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f );


NUITKA_LOCAL_MODULE PyObject *impl_class_2_InstanceCheckMeta_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_3_EmptyQuerySet_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_ValuesListQuerySet_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f, PyObjectLocalParameterVariableNoDel &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_data, PyObjectLocalVariable &python_closure_f );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_DateQuerySet_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_DateTimeQuerySet_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_8_get_klass_info_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_from_parent, PyObjectLocalVariable &python_closure_p );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_8_get_klass_info_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f, PyObjectLocalVariable &python_closure_non_seen_models );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_RawQuerySet_of_module_django__db__models__query(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_c, PyObjectLocalParameterVariableNoDel &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_pos, PyObjectLocalVariable &python_closure_values );


static PyObject *MAKE_FUNCTION_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_11_insert_query_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_12_prefetch_related_objects_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_13_get_prefetcher_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_14_prefetch_one_level_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_8_get_klass_info_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_function_9_get_cached_row_of_module_django__db__models__query(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_QuerySet_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );
    PyObjectLocalVariable _python_var___getstate__( _python_str_plain___getstate__ );
    PyObjectLocalVariable _python_var___repr__( _python_str_plain___repr__ );
    PyObjectLocalVariable _python_var___len__( _python_str_plain___len__ );
    PyObjectLocalVariable _python_var___iter__( _python_str_plain___iter__ );
    PyObjectLocalVariable _python_var___nonzero__( _python_str_plain___nonzero__ );
    PyObjectLocalVariable _python_var___getitem__( _python_str_plain___getitem__ );
    PyObjectLocalVariable _python_var___and__( _python_str_plain___and__ );
    PyObjectLocalVariable _python_var___or__( _python_str_plain___or__ );
    PyObjectLocalVariable _python_var_iterator( _python_str_plain_iterator );
    PyObjectLocalVariable _python_var_aggregate( _python_str_plain_aggregate );
    PyObjectLocalVariable _python_var_count( _python_str_plain_count );
    PyObjectLocalVariable _python_var_get( _python_str_plain_get );
    PyObjectLocalVariable _python_var_create( _python_str_plain_create );
    PyObjectLocalVariable _python_var_bulk_create( _python_str_plain_bulk_create );
    PyObjectLocalVariable _python_var_get_or_create( _python_str_plain_get_or_create );
    PyObjectLocalVariable _python_var__earliest_or_latest( _python_str_plain__earliest_or_latest );
    PyObjectLocalVariable _python_var_earliest( _python_str_plain_earliest );
    PyObjectLocalVariable _python_var_latest( _python_str_plain_latest );
    PyObjectLocalVariable _python_var_first( _python_str_plain_first );
    PyObjectLocalVariable _python_var_last( _python_str_plain_last );
    PyObjectLocalVariable _python_var_in_bulk( _python_str_plain_in_bulk );
    PyObjectLocalVariable _python_var_delete( _python_str_plain_delete );
    PyObjectLocalVariable _python_var__raw_delete( _python_str_plain__raw_delete );
    PyObjectLocalVariable _python_var_update( _python_str_plain_update );
    PyObjectLocalVariable _python_var__update( _python_str_plain__update );
    PyObjectLocalVariable _python_var_exists( _python_str_plain_exists );
    PyObjectLocalVariable _python_var__prefetch_related_objects( _python_str_plain__prefetch_related_objects );
    PyObjectLocalVariable _python_var_values( _python_str_plain_values );
    PyObjectLocalVariable _python_var_values_list( _python_str_plain_values_list );
    PyObjectLocalVariable _python_var_dates( _python_str_plain_dates );
    PyObjectLocalVariable _python_var_datetimes( _python_str_plain_datetimes );
    PyObjectLocalVariable _python_var_none( _python_str_plain_none );
    PyObjectLocalVariable _python_var_all( _python_str_plain_all );
    PyObjectLocalVariable _python_var_filter( _python_str_plain_filter );
    PyObjectLocalVariable _python_var_exclude( _python_str_plain_exclude );
    PyObjectLocalVariable _python_var__filter_or_exclude( _python_str_plain__filter_or_exclude );
    PyObjectLocalVariable _python_var_complex_filter( _python_str_plain_complex_filter );
    PyObjectLocalVariable _python_var_select_for_update( _python_str_plain_select_for_update );
    PyObjectLocalVariable _python_var_select_related( _python_str_plain_select_related );
    PyObjectLocalVariable _python_var_prefetch_related( _python_str_plain_prefetch_related );
    PyObjectLocalVariable _python_var_annotate( _python_str_plain_annotate );
    PyObjectLocalVariable _python_var_order_by( _python_str_plain_order_by );
    PyObjectLocalVariable _python_var_distinct( _python_str_plain_distinct );
    PyObjectLocalVariable _python_var_extra( _python_str_plain_extra );
    PyObjectLocalVariable _python_var_reverse( _python_str_plain_reverse );
    PyObjectLocalVariable _python_var_defer( _python_str_plain_defer );
    PyObjectLocalVariable _python_var_only( _python_str_plain_only );
    PyObjectLocalVariable _python_var_using( _python_str_plain_using );
    PyObjectLocalVariable _python_var_ordered( _python_str_plain_ordered );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var__batched_insert( _python_str_plain__batched_insert );
    PyObjectLocalVariable _python_var__clone( _python_str_plain__clone );
    PyObjectLocalVariable _python_var__fetch_all( _python_str_plain__fetch_all );
    PyObjectLocalVariable _python_var__next_is_sticky( _python_str_plain__next_is_sticky );
    PyObjectLocalVariable _python_var__merge_sanity_check( _python_str_plain__merge_sanity_check );
    PyObjectLocalVariable _python_var__merge_known_related_objects( _python_str_plain__merge_known_related_objects );
    PyObjectLocalVariable _python_var__setup_aggregate_query( _python_str_plain__setup_aggregate_query );
    PyObjectLocalVariable _python_var__prepare( _python_str_plain__prepare );
    PyObjectLocalVariable _python_var__as_sql( _python_str_plain__as_sql );
    PyObjectLocalVariable _python_var_value_annotation( _python_str_plain_value_annotation );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var___doc__.assign0( _python_str_digest_e4bf3e00ffff3c55adf4d7ff21c01cf6 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___getstate__.assign1( MAKE_FUNCTION_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___repr__.assign1( MAKE_FUNCTION_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___len__.assign1( MAKE_FUNCTION_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___iter__.assign1( MAKE_FUNCTION_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___nonzero__.assign1( MAKE_FUNCTION_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___getitem__.assign1( MAKE_FUNCTION_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___and__.assign1( MAKE_FUNCTION_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var___or__.assign1( MAKE_FUNCTION_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_iterator.assign1( MAKE_FUNCTION_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_aggregate.assign1( MAKE_FUNCTION_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_count.assign1( MAKE_FUNCTION_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_get.assign1( MAKE_FUNCTION_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_create.assign1( MAKE_FUNCTION_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_bulk_create.assign1( MAKE_FUNCTION_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_get_or_create.assign1( MAKE_FUNCTION_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__earliest_or_latest.assign1( MAKE_FUNCTION_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_earliest.assign1( MAKE_FUNCTION_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_latest.assign1( MAKE_FUNCTION_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_first.assign1( MAKE_FUNCTION_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_last.assign1( MAKE_FUNCTION_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_in_bulk.assign1( MAKE_FUNCTION_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_delete.assign1( MAKE_FUNCTION_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    static PyFrameObject *frame_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_9b0e106d0cd07d1c9b75bdfa14b49b26, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 471 );
        SET_ATTRIBUTE( Py_True, _python_var_delete.asObject(), _python_str_plain_alters_data );
        _python_var__raw_delete.assign1( MAKE_FUNCTION_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        frame_guard.setLineNumber( 479 );
        SET_ATTRIBUTE( Py_True, _python_var__raw_delete.asObject(), _python_str_plain_alters_data );
        _python_var_update.assign1( MAKE_FUNCTION_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        frame_guard.setLineNumber( 495 );
        SET_ATTRIBUTE( Py_True, _python_var_update.asObject(), _python_str_plain_alters_data );
        _python_var__update.assign1( MAKE_FUNCTION_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        frame_guard.setLineNumber( 510 );
        SET_ATTRIBUTE( Py_True, _python_var__update.asObject(), _python_str_plain_alters_data );
        _python_var_exists.assign1( MAKE_FUNCTION_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var__prefetch_related_objects.assign1( MAKE_FUNCTION_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_values.assign1( MAKE_FUNCTION_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_values_list.assign1( MAKE_FUNCTION_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_dates.assign1( MAKE_FUNCTION_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_datetimes.assign1( MAKE_FUNCTION_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_none.assign1( MAKE_FUNCTION_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_all.assign1( MAKE_FUNCTION_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_filter.assign1( MAKE_FUNCTION_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_exclude.assign1( MAKE_FUNCTION_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var__filter_or_exclude.assign1( MAKE_FUNCTION_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_complex_filter.assign1( MAKE_FUNCTION_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_select_for_update.assign1( MAKE_FUNCTION_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_select_related.assign1( MAKE_FUNCTION_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_prefetch_related.assign1( MAKE_FUNCTION_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_annotate.assign1( MAKE_FUNCTION_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_order_by.assign1( MAKE_FUNCTION_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_distinct.assign1( MAKE_FUNCTION_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_extra.assign1( MAKE_FUNCTION_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_reverse.assign1( MAKE_FUNCTION_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_defer.assign1( MAKE_FUNCTION_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_only.assign1( MAKE_FUNCTION_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_using.assign1( MAKE_FUNCTION_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        _python_var_ordered.assign1( MAKE_FUNCTION_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
        frame_guard.setLineNumber( 811 );
        _python_var_ordered.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var_ordered.asObject() ) );
        frame_guard.setLineNumber( 813 );
        _python_var_db.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value_annotation.updateLocalsDict( _python_var__as_sql.updateLocalsDict( _python_var__prepare.updateLocalsDict( _python_var__setup_aggregate_query.updateLocalsDict( _python_var__merge_known_related_objects.updateLocalsDict( _python_var__merge_sanity_check.updateLocalsDict( _python_var__next_is_sticky.updateLocalsDict( _python_var__fetch_all.updateLocalsDict( _python_var__clone.updateLocalsDict( _python_var__batched_insert.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_ordered.updateLocalsDict( _python_var_using.updateLocalsDict( _python_var_only.updateLocalsDict( _python_var_defer.updateLocalsDict( _python_var_reverse.updateLocalsDict( _python_var_extra.updateLocalsDict( _python_var_distinct.updateLocalsDict( _python_var_order_by.updateLocalsDict( _python_var_annotate.updateLocalsDict( _python_var_prefetch_related.updateLocalsDict( _python_var_select_related.updateLocalsDict( _python_var_select_for_update.updateLocalsDict( _python_var_complex_filter.updateLocalsDict( _python_var__filter_or_exclude.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_filter.updateLocalsDict( _python_var_all.updateLocalsDict( _python_var_none.updateLocalsDict( _python_var_datetimes.updateLocalsDict( _python_var_dates.updateLocalsDict( _python_var_values_list.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var__prefetch_related_objects.updateLocalsDict( _python_var_exists.updateLocalsDict( _python_var__update.updateLocalsDict( _python_var_update.updateLocalsDict( _python_var__raw_delete.updateLocalsDict( _python_var_delete.updateLocalsDict( _python_var_in_bulk.updateLocalsDict( _python_var_last.updateLocalsDict( _python_var_first.updateLocalsDict( _python_var_latest.updateLocalsDict( _python_var_earliest.updateLocalsDict( _python_var__earliest_or_latest.updateLocalsDict( _python_var_get_or_create.updateLocalsDict( _python_var_bulk_create.updateLocalsDict( _python_var_create.updateLocalsDict( _python_var_get.updateLocalsDict( _python_var_count.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_iterator.updateLocalsDict( _python_var___or__.updateLocalsDict( _python_var___and__.updateLocalsDict( _python_var___getitem__.updateLocalsDict( _python_var___nonzero__.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var___len__.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var___getstate__.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_class_1_QuerySet_of_module_django__db__models__query );
           frame_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        throw;
    }
    _python_var__batched_insert.assign1( MAKE_FUNCTION_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__clone.assign1( MAKE_FUNCTION_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__fetch_all.assign1( MAKE_FUNCTION_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__next_is_sticky.assign1( MAKE_FUNCTION_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__merge_sanity_check.assign1( MAKE_FUNCTION_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__merge_known_related_objects.assign1( MAKE_FUNCTION_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__setup_aggregate_query.assign1( MAKE_FUNCTION_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__prepare.assign1( MAKE_FUNCTION_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var__as_sql.assign1( MAKE_FUNCTION_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query(  ) );
    _python_var_value_annotation.assign0( Py_True );
    return _python_var_value_annotation.updateLocalsDict( _python_var__as_sql.updateLocalsDict( _python_var__prepare.updateLocalsDict( _python_var__setup_aggregate_query.updateLocalsDict( _python_var__merge_known_related_objects.updateLocalsDict( _python_var__merge_sanity_check.updateLocalsDict( _python_var__next_is_sticky.updateLocalsDict( _python_var__fetch_all.updateLocalsDict( _python_var__clone.updateLocalsDict( _python_var__batched_insert.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_ordered.updateLocalsDict( _python_var_using.updateLocalsDict( _python_var_only.updateLocalsDict( _python_var_defer.updateLocalsDict( _python_var_reverse.updateLocalsDict( _python_var_extra.updateLocalsDict( _python_var_distinct.updateLocalsDict( _python_var_order_by.updateLocalsDict( _python_var_annotate.updateLocalsDict( _python_var_prefetch_related.updateLocalsDict( _python_var_select_related.updateLocalsDict( _python_var_select_for_update.updateLocalsDict( _python_var_complex_filter.updateLocalsDict( _python_var__filter_or_exclude.updateLocalsDict( _python_var_exclude.updateLocalsDict( _python_var_filter.updateLocalsDict( _python_var_all.updateLocalsDict( _python_var_none.updateLocalsDict( _python_var_datetimes.updateLocalsDict( _python_var_dates.updateLocalsDict( _python_var_values_list.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var__prefetch_related_objects.updateLocalsDict( _python_var_exists.updateLocalsDict( _python_var__update.updateLocalsDict( _python_var_update.updateLocalsDict( _python_var__raw_delete.updateLocalsDict( _python_var_delete.updateLocalsDict( _python_var_in_bulk.updateLocalsDict( _python_var_last.updateLocalsDict( _python_var_first.updateLocalsDict( _python_var_latest.updateLocalsDict( _python_var_earliest.updateLocalsDict( _python_var__earliest_or_latest.updateLocalsDict( _python_var_get_or_create.updateLocalsDict( _python_var_bulk_create.updateLocalsDict( _python_var_create.updateLocalsDict( _python_var_get.updateLocalsDict( _python_var_count.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_iterator.updateLocalsDict( _python_var___or__.updateLocalsDict( _python_var___and__.updateLocalsDict( _python_var___getitem__.updateLocalsDict( _python_var___nonzero__.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var___len__.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var___getstate__.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_model, PyObject *_python_par_query, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_query( _python_str_plain_query, _python_par_query );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_5539304d961951d1150e7ee086f443b9, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 35 );
        {
                PyObject *tmp_identifier = _python_var_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 36 );
        {
                PyObject *tmp_identifier = _python_var_using.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__db );
        }
        frame_guard.setLineNumber( 37 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 keeper_0;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_query.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_Query ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_query );
        }
        }
        frame_guard.setLineNumber( 38 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__result_cache );
        frame_guard.setLineNumber( 39 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain__sticky_filter );
        frame_guard.setLineNumber( 40 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain__for_write );
        frame_guard.setLineNumber( 41 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain__prefetch_related_lookups );
        frame_guard.setLineNumber( 42 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain__prefetch_done );
        frame_guard.setLineNumber( 43 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain__known_related_objects );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_query = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_query == key )
            {
                if (unlikely( _python_par_query ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query'" );
                    goto error_exit;
                }

                _python_par_query = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_query, key ) )
            {
                if (unlikely( _python_par_query ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query'" );
                    goto error_exit;
                }

                _python_par_query = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_query != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query'" );
             goto error_exit;
         }

        _python_par_query = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_model == NULL )
    {
        _python_par_model = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_model );
    }
    if ( _python_par_query == NULL )
    {
        _python_par_query = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_query );
    }
    if ( _python_par_using == NULL )
    {
        _python_par_using = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_using );
    }


    return impl_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_model, _python_par_query, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_query );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_k( _python_str_plain_k );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    static PyFrameObject *frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_132f95dd521980fb03218a4d12d3b8c0, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 53 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject() ) );
        {
            frame_guard.setLineNumber( 54 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___dict__ ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 54 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 54 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_k.assign0( _python_tmp_element_1.asObject() );
                        _python_var_v.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 55 );
                if ( RICH_COMPARE_BOOL_EQ( _python_var_k.asObject(), _python_str_plain__result_cache ) )
                {
                    frame_guard.setLineNumber( 56 );
                    {
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain___dict__ ) );
                            SET_SUBSCRIPT( Py_None, tmp_subscribed.asObject(), _python_var_k.asObject() );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 58 );
                    {
                        PyObjectTempKeeper1 call1;
                        PyObjectTempKeeper0 call2;
                        {
                            PyObjectTemporary tmp_identifier( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_copy.asObject0(), _python_str_plain_deepcopy ) ), call2.assign( _python_var_v.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_memo.asObject() ) ) );
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain___dict__ ) );
                            SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), _python_var_k.asObject() );
                    }
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 59 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memo.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_k.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memo == key )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memo, key ) )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_memo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memo );

    return NULL;
}

static PyObject *dparse_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_obj_dict( _python_str_plain_obj_dict );

    // Actual function code.
    static PyFrameObject *frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_a5e3d2565e42d1fb5b85e3380f87ac2b, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 66 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fetch_all ) ).asObject() ) );
        frame_guard.setLineNumber( 67 );
        _python_var_obj_dict.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___dict__ ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
        frame_guard.setLineNumber( 68 );
        return _python_var_obj_dict.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_obj_dict.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getstate__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getstate__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getstate__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getstate__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getstate__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__getstate__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__getstate__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getstate__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__getstate__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getstate__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__getstate__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getstate__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__getstate__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__getstate__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__getstate__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__getstate__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getstate__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );

    // Actual function code.
    static PyFrameObject *frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_6db3bf9afb3d75da42aedd40d74263f3, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 71 );
        {
            PyObjectTempKeeper0 slice1;
            _python_var_data.assign1( TO_LIST( PyObjectTemporary( ( slice1.assign( _python_var_self.asObject() ), LOOKUP_SLICE( slice1.asObject0(), Py_None, PyObjectTemporary( BINARY_OPERATION_ADD( _mvar_django__db__models__query_REPR_OUTPUT_SIZE.asObject0(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 72 );
        {
            PyObjectTempKeeper1 cmp4;
            if ( ( cmp4.assign( BUILTIN_LEN( _python_var_data.asObject() ) ), RICH_COMPARE_BOOL_GT( cmp4.asObject0(), _mvar_django__db__models__query_REPR_OUTPUT_SIZE.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 73 );
            SET_SUBSCRIPT( _python_str_digest_2e4a3b2e99b6841cbecca189351699f8, _python_var_data.asObject(), _python_int_neg_1 );
        }
        }
        frame_guard.setLineNumber( 74 );
        return UNARY_OPERATION( PyObject_Repr, _python_var_data.asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_data.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__repr__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5___len___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d8b467bab231d85483ef124e58c4bd6b, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 77 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fetch_all ) ).asObject() ) );
        frame_guard.setLineNumber( 78 );
        return BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__len__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__len__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__len__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__len__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__len__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__len__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__len__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__len__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__len__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_ebc3e0d754b50b56ad95557ce5e6e073, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 96 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fetch_all ) ).asObject() ) );
        frame_guard.setLineNumber( 97 );
        return MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__iter__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_bcb59548eee19c475e834b01e579fb15, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 100 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fetch_all ) ).asObject() ) );
        frame_guard.setLineNumber( 101 );
        return INCREASE_REFCOUNT( TO_BOOL( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__nonzero__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__nonzero__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__nonzero__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__nonzero__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__nonzero__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__nonzero__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__nonzero__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__nonzero__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__nonzero__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__nonzero__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__nonzero__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__nonzero__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__nonzero__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__nonzero__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__nonzero__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__nonzero__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__nonzero__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_k )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_k( _python_str_plain_k, _python_par_k );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_start( _python_str_plain_start );
    PyObjectLocalVariable _python_var_stop( _python_str_plain_stop );

    // Actual function code.
    static PyFrameObject *frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_210215d858f0c531cc7cb6bc276b4609, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 107 );
        {
            PyObjectTempKeeper0 isinstance1;
            if ( (!( ( isinstance1.assign( _python_var_k.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( PyObjectTemporary( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_slice ) ) ).asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_six.asObject0(), _python_str_plain_integer_types ) ).asObject() ) ).asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 108 );
            RAISE_EXCEPTION_WITH_TYPE( PyExc_TypeError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
        frame_guard.setLineNumber( 109 );
        if ( (!( ( ( (!( BUILTIN_ISINSTANCE_BOOL( _python_var_k.asObject(), LOOKUP_BUILTIN( _python_str_plain_slice ) ) )) && RICH_COMPARE_BOOL_GE( _python_var_k.asObject(), _python_int_0 ) ) || ( BUILTIN_ISINSTANCE_BOOL( _python_var_k.asObject(), LOOKUP_BUILTIN( _python_str_plain_slice ) ) && ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_start ) ).asObject() == Py_None ) || RICH_COMPARE_BOOL_GE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_start ) ).asObject(), _python_int_0 ) ) && ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_stop ) ).asObject() == Py_None ) || RICH_COMPARE_BOOL_GE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_stop ) ).asObject(), _python_int_0 ) ) ) ) ) )) )
        {
            frame_guard.setLineNumber( 109 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_2e3734752b371c4426a3f878b7df4435 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 114 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 115 );
            {
                PyObjectTempKeeper1 subscr3;
                return ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_k.asObject() ) );
            }
        }
        frame_guard.setLineNumber( 117 );
        if ( BUILTIN_ISINSTANCE_BOOL( _python_var_k.asObject(), LOOKUP_BUILTIN( _python_str_plain_slice ) ) )
        {
            frame_guard.setLineNumber( 118 );
            _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
            frame_guard.setLineNumber( 119 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_start ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 120 );
                _python_var_start.assign1( TO_INT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_start ) ).asObject() ) );
            }
            else
            {
                _python_var_start.assign0( Py_None );
            }
            frame_guard.setLineNumber( 123 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_stop ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 124 );
                _python_var_stop.assign1( TO_INT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_stop ) ).asObject() ) );
            }
            else
            {
                _python_var_stop.assign0( Py_None );
            }
            frame_guard.setLineNumber( 127 );
            {
                PyObjectTempKeeper1 call5;
                PyObjectTempKeeper0 call6;
                DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_limits ) ), call6.assign( _python_var_start.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_stop.asObject() ) ) );
            }
            frame_guard.setLineNumber( 128 );
            {
                PyObjectTempKeeper1 subscr8;
                return ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_step ) ).asObject() ) ? ( subscr8.assign( TO_LIST( _python_var_qs.asObject() ) ), LOOKUP_SUBSCRIPT( subscr8.asObject0(), PyObjectTemporary( MAKE_SLICEOBJ( Py_None, Py_None, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_k.asObject(), _python_str_plain_step ) ).asObject() ) ).asObject() ) ) : _python_var_qs.asObject1() );
            }
        }
        frame_guard.setLineNumber( 130 );
        _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 131 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper0 call11;
            DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_limits ) ), call11.assign( _python_var_k.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_k.asObject(), _python_int_pos_1 ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 132 );
        return LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( TO_LIST( _python_var_qs.asObject() ) ).asObject(), _python_int_0, 0 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_k.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_stop.updateLocalsDict( _python_var_start.updateLocalsDict( _python_var_qs.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_k = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_k == key )
            {
                if (unlikely( _python_par_k ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'k'" );
                    goto error_exit;
                }

                _python_par_k = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_k, key ) )
            {
                if (unlikely( _python_par_k ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'k'" );
                    goto error_exit;
                }

                _python_par_k = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getitem__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__getitem__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_k != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'k'" );
             goto error_exit;
         }

        _python_par_k = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_k );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_k );

    return NULL;
}

static PyObject *dparse_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );
    PyObjectLocalVariable _python_var_combined( _python_str_plain_combined );

    // Actual function code.
    static PyFrameObject *frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9___and___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_0500dfcea754476e33c4a87ef39926a4, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 135 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__merge_sanity_check ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_other.asObject() ) ) );
        }
        frame_guard.setLineNumber( 136 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_other.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _mvar_django__db__models__query_EmptyQuerySet.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 137 );
            return _python_var_other.asObject1();
        }
        }
        frame_guard.setLineNumber( 138 );
        {
            PyObjectTempKeeper0 isinstance5;
            if ( ( isinstance5.assign( _python_var_self.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _mvar_django__db__models__query_EmptyQuerySet.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 139 );
            return _python_var_self.asObject1();
        }
        }
        frame_guard.setLineNumber( 140 );
        _python_var_combined.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 141 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_combined.asObject(), _python_str_plain__merge_known_related_objects ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_other.asObject() ) ) );
        }
        frame_guard.setLineNumber( 142 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_combined.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_combine ) ), call10.assign( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain_query ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_AND ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 143 );
        return _python_var_combined.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_combined.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__and__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__and__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__and__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__and__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__and__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__and__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__and__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__and__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__and__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__and__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__and__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__and__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__and__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__and__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__and__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__and__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__and__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__and__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__and__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__and__() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );
    PyObjectLocalVariable _python_var_combined( _python_str_plain_combined );

    // Actual function code.
    static PyFrameObject *frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10___or___of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_218a7a06e335c17204d24a930d6bd0ce, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 146 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__merge_sanity_check ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_other.asObject() ) ) );
        }
        frame_guard.setLineNumber( 147 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_self.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _mvar_django__db__models__query_EmptyQuerySet.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 148 );
            return _python_var_other.asObject1();
        }
        }
        frame_guard.setLineNumber( 149 );
        {
            PyObjectTempKeeper0 isinstance5;
            if ( ( isinstance5.assign( _python_var_other.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _mvar_django__db__models__query_EmptyQuerySet.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 150 );
            return _python_var_self.asObject1();
        }
        }
        frame_guard.setLineNumber( 151 );
        _python_var_combined.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 152 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_combined.asObject(), _python_str_plain__merge_known_related_objects ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_other.asObject() ) ) );
        }
        frame_guard.setLineNumber( 153 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_combined.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_combine ) ), call10.assign( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain_query ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_OR ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 154 );
        return _python_var_combined.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_combined.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__or__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__or__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__or__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__or__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__or__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__or__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__or__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__or__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__or__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__or__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__or__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__or__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__or__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__or__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__or__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__or__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__or__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__or__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__or__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__or__() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalVariable python_var_fill_cache;
    PyObjectLocalVariable python_var_requested;
    PyObjectLocalVariable python_var_max_depth;
    PyObjectLocalVariable python_var_extra_select;
    PyObjectLocalVariable python_var_aggregate_select;
    PyObjectLocalVariable python_var_only_load;
    PyObjectLocalVariable python_var_fields;
    PyObjectLocalVariable python_var_load_fields;
    PyObjectLocalVariable python_var_field;
    PyObjectLocalVariable python_var_model;
    PyObjectLocalVariable python_var_index_start;
    PyObjectLocalVariable python_var_aggregate_start;
    PyObjectLocalVariable python_var_skip;
    PyObjectLocalVariable python_var_init_list;
    PyObjectLocalVariable python_var_model_cls;
    PyObjectLocalVariable python_var_db;
    PyObjectLocalVariable python_var_compiler;
    PyObjectLocalVariable python_var_klass_info;
    PyObjectLocalVariable python_var_row;
    PyObjectLocalVariable python_var_obj;
    PyObjectLocalVariable python_var__;
    PyObjectLocalVariable python_var_row_data;
    PyObjectLocalVariable python_var_i;
    PyObjectLocalVariable python_var_k;
    PyObjectLocalVariable python_var_aggregate;
    PyObjectLocalVariable python_var_rel_objs;
    PyObjectLocalVariable python_var_pk;
    PyObjectLocalVariable python_var_rel_obj;
};

static void _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_destructor( void *context_voidptr )
{
    _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_t *_python_context = (struct _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_t *)context_voidptr;

    delete _python_context;
}

static void function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_t *_python_context = (_context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_fill_cache.setVariableName( _python_str_plain_fill_cache );
        _python_context->python_var_requested.setVariableName( _python_str_plain_requested );
        _python_context->python_var_max_depth.setVariableName( _python_str_plain_max_depth );
        _python_context->python_var_extra_select.setVariableName( _python_str_plain_extra_select );
        _python_context->python_var_aggregate_select.setVariableName( _python_str_plain_aggregate_select );
        _python_context->python_var_only_load.setVariableName( _python_str_plain_only_load );
        _python_context->python_var_fields.setVariableName( _python_str_plain_fields );
        _python_context->python_var_load_fields.setVariableName( _python_str_plain_load_fields );
        _python_context->python_var_field.setVariableName( _python_str_plain_field );
        _python_context->python_var_model.setVariableName( _python_str_plain_model );
        _python_context->python_var_index_start.setVariableName( _python_str_plain_index_start );
        _python_context->python_var_aggregate_start.setVariableName( _python_str_plain_aggregate_start );
        _python_context->python_var_skip.setVariableName( _python_str_plain_skip );
        _python_context->python_var_init_list.setVariableName( _python_str_plain_init_list );
        _python_context->python_var_model_cls.setVariableName( _python_str_plain_model_cls );
        _python_context->python_var_db.setVariableName( _python_str_plain_db );
        _python_context->python_var_compiler.setVariableName( _python_str_plain_compiler );
        _python_context->python_var_klass_info.setVariableName( _python_str_plain_klass_info );
        _python_context->python_var_row.setVariableName( _python_str_plain_row );
        _python_context->python_var_obj.setVariableName( _python_str_plain_obj );
        _python_context->python_var__.setVariableName( _python_str_plain__ );
        _python_context->python_var_row_data.setVariableName( _python_str_plain_row_data );
        _python_context->python_var_i.setVariableName( _python_str_plain_i );
        _python_context->python_var_k.setVariableName( _python_str_plain_k );
        _python_context->python_var_aggregate.setVariableName( _python_str_plain_aggregate );
        _python_context->python_var_rel_objs.setVariableName( _python_str_plain_rel_objs );
        _python_context->python_var_pk.setVariableName( _python_str_plain_pk );
        _python_context->python_var_rel_obj.setVariableName( _python_str_plain_rel_obj );

        // Actual function code.
        _python_context->python_var_fill_cache.assign0( Py_False );
        static PyFrameObject *frame_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query ) )
        {
            if ( frame_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
                Py_DECREF( frame_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query );
            }

            frame_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_6f4745e3b89edef15017b35980fa329f, _module_django__db__models__query );
        }

        Py_INCREF( frame_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query );
        generator->m_frame = frame_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 166 );
            {
                PyObjectTempKeeper0 subscr1;
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_features ) ).asObject(), _python_str_plain_supports_select_related ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 167 );
                _python_context->python_var_fill_cache.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_related ) );
            }
            }
            frame_guard.setLineNumber( 168 );
            if ( BUILTIN_ISINSTANCE_BOOL( _python_context->python_var_fill_cache.asObject(), LOOKUP_BUILTIN( _python_str_plain_dict ) ) )
            {
                frame_guard.setLineNumber( 169 );
                _python_context->python_var_requested.assign0( _python_context->python_var_fill_cache.asObject() );
            }
            else
            {
                _python_context->python_var_requested.assign0( Py_None );
            }
            frame_guard.setLineNumber( 172 );
            _python_context->python_var_max_depth.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_max_depth ) );
            frame_guard.setLineNumber( 174 );
            _python_context->python_var_extra_select.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_extra_select ) ).asObject() ) );
            frame_guard.setLineNumber( 175 );
            _python_context->python_var_aggregate_select.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_aggregate_select ) ).asObject() ) );
            frame_guard.setLineNumber( 177 );
            _python_context->python_var_only_load.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_loaded_field_names ) ).asObject() ) );
            frame_guard.setLineNumber( 178 );
            if ( (!( CHECK_IF_TRUE( _python_context->python_var_fill_cache.asObject() ) )) )
            {
                frame_guard.setLineNumber( 179 );
                _python_context->python_var_fields.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_concrete_fields ) );
            }
            _python_context->python_var_load_fields.assign1( PyList_New( 0 ) );
            frame_guard.setLineNumber( 184 );
            if ( CHECK_IF_TRUE( _python_context->python_var_only_load.asObject() ) )
            {
                {
                    frame_guard.setLineNumber( 185 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_concrete_fields_with_model ) ).asObject() ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 185 );
                            PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_1 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                            {
                                frame_guard.setLineNumber( 185 );
                                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_context->python_var_field.assign0( _python_tmp_element_1.asObject() );
                                _python_context->python_var_model.assign0( _python_tmp_element_2.asObject() );
                            }
                        }
                        frame_guard.setLineNumber( 186 );
                        if ( ( _python_context->python_var_model.asObject() == Py_None ) )
                        {
                            frame_guard.setLineNumber( 187 );
                            _python_context->python_var_model.assign1( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) );
                        }
                        frame_guard.setLineNumber( 188 );
                        try
                        {
                            frame_guard.setLineNumber( 189 );
                            {
                                PyObjectTempKeeper1 cmp9;
                                PyObjectTempKeeper0 subscr7;
                                if ( ( cmp9.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_BOOL( cmp9.asObject0(), PyObjectTemporary( ( subscr7.assign( _python_context->python_var_only_load.asObject() ), LOOKUP_SUBSCRIPT( subscr7.asObject0(), _python_context->python_var_model.asObject() ) ) ).asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 191 );
                                {
                                    PyObjectTempKeeper1 call5;
                                    DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_load_fields.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                                }
                            }
                            }
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuardLight restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyExc_KeyError ) )
                            {
                                frame_guard.detachFrame();
                                frame_guard.setLineNumber( 195 );
                                {
                                    PyObjectTempKeeper1 call3;
                                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_load_fields.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }

                       CONSIDER_THREADING();
                    }
                }
            }
            frame_guard.setLineNumber( 197 );
            _python_context->python_var_index_start.assign1( BUILTIN_LEN( _python_context->python_var_extra_select.asObject() ) );
            frame_guard.setLineNumber( 198 );
            {
                PyObjectTempKeeper0 keeper_0;
                PyObjectTempKeeper0 op11;
                _python_context->python_var_aggregate_start.assign1( ( op11.assign( _python_context->python_var_index_start.asObject() ), BINARY_OPERATION_ADD( op11.asObject0(), PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( ( CHECK_IF_TRUE( keeper_0.assign( _python_context->python_var_load_fields.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_concrete_fields ) ) ).asObject() ) ).asObject() ) ) );
            }
            _python_context->python_var_skip.assign0( Py_None );
            frame_guard.setLineNumber( 201 );
            if ( ( CHECK_IF_TRUE( _python_context->python_var_load_fields.asObject() ) && (!( CHECK_IF_TRUE( _python_context->python_var_fill_cache.asObject() ) )) ) )
            {
                frame_guard.setLineNumber( 204 );
                _python_context->python_var_skip.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
                _python_context->python_var_init_list.assign1( PyList_New( 0 ) );
                {
                    frame_guard.setLineNumber( 206 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_context->python_var_fields.asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 206 );
                            PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_2 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                            _python_context->python_var_field.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 207 );
                        {
                            PyObjectTempKeeper1 cmp17;
                            if ( ( cmp17.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp17.asObject0(), _python_context->python_var_load_fields.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 208 );
                            {
                                PyObjectTempKeeper1 call13;
                                DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_skip.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_attname ) ).asObject() ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 210 );
                            {
                                PyObjectTempKeeper1 call15;
                                DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_init_list.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_attname ) ).asObject() ) ) );
                            }
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
                frame_guard.setLineNumber( 211 );
                {
                    PyObjectTempKeeper0 call19;
                    PyObjectTempKeeper1 call20;
                    _python_context->python_var_model_cls.assign1( ( call19.assign( _mvar_django__db__models__query_deferred_class_factory.asObject0() ), call20.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), call20.asObject0(), _python_context->python_var_skip.asObject() ) ) );
                }
            }
            frame_guard.setLineNumber( 214 );
            _python_context->python_var_db.assign1( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_db ) );
            frame_guard.setLineNumber( 215 );
            _python_context->python_var_model.assign1( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) );
            frame_guard.setLineNumber( 216 );
            {
                PyObjectTempKeeper1 call22;
                _python_context->python_var_compiler.assign1( ( call22.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION( call22.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_context->python_var_db.asObject(), _python_str_plain_using ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 217 );
            if ( CHECK_IF_TRUE( _python_context->python_var_fill_cache.asObject() ) )
            {
                frame_guard.setLineNumber( 218 );
                {
                    PyObjectTempKeeper0 call31;
                    PyObjectTempKeeper1 call32;
                    PyObjectTempKeeper0 make_dict25;
                    PyObjectTempKeeper0 make_dict27;
                    _python_context->python_var_klass_info.assign1( ( call31.assign( _mvar_django__db__models__query_get_klass_info.asObject0() ), call32.assign( MAKE_TUPLE1( _python_context->python_var_model.asObject() ) ), CALL_FUNCTION( call31.asObject0(), call32.asObject0(), PyObjectTemporary( ( make_dict25.assign( _python_context->python_var_max_depth.asObject() ), make_dict27.assign( _python_context->python_var_requested.asObject() ), MAKE_DICT3( make_dict25.asObject0(), _python_str_plain_max_depth, make_dict27.asObject0(), _python_str_plain_requested, _python_context->python_var_only_load.asObject(), _python_str_plain_only_load ) ) ).asObject() ) ) );
                }
            }
            {
                frame_guard.setLineNumber( 220 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_compiler.asObject(), _python_str_plain_results_iter ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 220 );
                        PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_3 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                        _python_context->python_var_row.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 221 );
                    if ( CHECK_IF_TRUE( _python_context->python_var_fill_cache.asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 222 );
                            PyObject *_tmp_python_tmp_source_iter;
                            {
                                PyObjectTempKeeper0 call38;
                                PyObjectTempKeeper1 call39;
                                PyObjectTempKeeper0 make_tuple34;
                                PyObjectTempKeeper0 make_tuple35;
                                PyObjectTempKeeper0 make_tuple36;
                                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call38.assign( _mvar_django__db__models__query_get_cached_row.asObject0() ), call39.assign( ( make_tuple34.assign( _python_context->python_var_row.asObject() ), make_tuple35.assign( _python_context->python_var_index_start.asObject() ), make_tuple36.assign( _python_context->python_var_db.asObject() ), MAKE_TUPLE4( make_tuple34.asObject0(), make_tuple35.asObject0(), make_tuple36.asObject0(), _python_context->python_var_klass_info.asObject() ) ) ), CALL_FUNCTION( call38.asObject0(), call39.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( BUILTIN_LEN( _python_context->python_var_aggregate_select.asObject() ) ).asObject(), _python_str_plain_offset ) ).asObject() ) ) ).asObject() );
                            }
                            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_context->python_var_obj.assign0( _python_tmp_element_1.asObject() );
                            _python_context->python_var__.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 226 );
                        {
                            PyObjectTempKeeper0 slice41;
                            PyObjectTempKeeper0 slice42;
                            _python_context->python_var_row_data.assign1( ( slice41.assign( _python_context->python_var_row.asObject() ), slice42.assign( _python_context->python_var_index_start.asObject() ), LOOKUP_SLICE( slice41.asObject0(), slice42.asObject0(), _python_context->python_var_aggregate_start.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 227 );
                        if ( CHECK_IF_TRUE( _python_context->python_var_skip.asObject() ) )
                        {
                            frame_guard.setLineNumber( 228 );
                            {
                                PyObjectTempKeeper0 call45;
                                PyObjectTempKeeper0 call_tmp47;
                                _python_context->python_var_obj.assign1( ( call_tmp47.assign( _python_context->python_var_model_cls.asObject() ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp47.asObject(), TO_DICT( PyObjectTemporary( ( call45.assign( _python_context->python_var_init_list.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_zip ), call45.asObject0(), _python_context->python_var_row_data.asObject() ) ) ).asObject(), NULL ) ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 230 );
                            {
                                PyObjectTempKeeper0 call_tmp49;
                                _python_context->python_var_obj.assign1( ( call_tmp49.assign( _python_context->python_var_model.asObject() ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp49.asObject(), _python_context->python_var_row_data.asObject1() ) ) );
                            }
                        }
                        frame_guard.setLineNumber( 233 );
                        {
                                PyObject *tmp_identifier = _python_context->python_var_db.asObject();
                                SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_obj.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db );
                        }
                        frame_guard.setLineNumber( 235 );
                        SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_obj.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_adding );
                    }
                    frame_guard.setLineNumber( 237 );
                    if ( CHECK_IF_TRUE( _python_context->python_var_extra_select.asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 238 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_context->python_var_extra_select.asObject() ) ).asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 238 );
                                    PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_4 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                                    {
                                        frame_guard.setLineNumber( 238 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_context->python_var_i.assign0( _python_tmp_element_1.asObject() );
                                        _python_context->python_var_k.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 239 );
                                {
                                    PyObjectTempKeeper0 setattr53;
                                    PyObjectTempKeeper0 setattr54;
                                    PyObjectTempKeeper0 subscr51;
                                    ( ( setattr53.assign( _python_context->python_var_obj.asObject() ), setattr54.assign( _python_context->python_var_k.asObject() ), BUILTIN_SETATTR( setattr53.asObject0(), setattr54.asObject0(), PyObjectTemporary( ( subscr51.assign( _python_context->python_var_row.asObject() ), LOOKUP_SUBSCRIPT( subscr51.asObject0(), _python_context->python_var_i.asObject() ) ) ).asObject() ) ), Py_None );
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                    frame_guard.setLineNumber( 242 );
                    if ( CHECK_IF_TRUE( _python_context->python_var_aggregate_select.asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 243 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_context->python_var_aggregate_select.asObject() ) ).asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 243 );
                                    PyObject *_tmp_unpack_5 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_5 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_5 );
                                    {
                                        frame_guard.setLineNumber( 243 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_context->python_var_i.assign0( _python_tmp_element_1.asObject() );
                                        _python_context->python_var_aggregate.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 244 );
                                {
                                    PyObjectTempKeeper0 op56;
                                    PyObjectTempKeeper0 setattr60;
                                    PyObjectTempKeeper0 setattr61;
                                    PyObjectTempKeeper0 subscr58;
                                    ( ( setattr60.assign( _python_context->python_var_obj.asObject() ), setattr61.assign( _python_context->python_var_aggregate.asObject() ), BUILTIN_SETATTR( setattr60.asObject0(), setattr61.asObject0(), PyObjectTemporary( ( subscr58.assign( _python_context->python_var_row.asObject() ), LOOKUP_SUBSCRIPT( subscr58.asObject0(), PyObjectTemporary( ( op56.assign( _python_context->python_var_i.asObject() ), BINARY_OPERATION_ADD( op56.asObject0(), _python_context->python_var_aggregate_start.asObject() ) ) ).asObject() ) ) ).asObject() ) ), Py_None );
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                    frame_guard.setLineNumber( 247 );
                    if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain__known_related_objects ) ).asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 248 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain__known_related_objects ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 248 );
                                    PyObject *_tmp_unpack_6 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_6 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_6 );
                                    {
                                        frame_guard.setLineNumber( 248 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_context->python_var_field.assign0( _python_tmp_element_1.asObject() );
                                        _python_context->python_var_rel_objs.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 249 );
                                {
                                    PyObjectTempKeeper0 getattr63;
                                    _python_context->python_var_pk.assign1( ( getattr63.assign( _python_context->python_var_obj.asObject() ), BUILTIN_GETATTR( getattr63.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_get_attname ) ).asObject() ) ).asObject(), NULL ) ) );
                                }
                                {
                                    PyObject *_python_tmp_unhandled_indicator = Py_True;
                                    frame_guard.setLineNumber( 250 );
                                    try
                                    {
                                        frame_guard.setLineNumber( 251 );
                                        {
                                            PyObjectTempKeeper0 subscr66;
                                            _python_context->python_var_rel_obj.assign1( ( subscr66.assign( _python_context->python_var_rel_objs.asObject() ), LOOKUP_SUBSCRIPT( subscr66.asObject0(), _python_context->python_var_pk.asObject() ) ) );
                                        }
                                    }
                                    catch ( PythonException &_exception )
                                    {
                                        if ( !_exception.hasTraceback() )
                                        {
                                            _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
                                        }
                                        else
                                        {
                                            _exception.addTraceback( frame_guard.getFrame0() );
                                        }

                                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                                        ExceptionRestorerFrameGuardLight restorer( &frame_guard );
#endif
                                        _exception.toExceptionHandler();

                                        if ( _exception.matches( PyExc_KeyError ) )
                                        {
                                            frame_guard.detachFrame();
                                            _python_tmp_unhandled_indicator = Py_False;
                                        }
                                        else
                                        {
                                            PyTracebackObject *tb = _exception.getTraceback();
                                            frame_guard.setLineNumber( tb->tb_lineno );
                                            _exception.setTraceback( tb->tb_next );
                                            tb->tb_next = NULL;

                                            throw;
                                        }
                                    }
                                    if ( ( _python_tmp_unhandled_indicator == Py_True ) )
                                    {
                                        frame_guard.setLineNumber( 255 );
                                        {
                                            PyObjectTempKeeper0 setattr68;
                                            PyObjectTempKeeper1 setattr69;
                                            ( ( setattr68.assign( _python_context->python_var_obj.asObject() ), setattr69.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_name ) ), BUILTIN_SETATTR( setattr68.asObject0(), setattr69.asObject0(), _python_context->python_var_rel_obj.asObject() ) ), Py_None );
                                        }
                                    }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                    frame_guard.setLineNumber( 257 );
                    YIELD_VALUE( generator, _python_context->python_var_obj.asObject1() );

                   CONSIDER_THREADING();
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_t *_python_context = new _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_context,
            _python_str_plain_iterator,
            _codeobj_6f4745e3b89edef15017b35980fa329f,
            _python_context,
            _context_generator_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function iterator" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iterator() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iterator() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "iterator() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_arg( _python_str_plain_arg );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_aggregate_expr( _python_str_plain_aggregate_expr );

    // Actual function code.
    static PyFrameObject *frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_c12da48fbaff7242da6d8b3fb87a5cfb, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 267 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_distinct_fields ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 268 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_NotImplementedError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_5ea2cff2f3afdf612216a345191d9ff9 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        {
            frame_guard.setLineNumber( 269 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_args.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 269 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_arg.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 270 );
                {
                        PyObject *tmp_identifier = _python_var_arg.asObject();
                        PyObject *tmp_subscribed = _python_var_kwargs.asObject();
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_arg.asObject(), _python_str_plain_default_alias ) ).asObject() );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 272 );
        _python_var_query.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clone ) ).asObject() ) );
        {
            frame_guard.setLineNumber( 274 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 274 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 274 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_aggregate_expr.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 275 );
                {
                    PyObjectTempKeeper1 call4;
                    PyObjectTempKeeper0 make_tuple1;
                    PyObjectTempKeeper1 make_tuple2;
                    DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_add_aggregate ) ), CALL_FUNCTION( call4.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_aggregate_expr.asObject() ), make_tuple2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_26917b03e20068d4f50029bbe86698e1 ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 278 );
        {
            PyObjectTempKeeper1 call7;
            return ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_get_aggregation ) ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_aggregate_expr.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_arg.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "aggregate() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "aggregate() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "aggregate() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "aggregate() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "aggregate() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "aggregate() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "aggregate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_count_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_910db0ccadac490cb81141647c26b84a, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 288 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 289 );
            return BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() );
        }
        frame_guard.setLineNumber( 291 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_count ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "count() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "count() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "count() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "count() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "count() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "count() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "count() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "count() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "count() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "count() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "count() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "count() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "count() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "count() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "count() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "count() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );
    PyObjectLocalVariable _python_var_num( _python_str_plain_num );

    // Actual function code.
    static PyFrameObject *frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_get_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_a02499381b3121685678f9b823575380, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 298 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper0 call_tmp2;
            _python_var_clone.assign1( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter ) ), call_tmp2.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 299 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 300 );
            _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_order_by ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 301 );
        _python_var_num.assign1( BUILTIN_LEN( _python_var_clone.asObject() ) );
        frame_guard.setLineNumber( 302 );
        if ( RICH_COMPARE_BOOL_EQ( _python_var_num.asObject(), _python_int_pos_1 ) )
        {
            frame_guard.setLineNumber( 303 );
            return LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain__result_cache ) ).asObject(), _python_int_0, 0 );
        }
        frame_guard.setLineNumber( 304 );
        if ( (!( CHECK_IF_TRUE( _python_var_num.asObject() ) )) )
        {
            frame_guard.setLineNumber( 305 );
            {
                PyObjectTempKeeper1 call4;
                {
                    PyObjectTemporary tmp_exception_type( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain_DoesNotExist ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_fa2be6545aa17f3c526f6a9159862400, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 308 );
        {
            PyObjectTempKeeper1 call8;
            PyObjectTempKeeper1 make_tuple6;
            {
                PyObjectTemporary tmp_exception_type( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain_MultipleObjectsReturned ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_82e16427c52fdf7d13f87e28cba593fa, PyObjectTemporary( ( make_tuple6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE2( make_tuple6.asObject0(), _python_var_num.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_num.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "get() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "get() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "get() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "get() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_create_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_04c5b03690149c43785aab0d6810255c, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 317 );
        {
            PyObjectTempKeeper1 call_tmp1;
            _python_var_obj.assign1( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp1.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 318 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain__for_write );
        frame_guard.setLineNumber( 319 );
        {
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_save ) ), CALL_FUNCTION( call3.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT2( Py_True, _python_str_plain_force_insert, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 320 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "create() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_objs, PyObject *_python_par_batch_size )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );
    PyObjectLocalParameterVariableNoDel _python_var_batch_size( _python_str_plain_batch_size, _python_par_batch_size );
    PyObjectLocalVariable _python_var_connection( _python_str_plain_connection );
    PyObjectLocalVariable _python_var_fields( _python_str_plain_fields );
    PyObjectLocalVariable _python_var_objs_with_pk( _python_str_plain_objs_with_pk );
    PyObjectLocalVariable _python_var_objs_without_pk( _python_str_plain_objs_without_pk );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_600a752f0128bb9dd8fbd121b1febdb1, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 338 );
        if ( (!( ( ( _python_var_batch_size.asObject() == Py_None ) || RICH_COMPARE_BOOL_GT( _python_var_batch_size.asObject(), _python_int_0 ) ) )) )
        {
            frame_guard.setLineNumber( 338 );
            RAISE_EXCEPTION_WITH_TYPE( PyExc_AssertionError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        frame_guard.setLineNumber( 339 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_parents ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 340 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_459bac3162d41f2bfb8d9531c077f5cd ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 341 );
        if ( (!( CHECK_IF_TRUE( _python_var_objs.asObject() ) )) )
        {
            frame_guard.setLineNumber( 342 );
            return _python_var_objs.asObject1();
        }
        frame_guard.setLineNumber( 343 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain__for_write );
        frame_guard.setLineNumber( 344 );
        {
            PyObjectTempKeeper0 subscr1;
            _python_var_connection.assign1( ( subscr1.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 345 );
        _python_var_fields.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_local_fields ) );
        {
            frame_guard.setLineNumber( 346 );
            PyObject *_tmp_python_tmp_with_source;
            {
                PyObjectTempKeeper1 call3;
                _tmp_python_tmp_with_source = ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_transaction.asObject0(), _python_str_plain_commit_on_success_unless_managed ) ), CALL_FUNCTION( call3.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) );
            }
            PyObjectTemporary _python_tmp_with_source( _tmp_python_tmp_with_source );
            PyObjectTemporary _python_tmp_with_exit( LOOKUP_SPECIAL( _python_tmp_with_source.asObject(), _python_str_plain___exit__ ) );
            PyObjectTemporary _python_tmp_with_enter( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_SPECIAL( _python_tmp_with_source.asObject(), _python_str_plain___enter__ ) ).asObject() ) );
            PyObject *_python_tmp_indicator = Py_True;
            PythonExceptionKeeper _caught_1;


            try
            {
                try
                {
                    frame_guard.setLineNumber( 347 );
                    if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_features ) ).asObject(), _python_str_digest_73f421d02c143f5b1ea1e641a36c5f9f ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_has_auto_field ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 349 );
                        {
                            PyObjectTempKeeper1 call6;
                            PyObjectTempKeeper0 call7;
                            PyObjectTempKeeper0 call8;
                            DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__batched_insert ) ), call7.assign( _python_var_objs.asObject() ), call8.assign( _python_var_fields.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), call8.asObject0(), _python_var_batch_size.asObject() ) ) );
                        }
                    }
                    else
                    {
                        {
                            frame_guard.setLineNumber( 351 );
                            PyObject *_tmp_python_tmp_source_iter;
                            {
                                PyObjectTempKeeper0 call10;
                                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call10.assign( _mvar_django__db__models__query_partition.asObject0() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( MAKE_FUNCTION_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query(  ) ).asObject(), _python_var_objs.asObject() ) ) ).asObject() );
                            }
                            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_objs_with_pk.assign0( _python_tmp_element_1.asObject() );
                            _python_var_objs_without_pk.assign0( _python_tmp_element_2.asObject() );
                        }
                        frame_guard.setLineNumber( 352 );
                        if ( CHECK_IF_TRUE( _python_var_objs_with_pk.asObject() ) )
                        {
                            frame_guard.setLineNumber( 353 );
                            {
                                PyObjectTempKeeper1 call13;
                                PyObjectTempKeeper0 call14;
                                PyObjectTempKeeper0 call15;
                                DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__batched_insert ) ), call14.assign( _python_var_objs_with_pk.asObject() ), call15.assign( _python_var_fields.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), call15.asObject0(), _python_var_batch_size.asObject() ) ) );
                            }
                        }
                        frame_guard.setLineNumber( 354 );
                        if ( CHECK_IF_TRUE( _python_var_objs_without_pk.asObject() ) )
                        {
                            frame_guard.setLineNumber( 355 );
                            _python_var_fields.assign1( impl_listcontr_2_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( MAKE_ITERATOR( _python_var_fields.asObject() ), _python_var_f ) );
                            frame_guard.setLineNumber( 356 );
                            {
                                PyObjectTempKeeper1 call17;
                                PyObjectTempKeeper0 call18;
                                PyObjectTempKeeper0 call19;
                                DECREASE_REFCOUNT( ( call17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__batched_insert ) ), call18.assign( _python_var_objs_without_pk.asObject() ), call19.assign( _python_var_fields.asObject() ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), call18.asObject0(), call19.asObject0(), _python_var_batch_size.asObject() ) ) );
                            }
                        }
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_BaseException ) )
                    {
                        frame_guard.detachFrame();
                        _python_tmp_indicator = Py_False;
                        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _python_tmp_with_exit.asObject(), _exception.getType(), _exception.getValue(), (PyObject *)_exception.getTraceback() ) ).asObject() ) )) )
                        {
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                frame_guard.preserveExistingException();

                _exception.toExceptionHandler();
#endif
            }

            // Final code:
            if ( ( _python_tmp_indicator == Py_True ) )
            {
                DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( _python_tmp_with_exit.asObject(), Py_None, Py_None, Py_None ) );
            }
            _caught_1.rethrow();
        }
        frame_guard.setLineNumber( 358 );
        return _python_var_objs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_batch_size.updateLocalsDict( _python_var_objs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_objs_without_pk.updateLocalsDict( _python_var_objs_with_pk.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_connection.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_objs = NULL;
    PyObject *_python_par_batch_size = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bulk_create() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_objs == key )
            {
                if (unlikely( _python_par_objs ))
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'objs'" );
                    goto error_exit;
                }

                _python_par_objs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_batch_size == key )
            {
                if (unlikely( _python_par_batch_size ))
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'batch_size'" );
                    goto error_exit;
                }

                _python_par_batch_size = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_objs, key ) )
            {
                if (unlikely( _python_par_objs ))
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'objs'" );
                    goto error_exit;
                }

                _python_par_objs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_batch_size, key ) )
            {
                if (unlikely( _python_par_batch_size ))
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'batch_size'" );
                    goto error_exit;
                }

                _python_par_batch_size = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bulk_create() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bulk_create() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "bulk_create() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "bulk_create() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bulk_create() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "bulk_create() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bulk_create() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "bulk_create() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bulk_create() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "bulk_create() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "bulk_create() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "bulk_create() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_objs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'objs'" );
             goto error_exit;
         }

        _python_par_objs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_batch_size != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bulk_create() got multiple values for keyword argument 'batch_size'" );
             goto error_exit;
         }

        _python_par_batch_size = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_batch_size == NULL )
    {
        _python_par_batch_size = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_batch_size );
    }


    return impl_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_objs, _python_par_batch_size );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_objs );
    Py_XDECREF( _python_par_batch_size );

    return NULL;
}

static PyObject *dparse_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_o )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_o( _python_str_plain_o, _python_par_o );

    // Actual function code.
    static PyFrameObject *frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_b099778ecf5fd1140a6ba606572cdcb8, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 351 );
        return INCREASE_REFCOUNT( BOOL_FROM( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_pk ) ).asObject() == Py_None ) ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_o.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_o = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_o == key )
            {
                if (unlikely( _python_par_o ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'o'" );
                    goto error_exit;
                }

                _python_par_o = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_o, key ) )
            {
                if (unlikely( _python_par_o ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'o'" );
                    goto error_exit;
                }

                _python_par_o = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "<lambda>() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_o != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'o'" );
             goto error_exit;
         }

        _python_par_o = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_o );

error_exit:;

    Py_XDECREF( _python_par_o );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 355 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 355 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 isinstance1;
                    if ( (!( ( isinstance1.assign( python_closure_f.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), _mvar_django__db__models__query_AutoField.asObject0() ) ) )) )
                {
                    frame_guard.setLineNumber( 355 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_f.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );
    PyObjectLocalVariable _python_var_lookup( _python_str_plain_lookup );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_params( _python_str_plain_params );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_sid( _python_str_plain_sid );
    PyObjectLocalVariable _python_var_exc_info( _python_str_plain_exc_info );

    // Actual function code.
    static PyFrameObject *frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_367b64db8c3659eb9fe394b4cb0447d1, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 366 );
        _python_var_defaults.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_defaults, PyObjectTemporary( PyDict_New() ).asObject() ) );
        frame_guard.setLineNumber( 367 );
        _python_var_lookup.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_copy ) ).asObject() ) );
        {
            frame_guard.setLineNumber( 368 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 368 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 369 );
                {
                    PyObjectTempKeeper1 cmp3;
                    if ( ( cmp3.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_attname ) ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), _python_var_lookup.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 370 );
                    {
                        PyObjectTempKeeper1 call1;
                        {
                            PyObjectTemporary tmp_identifier( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_lookup.asObject(), _python_str_plain_pop ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_attname ) ).asObject() ) ) );
                            PyObject *tmp_subscribed = _python_var_lookup.asObject();
                            SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() );
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 371 );
        try
        {
            frame_guard.setLineNumber( 372 );
            SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain__for_write );
            frame_guard.setLineNumber( 373 );
            {
                PyObjectTempKeeper1 call_tmp25;
                return MAKE_TUPLE2( PyObjectTemporary( ( call_tmp25.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp25.asObject(), _python_var_lookup.asObject1() ) ) ).asObject(), Py_False );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain_DoesNotExist ) ).asObject() ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 375 );
                try
                {
                    frame_guard.setLineNumber( 376 );
                    _python_var_params.assign1( TO_DICT( PyObjectTemporary( impl_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) ) ).asObject(), NULL ) );
                    frame_guard.setLineNumber( 377 );
                    {
                        PyObjectTempKeeper1 call12;
                        DECREASE_REFCOUNT( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_params.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_defaults.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 378 );
                    {
                        PyObjectTempKeeper1 call_tmp14;
                        _python_var_obj.assign1( ( call_tmp14.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp14.asObject(), _python_var_params.asObject1() ) ) );
                    }
                    frame_guard.setLineNumber( 379 );
                    {
                        PyObjectTempKeeper1 call16;
                        _python_var_sid.assign1( ( call16.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_transaction.asObject0(), _python_str_plain_savepoint ) ), CALL_FUNCTION( call16.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 380 );
                    {
                        PyObjectTempKeeper1 call19;
                        DECREASE_REFCOUNT( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_save ) ), CALL_FUNCTION( call19.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT2( Py_True, _python_str_plain_force_insert, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 381 );
                    {
                        PyObjectTempKeeper1 call22;
                        PyObjectTempKeeper1 call23;
                        DECREASE_REFCOUNT( ( call22.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_transaction.asObject0(), _python_str_plain_savepoint_commit ) ), call23.assign( MAKE_TUPLE1( _python_var_sid.asObject() ) ), CALL_FUNCTION( call22.asObject0(), call23.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 382 );
                    return MAKE_TUPLE2( _python_var_obj.asObject(), Py_True );
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( _mvar_django__db__models__query_DatabaseError.asObject0() ) )
                    {
                        frame_guard.detachFrame();
                        frame_guard.setLineNumber( 384 );
                        {
                            PyObjectTempKeeper1 call5;
                            PyObjectTempKeeper1 call6;
                            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_transaction.asObject0(), _python_str_plain_savepoint_rollback ) ), call6.assign( MAKE_TUPLE1( _python_var_sid.asObject() ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 385 );
                        _python_var_exc_info.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sys.asObject0(), _python_str_plain_exc_info ) ).asObject() ) );
                        frame_guard.setLineNumber( 386 );
                        try
                        {
                            frame_guard.setLineNumber( 387 );
                            {
                                PyObjectTempKeeper1 call_tmp10;
                                return MAKE_TUPLE2( PyObjectTemporary( ( call_tmp10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp10.asObject(), _python_var_lookup.asObject1() ) ) ).asObject(), Py_False );
                            }
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain_DoesNotExist ) ).asObject() ) )
                            {
                                frame_guard.detachFrame();
                                frame_guard.setLineNumber( 390 );
                                {
                                    PyObjectTempKeeper1 call_tmp8;
                                    DECREASE_REFCOUNT( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_six.asObject0(), _python_str_plain_reraise ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp8.asObject(), _python_var_exc_info.asObject1() ) ) );
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_exc_info.updateLocalsDict( _python_var_sid.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_lookup.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_or_create() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_or_create() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_k;
    PyObjectLocalVariable python_var_v;
};

static void _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_t *_python_context = (struct _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_t *_python_context = (_context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_k.setVariableName( _python_str_plain_k );
        _python_context->python_var_v.setVariableName( _python_str_plain_v );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query ) )
        {
            if ( frame_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query );
            }

            frame_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_e779b861bb0317fcf49e62901085ec17, _module_django__db__models__query );
        }

        Py_INCREF( frame_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query );
        generator->m_frame = frame_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 376 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 376 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 376 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_context->python_var_k.assign0( _python_tmp_element_1.asObject() );
                            _python_context->python_var_v.assign0( _python_tmp_element_2.asObject() );
                        }
                        {
                            PyObjectTempKeeper0 cmp3;
                            if ( ( cmp3.assign( _mvar_django__db__models__query_LOOKUP_SEP.asObject0() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp3.asObject0(), _python_context->python_var_k.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 376 );
                            {
                                PyObjectTempKeeper0 make_tuple1;
                                YIELD_VALUE( generator, ( make_tuple1.assign( _python_context->python_var_k.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_context->python_var_v.asObject() ) ) );
                            }
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_t *_python_context = new _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_context,
            _python_str_angle_genexpr,
            _codeobj_a5795a9a4c50d45aef2dd0b97229ab54,
            _python_context,
            _context_generator_genexpr_1_of_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_name, PyObject *_python_par_direction )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_direction( _python_str_plain_direction, _python_par_direction );
    PyObjectLocalVariable _python_var_order_by( _python_str_plain_order_by );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_62e99b11b401f3541ceecdb4672da512, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 397 );
        {
            PyObjectTempKeeper0 keeper_0;
            _python_var_order_by.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_field_name.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : BUILTIN_GETATTR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_latest_by, NULL ) ) );
        }
        frame_guard.setLineNumber( 398 );
        if ( (!( CHECK_IF_TRUE( TO_BOOL( _python_var_order_by.asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 398 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_7a8966e72a7f88057a2202737c10c9da ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 400 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 400 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_637732699623f164147ac76af1e39bf7 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 402 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 403 );
        DECREASE_REFCOUNT( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_limits ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_9af0905ad080f311628ca23621b19221 ) ).asObject() ) );
        frame_guard.setLineNumber( 404 );
        DECREASE_REFCOUNT( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_ordering ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_a2f7cad30ae61e488a770ed378a6951b ) ).asObject() ) );
        frame_guard.setLineNumber( 405 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 make_tuple1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_ordering ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_f0275d2ae1aaf69b3b06259723647d35, PyObjectTemporary( ( make_tuple1.assign( _python_var_direction.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_order_by.asObject() ) ) ).asObject() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 406 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_get ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_direction.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_order_by.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_name = NULL;
    PyObject *_python_par_direction = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_earliest_or_latest() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_direction == key )
            {
                if (unlikely( _python_par_direction ))
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'direction'" );
                    goto error_exit;
                }

                _python_par_direction = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_direction, key ) )
            {
                if (unlikely( _python_par_direction ))
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'direction'" );
                    goto error_exit;
                }

                _python_par_direction = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_earliest_or_latest() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_earliest_or_latest() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_direction != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_earliest_or_latest() got multiple values for keyword argument 'direction'" );
             goto error_exit;
         }

        _python_par_direction = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_field_name == NULL )
    {
        _python_par_field_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_field_name );
    }
    if ( _python_par_direction == NULL )
    {
        _python_par_direction = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_direction );
    }


    return impl_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_field_name, _python_par_direction );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_name );
    Py_XDECREF( _python_par_direction );

    return NULL;
}

static PyObject *dparse_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );

    // Actual function code.
    static PyFrameObject *frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_f973342ff6f214e24309510c8c0c725f, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 409 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__earliest_or_latest ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT2( _python_var_field_name.asObject(), _python_str_plain_field_name, _python_str_empty, _python_str_plain_direction ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "earliest() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "earliest() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "earliest() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "earliest() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "earliest() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "earliest() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "earliest() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "earliest() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "earliest() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "earliest() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "earliest() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "earliest() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "earliest() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "earliest() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "earliest() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "earliest() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "earliest() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "earliest() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "earliest() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "earliest() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_field_name == NULL )
    {
        _python_par_field_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_field_name );
    }


    return impl_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_field_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_name );

    return NULL;
}

static PyObject *dparse_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );

    // Actual function code.
    static PyFrameObject *frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_c6c5bce16635a6e2f7559dc7248a0623, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 412 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__earliest_or_latest ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT2( _python_var_field_name.asObject(), _python_str_plain_field_name, _python_str_chr_45, _python_str_plain_direction ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "latest() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "latest() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "latest() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "latest() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "latest() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "latest() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "latest() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "latest() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "latest() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "latest() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "latest() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "latest() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "latest() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "latest() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "latest() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "latest() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "latest() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "latest() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "latest() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "latest() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_field_name == NULL )
    {
        _python_par_field_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_field_name );
    }


    return impl_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_field_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_name );

    return NULL;
}

static PyObject *dparse_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );

    // Actual function code.
    static PyFrameObject *frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_first_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_abce9abbf2eb47c94108bed3b24bbe19, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 418 );
        _python_var_qs.assign1( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_ordered ) ).asObject() ) ? _python_var_self.asObject1() : CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_order_by ) ).asObject(), _python_str_plain_pk ) ) );
        frame_guard.setLineNumber( 419 );
        try
        {
            frame_guard.setLineNumber( 420 );
            return LOOKUP_SUBSCRIPT_CONST( _python_var_qs.asObject(), _python_int_0, 0 );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_IndexError ) )
            {
                frame_guard.detachFrame();
                return INCREASE_REFCOUNT( Py_None );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_qs.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "first() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "first() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "first() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "first() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "first() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "first() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "first() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "first() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "first() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "first() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "first() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "first() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "first() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "first() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "first() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "first() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "first() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );

    // Actual function code.
    static PyFrameObject *frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_22_last_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_1ca84df7b44eb80295975c83e299bf0a, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 428 );
        _python_var_qs.assign1( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_ordered ) ).asObject() ) ? CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ).asObject() ) : CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_order_by ) ).asObject(), _python_str_digest_98b437bbd431b14e42797b1f07d4da5b ) ) );
        frame_guard.setLineNumber( 429 );
        try
        {
            frame_guard.setLineNumber( 430 );
            return LOOKUP_SUBSCRIPT_CONST( _python_var_qs.asObject(), _python_int_0, 0 );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_IndexError ) )
            {
                frame_guard.detachFrame();
                return INCREASE_REFCOUNT( Py_None );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_qs.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "last() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "last() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "last() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "last() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "last() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "last() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "last() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "last() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "last() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "last() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "last() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "last() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "last() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "last() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "last() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "last() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "last() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_id_list )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_id_list( _python_str_plain_id_list, _python_par_id_list );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_9ad1bc619bf4bf52aa510a83ffea9eac, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 439 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 439 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_d59e800a66483fccb28ef9fe21e70011 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 441 );
        if ( (!( CHECK_IF_TRUE( _python_var_id_list.asObject() ) )) )
        {
            return PyDict_New();
        }
        frame_guard.setLineNumber( 443 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_id_list.asObject(), _python_str_plain_pk__in ) ).asObject() ) ) ).asObject(), _python_str_plain_order_by ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 444 );
        return TO_DICT( PyObjectTemporary( impl_listcontr_1_of_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( MAKE_ITERATOR( _python_var_qs.asObject() ), _python_var_obj ) ).asObject(), NULL );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_id_list.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_qs.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_id_list = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "in_bulk() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "in_bulk() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_id_list == key )
            {
                if (unlikely( _python_par_id_list ))
                {
                    PyErr_Format( PyExc_TypeError, "in_bulk() got multiple values for keyword argument 'id_list'" );
                    goto error_exit;
                }

                _python_par_id_list = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "in_bulk() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_id_list, key ) )
            {
                if (unlikely( _python_par_id_list ))
                {
                    PyErr_Format( PyExc_TypeError, "in_bulk() got multiple values for keyword argument 'id_list'" );
                    goto error_exit;
                }

                _python_par_id_list = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "in_bulk() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "in_bulk() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "in_bulk() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "in_bulk() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "in_bulk() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "in_bulk() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "in_bulk() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "in_bulk() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "in_bulk() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "in_bulk() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "in_bulk() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "in_bulk() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "in_bulk() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "in_bulk() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_id_list != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "in_bulk() got multiple values for keyword argument 'id_list'" );
             goto error_exit;
         }

        _python_par_id_list = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_id_list );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_id_list );

    return NULL;
}

static PyObject *dparse_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 444 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 444 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_obj.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 make_tuple1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple1.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_obj.asObject(), _python_str_plain__get_pk_val ) ).asObject() ) ), MAKE_TUPLE2( make_tuple1.asObject0(), python_closure_obj.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_del_query( _python_str_plain_del_query );
    PyObjectLocalVariable _python_var_collector( _python_str_plain_collector );

    // Actual function code.
    static PyFrameObject *frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_80241b686312c81e1d1c400a388ae696, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 450 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 450 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_2d99ba7c9d4bc402cf177154ac965263 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 453 );
        _python_var_del_query.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 458 );
        SET_ATTRIBUTE( Py_True, _python_var_del_query.asObject(), _python_str_plain__for_write );
        frame_guard.setLineNumber( 461 );
        SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_del_query.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_for_update );
        frame_guard.setLineNumber( 462 );
        SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_del_query.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_related );
        frame_guard.setLineNumber( 463 );
        DECREASE_REFCOUNT( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_del_query.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_ordering ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_a2f7cad30ae61e488a770ed378a6951b ) ).asObject() ) );
        frame_guard.setLineNumber( 465 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_collector.assign1( ( call1.assign( _mvar_django__db__models__query_Collector.asObject0() ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_del_query.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 466 );
        {
            PyObjectTempKeeper1 call4;
            DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_collector.asObject(), _python_str_plain_collect ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_del_query.asObject() ) ) );
        }
        frame_guard.setLineNumber( 467 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_collector.asObject(), _python_str_plain_delete ) ).asObject() ) );
        frame_guard.setLineNumber( 470 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__result_cache );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_collector.updateLocalsDict( _python_var_del_query.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "delete() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "delete() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "delete() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "delete() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "delete() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "delete() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "delete() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "delete() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "delete() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "delete() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "delete() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "delete() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "delete() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "delete() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "delete() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "delete() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "delete() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );

    // Actual function code.
    static PyFrameObject *frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_7d2fb9f4becb0e7890d02defc16b15e2, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 478 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_DeleteQuery ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) ).asObject(), _python_str_plain_delete_qs ) ), call4.assign( _python_var_self.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_using.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_raw_delete() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_raw_delete() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "_raw_delete() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_raw_delete() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "_raw_delete() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_raw_delete() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_raw_delete() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_raw_delete() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_raw_delete() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_raw_delete() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_raw_delete() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_raw_delete() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_raw_delete() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_raw_delete() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_raw_delete() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_raw_delete() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_raw_delete() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_raw_delete() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_raw_delete() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_raw_delete() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_rows( _python_str_plain_rows );

    // Actual function code.
    static PyFrameObject *frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_26_update_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_996f090f88a3d2feafa2888ecdc0602c, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 486 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 486 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_5b5978e028e9e32d3997bd44c7cd4740 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 488 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain__for_write );
        frame_guard.setLineNumber( 489 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_query.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clone ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_UpdateQuery ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 490 );
        {
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_add_update_values ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 491 );
            PyObject *_tmp_python_tmp_with_source;
            {
                PyObjectTempKeeper1 call5;
                _tmp_python_tmp_with_source = ( call5.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_transaction.asObject0(), _python_str_plain_commit_on_success_unless_managed ) ), CALL_FUNCTION( call5.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) );
            }
            PyObjectTemporary _python_tmp_with_source( _tmp_python_tmp_with_source );
            PyObjectTemporary _python_tmp_with_exit( LOOKUP_SPECIAL( _python_tmp_with_source.asObject(), _python_str_plain___exit__ ) );
            PyObjectTemporary _python_tmp_with_enter( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_SPECIAL( _python_tmp_with_source.asObject(), _python_str_plain___enter__ ) ).asObject() ) );
            PyObject *_python_tmp_indicator = Py_True;
            PythonExceptionKeeper _caught_1;


            try
            {
                try
                {
                    frame_guard.setLineNumber( 492 );
                    {
                        PyObjectTempKeeper1 call8;
                        _python_var_rows.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_execute_sql ) ).asObject(), Py_None ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_BaseException ) )
                    {
                        frame_guard.detachFrame();
                        _python_tmp_indicator = Py_False;
                        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _python_tmp_with_exit.asObject(), _exception.getType(), _exception.getValue(), (PyObject *)_exception.getTraceback() ) ).asObject() ) )) )
                        {
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                frame_guard.preserveExistingException();

                _exception.toExceptionHandler();
#endif
            }

            // Final code:
            if ( ( _python_tmp_indicator == Py_True ) )
            {
                DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( _python_tmp_with_exit.asObject(), Py_None, Py_None, Py_None ) );
            }
            _caught_1.rethrow();
        }
        frame_guard.setLineNumber( 493 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__result_cache );
        frame_guard.setLineNumber( 494 );
        return _python_var_rows.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_rows.updateLocalsDict( _python_var_query.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "update() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "update() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "update() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "update() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "update() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "update() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "update() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "update() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "update() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "update() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "update() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "update() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "update() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "update() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "update() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "update() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_values )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_values( _python_str_plain_values, _python_par_values );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );

    // Actual function code.
    static PyFrameObject *frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_27__update_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_e4764d96a3d8bfc3b9fcbcf83a0fdde1, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 504 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 504 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_5b5978e028e9e32d3997bd44c7cd4740 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 506 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_query.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clone ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_UpdateQuery ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 507 );
        {
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_add_update_fields ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_values.asObject() ) ) );
        }
        frame_guard.setLineNumber( 508 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain__result_cache );
        frame_guard.setLineNumber( 509 );
        {
            PyObjectTempKeeper1 call5;
            return CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_execute_sql ) ).asObject(), Py_None );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_values.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_query.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_values = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_update() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_update() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_values == key )
            {
                if (unlikely( _python_par_values ))
                {
                    PyErr_Format( PyExc_TypeError, "_update() got multiple values for keyword argument 'values'" );
                    goto error_exit;
                }

                _python_par_values = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_update() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_values, key ) )
            {
                if (unlikely( _python_par_values ))
                {
                    PyErr_Format( PyExc_TypeError, "_update() got multiple values for keyword argument 'values'" );
                    goto error_exit;
                }

                _python_par_values = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_update() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_update() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_update() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_update() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_update() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_update() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_update() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_update() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_update() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_update() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_update() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_update() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_update() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_update() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_values != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_update() got multiple values for keyword argument 'values'" );
             goto error_exit;
         }

        _python_par_values = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_values );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_values );

    return NULL;
}

static PyObject *dparse_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_b7d2b4d58129cab476f1f03b65a1fec3, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 513 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 514 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_has_results ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 515 );
        return INCREASE_REFCOUNT( TO_BOOL( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "exists() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "exists() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "exists() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "exists() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "exists() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "exists() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "exists() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "exists() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "exists() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "exists() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "exists() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "exists() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "exists() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "exists() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "exists() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "exists() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "exists() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_980dbfb119a6357b2d78865a2e3435ba, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 519 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            DECREASE_REFCOUNT( ( call1.assign( _mvar_django__db__models__query_prefetch_related_objects.asObject0() ), call2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__prefetch_related_lookups ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 520 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain__prefetch_done );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_prefetch_related_objects() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_prefetch_related_objects() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );

    // Actual function code.
    static PyFrameObject *frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_30_values_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_ddccd34948d27b343da51bd25e2af25c, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 527 );
        {
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 make_dict1;
            return ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( _mvar_django__db__models__query_ValuesQuerySet.asObject0() ), MAKE_DICT3( make_dict1.asObject0(), _python_str_plain_klass, Py_True, _python_str_plain_setup, _python_var_fields.asObject(), _python_str_plain__fields ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "values() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "values() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "values() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "values() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "values() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "values() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "values() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "values() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_fields = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_fields, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_fields = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_fields );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );

    return NULL;
}

static PyObject *dparse_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_flat( _python_str_plain_flat );

    // Actual function code.
    static PyFrameObject *frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_bfcb6171f490c432e1ceff13905ba8ef, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 530 );
        _python_var_flat.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_flat, Py_False ) );
        frame_guard.setLineNumber( 531 );
        if ( CHECK_IF_TRUE( _python_var_kwargs.asObject() ) )
        {
            frame_guard.setLineNumber( 532 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_49afb6e9000795fd9803e3cec192e1b4, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( TO_LIST( _python_var_kwargs.asObject() ) ).asObject() ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 534 );
        if ( ( CHECK_IF_TRUE( _python_var_flat.asObject() ) && RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( _python_var_fields.asObject() ) ).asObject(), _python_int_pos_1 ) ) )
        {
            frame_guard.setLineNumber( 535 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_8513c6d54f3bb79877fa5b2eeabde3ff ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 536 );
        {
            PyObjectTempKeeper1 call9;
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper0 make_dict5;
            return ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ), CALL_FUNCTION( call9.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( _mvar_django__db__models__query_ValuesListQuerySet.asObject0() ), make_dict5.assign( _python_var_flat.asObject() ), MAKE_DICT4( make_dict1.asObject0(), _python_str_plain_klass, Py_True, _python_str_plain_setup, make_dict5.asObject0(), _python_str_plain_flat, _python_var_fields.asObject(), _python_str_plain__fields ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_flat.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "values_list() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "values_list() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "values_list() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "values_list() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "values_list() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "values_list() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "values_list() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_fields = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_fields, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_fields = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_fields, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_name, PyObject *_python_par_kind, PyObject *_python_par_order )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_kind( _python_str_plain_kind, _python_par_kind );
    PyObjectLocalParameterVariableNoDel _python_var_order( _python_str_plain_order, _python_par_order );

    // Actual function code.
    static PyFrameObject *frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_8773d5aad005c82d2cc4d5e45ab8fed5, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 544 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_var_kind.asObject(), _python_tuple_str_plain_year_str_plain_month_str_plain_day_tuple ) )
        {
            frame_guard.setLineNumber( 544 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_54e100a11340121f51f2e3592c43525c ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 546 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_var_order.asObject(), _python_tuple_str_plain_ASC_str_plain_DESC_tuple ) )
        {
            frame_guard.setLineNumber( 546 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_a3e41e75c376f209e8fc835cfad3814c ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 548 );
        {
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper0 make_dict5;
            PyObjectTempKeeper0 make_dict7;
            return ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ), CALL_FUNCTION( call11.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( _mvar_django__db__models__query_DateQuerySet.asObject0() ), make_dict5.assign( _python_var_field_name.asObject() ), make_dict7.assign( _python_var_kind.asObject() ), MAKE_DICT5( make_dict1.asObject0(), _python_str_plain_klass, Py_True, _python_str_plain_setup, make_dict5.asObject0(), _python_str_plain__field_name, make_dict7.asObject0(), _python_str_plain__kind, _python_var_order.asObject(), _python_str_plain__order ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_order.updateLocalsDict( _python_var_kind.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_name = NULL;
    PyObject *_python_par_kind = NULL;
    PyObject *_python_par_order = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dates() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_kind == key )
            {
                if (unlikely( _python_par_kind ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'kind'" );
                    goto error_exit;
                }

                _python_par_kind = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_order == key )
            {
                if (unlikely( _python_par_order ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'order'" );
                    goto error_exit;
                }

                _python_par_order = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_kind, key ) )
            {
                if (unlikely( _python_par_kind ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'kind'" );
                    goto error_exit;
                }

                _python_par_kind = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_order, key ) )
            {
                if (unlikely( _python_par_order ))
                {
                    PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'order'" );
                    goto error_exit;
                }

                _python_par_order = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dates() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dates() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "dates() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "dates() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dates() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "dates() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dates() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "dates() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dates() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "dates() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "dates() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "dates() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "dates() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_kind != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'kind'" );
             goto error_exit;
         }

        _python_par_kind = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_order != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dates() got multiple values for keyword argument 'order'" );
             goto error_exit;
         }

        _python_par_order = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_order == NULL )
    {
        _python_par_order = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_order );
    }


    return impl_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_field_name, _python_par_kind, _python_par_order );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_name );
    Py_XDECREF( _python_par_kind );
    Py_XDECREF( _python_par_order );

    return NULL;
}

static PyObject *dparse_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_name, PyObject *_python_par_kind, PyObject *_python_par_order, PyObject *_python_par_tzinfo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_kind( _python_str_plain_kind, _python_par_kind );
    PyObjectLocalParameterVariableNoDel _python_var_order( _python_str_plain_order, _python_par_order );
    PyObjectLocalParameterVariableNoDel _python_var_tzinfo( _python_str_plain_tzinfo, _python_par_tzinfo );

    // Actual function code.
    static PyFrameObject *frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_36059d61d77e5b12ba2d018c03f067ef, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 556 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_var_kind.asObject(), _python_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple ) )
        {
            frame_guard.setLineNumber( 556 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_8db9e345cf0cbfe1fff28f8719755caa ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 558 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_var_order.asObject(), _python_tuple_str_plain_ASC_str_plain_DESC_tuple ) )
        {
            frame_guard.setLineNumber( 558 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_a3e41e75c376f209e8fc835cfad3814c ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 560 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_settings.asObject0(), _python_str_plain_USE_TZ ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 561 );
            if ( ( _python_var_tzinfo.asObject() == Py_None ) )
            {
                frame_guard.setLineNumber( 562 );
                _python_var_tzinfo.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_timezone.asObject0(), _python_str_plain_get_current_timezone ) ).asObject() ) );
            }
        }
        else
        {
            _python_var_tzinfo.assign0( Py_None );
        }
        frame_guard.setLineNumber( 565 );
        {
            PyObjectTempKeeper1 call13;
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper0 make_dict5;
            PyObjectTempKeeper0 make_dict7;
            PyObjectTempKeeper0 make_dict9;
            return ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ), CALL_FUNCTION( call13.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( _mvar_django__db__models__query_DateTimeQuerySet.asObject0() ), make_dict5.assign( _python_var_field_name.asObject() ), make_dict7.assign( _python_var_kind.asObject() ), make_dict9.assign( _python_var_order.asObject() ), MAKE_DICT6( make_dict1.asObject0(), _python_str_plain_klass, Py_True, _python_str_plain_setup, make_dict5.asObject0(), _python_str_plain__field_name, make_dict7.asObject0(), _python_str_plain__kind, make_dict9.asObject0(), _python_str_plain__order, _python_var_tzinfo.asObject(), _python_str_plain__tzinfo ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_tzinfo.updateLocalsDict( _python_var_order.updateLocalsDict( _python_var_kind.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_name = NULL;
    PyObject *_python_par_kind = NULL;
    PyObject *_python_par_order = NULL;
    PyObject *_python_par_tzinfo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "datetimes() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_kind == key )
            {
                if (unlikely( _python_par_kind ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'kind'" );
                    goto error_exit;
                }

                _python_par_kind = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_order == key )
            {
                if (unlikely( _python_par_order ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'order'" );
                    goto error_exit;
                }

                _python_par_order = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_tzinfo == key )
            {
                if (unlikely( _python_par_tzinfo ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'tzinfo'" );
                    goto error_exit;
                }

                _python_par_tzinfo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_kind, key ) )
            {
                if (unlikely( _python_par_kind ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'kind'" );
                    goto error_exit;
                }

                _python_par_kind = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_order, key ) )
            {
                if (unlikely( _python_par_order ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'order'" );
                    goto error_exit;
                }

                _python_par_order = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_tzinfo, key ) )
            {
                if (unlikely( _python_par_tzinfo ))
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'tzinfo'" );
                    goto error_exit;
                }

                _python_par_tzinfo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "datetimes() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "datetimes() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "datetimes() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "datetimes() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "datetimes() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "datetimes() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "datetimes() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "datetimes() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "datetimes() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "datetimes() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "datetimes() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "datetimes() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_kind != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'kind'" );
             goto error_exit;
         }

        _python_par_kind = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_order != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'order'" );
             goto error_exit;
         }

        _python_par_order = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_tzinfo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "datetimes() got multiple values for keyword argument 'tzinfo'" );
             goto error_exit;
         }

        _python_par_tzinfo = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_order == NULL )
    {
        _python_par_order = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_order );
    }
    if ( _python_par_tzinfo == NULL )
    {
        _python_par_tzinfo = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_tzinfo );
    }


    return impl_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_field_name, _python_par_kind, _python_par_order, _python_par_tzinfo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_name );
    Py_XDECREF( _python_par_kind );
    Py_XDECREF( _python_par_order );
    Py_XDECREF( _python_par_tzinfo );

    return NULL;
}

static PyObject *dparse_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_34_none_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d3b3bbf5b82097ea23186402f4970cf0, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 572 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 573 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_empty ) ).asObject() ) );
        frame_guard.setLineNumber( 574 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "none() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "none() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "none() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "none() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "none() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "none() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "none() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "none() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "none() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "none() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "none() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "none() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "none() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "none() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "none() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "none() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "none() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_35_all_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d0fa93e8c65d8c71844c8d07d720514a, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 585 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "all() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "all() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "all() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "all() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "all() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "all() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "all() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "all() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "all() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "all() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "all() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "all() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "all() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "all() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "all() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "all() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "all() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_0c37e3053be3584b836affa0b759eea1, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 592 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper0 call_tmp3;
            return ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__filter_or_exclude ) ), call_tmp3.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), INCREASE_REFCOUNT( _python_tuple_false_tuple ), call_tmp3.asObject(), _python_var_kwargs.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "filter() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "filter() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "filter() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "filter() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "filter() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "filter() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_7f23b46c5ca5beff75a64af38ed12458, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 599 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper0 call_tmp3;
            return ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__filter_or_exclude ) ), call_tmp3.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), INCREASE_REFCOUNT( _python_tuple_true_tuple ), call_tmp3.asObject(), _python_var_kwargs.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "exclude() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "exclude() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "exclude() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "exclude() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "exclude() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "exclude() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "exclude() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_negate, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_negate( _python_str_plain_negate, _python_par_negate );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_c233ddb913fb525bbf509afa4df412bf, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 602 );
        if ( ( CHECK_IF_TRUE( _python_var_args.asObject() ) || CHECK_IF_TRUE( _python_var_kwargs.asObject() ) ) )
        {
            frame_guard.setLineNumber( 603 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 603 );
                {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_6bc57e66d5862e7b15321c68819c5d41 ) ).asObject() ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
        }
        frame_guard.setLineNumber( 606 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 607 );
        if ( CHECK_IF_TRUE( _python_var_negate.asObject() ) )
        {
            frame_guard.setLineNumber( 608 );
            {
                PyObjectTempKeeper1 call4;
                PyObjectTempKeeper0 call_tmp1;
                PyObjectTempKeeper0 call_tmp2;
                DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_q ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), PyObjectTemporary( UNARY_OPERATION( PyNumber_Invert, PyObjectTemporary( ( call_tmp1.assign( _mvar_django__db__models__query_Q.asObject0() ), call_tmp2.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), _python_var_kwargs.asObject1() ) ) ).asObject() ) ).asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 610 );
            {
                PyObjectTempKeeper1 call9;
                PyObjectTempKeeper0 call_tmp6;
                PyObjectTempKeeper0 call_tmp7;
                DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_q ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( ( call_tmp6.assign( _mvar_django__db__models__query_Q.asObject0() ), call_tmp7.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 611 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_negate.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_negate = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_filter_or_exclude() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_filter_or_exclude() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_filter_or_exclude() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument negate was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_negate );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_negate == NULL );

            _python_par_negate = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_negate );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_filter_or_exclude() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_filter_or_exclude() takes at least %d non-keyword arguments (%zd given)", 2, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "_filter_or_exclude() takes at least %d arguments (%zd given)", 2, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_filter_or_exclude() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_negate != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_filter_or_exclude() got multiple values for keyword argument 'negate'" );
             goto error_exit;
         }

        _python_par_negate = INCREASE_REFCOUNT( args[ 1 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 2 )
    {
        _python_par_args = PyTuple_New( args_size - 2 );

        for( Py_ssize_t i = 0; i < args_size - 2; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[2+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_negate, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_negate );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), MAKE_TUPLE( &args[ 2 ], size > 2 ? size-2 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filter_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_filter_obj( _python_str_plain_filter_obj, _python_par_filter_obj );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_aa566767683bb74709dd2e8cfd1d53f2, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 623 );
        {
            PyObjectTempKeeper0 isinstance6;
            if ( ( ( isinstance6.assign( _python_var_filter_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance6.asObject0(), _mvar_django__db__models__query_Q.asObject0() ) ) || HAS_ATTRIBUTE( _python_var_filter_obj.asObject(), _python_str_plain_add_to_query ) ) )
        {
            frame_guard.setLineNumber( 624 );
            _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
            frame_guard.setLineNumber( 625 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_q ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_filter_obj.asObject() ) ) );
            }
            frame_guard.setLineNumber( 626 );
            return _python_var_clone.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 628 );
            {
                PyObjectTempKeeper1 call_tmp3;
                return ( call_tmp3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__filter_or_exclude ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp3.asObject(), INCREASE_REFCOUNT( _python_tuple_none_tuple ), _python_var_filter_obj.asObject1() ) );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_filter_obj.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filter_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "complex_filter() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "complex_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_filter_obj == key )
            {
                if (unlikely( _python_par_filter_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "complex_filter() got multiple values for keyword argument 'filter_obj'" );
                    goto error_exit;
                }

                _python_par_filter_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "complex_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_filter_obj, key ) )
            {
                if (unlikely( _python_par_filter_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "complex_filter() got multiple values for keyword argument 'filter_obj'" );
                    goto error_exit;
                }

                _python_par_filter_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "complex_filter() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "complex_filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "complex_filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "complex_filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "complex_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "complex_filter() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "complex_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "complex_filter() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "complex_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "complex_filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "complex_filter() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "complex_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "complex_filter() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "complex_filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "complex_filter() got multiple values for keyword argument 'filter_obj'" );
             goto error_exit;
         }

        _python_par_filter_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_filter_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filter_obj );

    return NULL;
}

static PyObject *dparse_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_nowait( _python_str_plain_nowait );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_06a5e98fd66bf3ae6073ceb9576d045a, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 636 );
        _python_var_nowait.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_nowait, Py_False ) );
        frame_guard.setLineNumber( 637 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 638 );
        SET_ATTRIBUTE( Py_True, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_for_update );
        frame_guard.setLineNumber( 639 );
        {
                PyObject *tmp_identifier = _python_var_nowait.asObject();
                SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_for_update_nowait );
        }
        frame_guard.setLineNumber( 640 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_nowait.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "select_for_update() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "select_for_update() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "select_for_update() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "select_for_update() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "select_for_update() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "select_for_update() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "select_for_update() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "select_for_update() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "select_for_update() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "select_for_update() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "select_for_update() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "select_for_update() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "select_for_update() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "select_for_update() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "select_for_update() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "select_for_update() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_depth( _python_str_plain_depth );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_e92564a5e701970b8fc94ce9bc70cbb6, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 651 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_str_plain_depth, _python_var_kwargs.asObject() ) )
        {
            frame_guard.setLineNumber( 652 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_warnings.asObject0(), _python_str_plain_warn ) ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE2( _python_str_digest_d731496a0296342bc3a803cd241948e7, _mvar_django__db__models__query_DeprecationWarning.asObject0() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_f154c9a58c9419d7e391901d7b7fe49e ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 654 );
        _python_var_depth.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_depth, _python_int_0 ) );
        frame_guard.setLineNumber( 655 );
        if ( CHECK_IF_TRUE( _python_var_kwargs.asObject() ) )
        {
            frame_guard.setLineNumber( 656 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_db748fa95534a0ab5c4fe6946a4cd9a2, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( TO_LIST( _python_var_kwargs.asObject() ) ).asObject() ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 658 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 659 );
        if ( RICH_COMPARE_BOOL_EQ( _python_var_fields.asObject(), _python_tuple_none_tuple ) )
        {
            frame_guard.setLineNumber( 660 );
            SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_related );
        }
        else
        {
            frame_guard.setLineNumber( 661 );
            if ( CHECK_IF_TRUE( _python_var_fields.asObject() ) )
            {
                frame_guard.setLineNumber( 662 );
                if ( CHECK_IF_TRUE( _python_var_depth.asObject() ) )
                {
                    frame_guard.setLineNumber( 663 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_3020d648cd6337e9fdb3893c7fefc336 ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                }
                frame_guard.setLineNumber( 664 );
                {
                    PyObjectTempKeeper1 call4;
                    DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_select_related ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_fields.asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 666 );
                SET_ATTRIBUTE( Py_True, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_related );
            }
        }
        frame_guard.setLineNumber( 667 );
        if ( CHECK_IF_TRUE( _python_var_depth.asObject() ) )
        {
            frame_guard.setLineNumber( 668 );
            {
                    PyObject *tmp_identifier = _python_var_depth.asObject();
                    SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_max_depth );
            }
        }
        frame_guard.setLineNumber( 669 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_depth.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "select_related() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "select_related() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "select_related() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "select_related() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "select_related() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "select_related() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "select_related() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_fields = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_fields, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_fields = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_fields, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lookups )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lookups( _python_str_plain_lookups, _python_par_lookups );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_2e0c692b4f62210462376310a8d5f9f3, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 681 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 682 );
        if ( RICH_COMPARE_BOOL_EQ( _python_var_lookups.asObject(), _python_tuple_none_tuple ) )
        {
            frame_guard.setLineNumber( 683 );
            SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_clone.asObject(), _python_str_plain__prefetch_related_lookups );
        }
        else
        {
            frame_guard.setLineNumber( 685 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain__prefetch_related_lookups ) ).asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_lookups.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 686 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_lookups.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lookups = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prefetch_related() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prefetch_related() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prefetch_related() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_lookups = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_lookups, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_lookups = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_lookups );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lookups );

    return NULL;
}

static PyObject *dparse_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_arg( _python_str_plain_arg );
    PyObjectLocalVariable _python_var_names( _python_str_plain_names );
    PyObjectLocalVariable _python_var_aggregate( _python_str_plain_aggregate );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_alias( _python_str_plain_alias );
    PyObjectLocalVariable _python_var_aggregate_expr( _python_str_plain_aggregate_expr );

    // Actual function code.
    static PyFrameObject *frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_9e745d1be877e69232a14e71f9231591, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 693 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_args.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 693 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_arg.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 694 );
                {
                    PyObjectTempKeeper1 cmp1;
                    if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_arg.asObject(), _python_str_plain_default_alias ) ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), _python_var_kwargs.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 695 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_c062f03f51c0d484d088da587edd8a60, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_arg.asObject(), _python_str_plain_default_alias ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                }
                }
                frame_guard.setLineNumber( 698 );
                {
                        PyObject *tmp_identifier = _python_var_arg.asObject();
                        PyObject *tmp_subscribed = _python_var_kwargs.asObject();
                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_arg.asObject(), _python_str_plain_default_alias ) ).asObject() );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 700 );
        _python_var_names.assign1( BUILTIN_GETATTR( _python_var_self.asObject(), _python_str_plain__fields, Py_None ) );
        frame_guard.setLineNumber( 701 );
        if ( ( _python_var_names.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 702 );
            _python_var_names.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_all_field_names ) ).asObject() ) ).asObject() ) );
        }
        {
            frame_guard.setLineNumber( 703 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_kwargs.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 703 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    _python_var_aggregate.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 704 );
                {
                    PyObjectTempKeeper0 cmp3;
                    if ( ( cmp3.assign( _python_var_aggregate.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), _python_var_names.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 705 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_7c4b7859917de13f31962ae941362dfd, _python_var_aggregate.asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 708 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 710 );
        {
            PyObjectTempKeeper1 call5;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__setup_aggregate_query ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( TO_LIST( _python_var_kwargs.asObject() ) ).asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 713 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 713 );
                    PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_3 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                    {
                        frame_guard.setLineNumber( 713 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_alias.assign0( _python_tmp_element_1.asObject() );
                        _python_var_aggregate_expr.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 714 );
                {
                    PyObjectTempKeeper1 call10;
                    PyObjectTempKeeper0 make_tuple7;
                    PyObjectTempKeeper1 make_tuple8;
                    DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_aggregate ) ), CALL_FUNCTION( call10.asObject0(), PyObjectTemporary( ( make_tuple7.assign( _python_var_aggregate_expr.asObject() ), make_tuple8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), MAKE_TUPLE3( make_tuple7.asObject0(), make_tuple8.asObject0(), _python_var_alias.asObject() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_5a1a820842e157525aa220f59b90fbb3 ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 717 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_aggregate_expr.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_aggregate.updateLocalsDict( _python_var_names.updateLocalsDict( _python_var_arg.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "annotate() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "annotate() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "annotate() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "annotate() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "annotate() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "annotate() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "annotate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_names( _python_str_plain_field_names, _python_par_field_names );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d287bf6cfcb95665800f25760de9ed1a, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 723 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 723 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_ab70702d60db99eaf73d2344b79596c9 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 725 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 726 );
        DECREASE_REFCOUNT( CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_ordering ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_4d1b1df6cb59d19bfcece9088c210137 ) ).asObject() ) );
        frame_guard.setLineNumber( 727 );
        {
            PyObjectTempKeeper1 call_tmp1;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_ordering ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp1.asObject(), _python_var_field_names.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 728 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_names.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_names = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "order_by() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "order_by() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "order_by() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "order_by() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "order_by() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "order_by() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "order_by() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "order_by() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_field_names = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_field_names, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_field_names = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_field_names );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_names );

    return NULL;
}

static PyObject *dparse_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_names( _python_str_plain_field_names, _python_par_field_names );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_ab34e317676a61f158ef559e6e3701a8, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 734 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 734 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_3baed1002f9c251aa356d2bc405a04b7 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 736 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 737 );
        {
            PyObjectTempKeeper1 call_tmp1;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_distinct_fields ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp1.asObject(), _python_var_field_names.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 738 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_names.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_names = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "distinct() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "distinct() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "distinct() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "distinct() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "distinct() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "distinct() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "distinct() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "distinct() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_field_names = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_field_names, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_field_names = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_field_names );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_names );

    return NULL;
}

static PyObject *dparse_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_select, PyObject *_python_par_where, PyObject *_python_par_params, PyObject *_python_par_tables, PyObject *_python_par_order_by, PyObject *_python_par_select_params )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_select( _python_str_plain_select, _python_par_select );
    PyObjectLocalParameterVariableNoDel _python_var_where( _python_str_plain_where, _python_par_where );
    PyObjectLocalParameterVariableNoDel _python_var_params( _python_str_plain_params, _python_par_params );
    PyObjectLocalParameterVariableNoDel _python_var_tables( _python_str_plain_tables, _python_par_tables );
    PyObjectLocalParameterVariableNoDel _python_var_order_by( _python_str_plain_order_by, _python_par_order_by );
    PyObjectLocalParameterVariableNoDel _python_var_select_params( _python_str_plain_select_params, _python_par_select_params );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d9aa15c1b94ebf72268a3278f463cb3b, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 745 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_can_filter ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 745 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_3014ed28f65e5b81cd3895540bff7ae3 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 747 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 748 );
        {
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            PyObjectTempKeeper0 make_tuple5;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_extra ) ), CALL_FUNCTION_WITH_POSARGS( call7.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_select.asObject() ), make_tuple2.assign( _python_var_select_params.asObject() ), make_tuple3.assign( _python_var_where.asObject() ), make_tuple4.assign( _python_var_params.asObject() ), make_tuple5.assign( _python_var_tables.asObject() ), MAKE_TUPLE6( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), make_tuple4.asObject0(), make_tuple5.asObject0(), _python_var_order_by.asObject() ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 749 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_select_params.updateLocalsDict( _python_var_order_by.updateLocalsDict( _python_var_tables.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_where.updateLocalsDict( _python_var_select.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_select = NULL;
    PyObject *_python_par_where = NULL;
    PyObject *_python_par_params = NULL;
    PyObject *_python_par_tables = NULL;
    PyObject *_python_par_order_by = NULL;
    PyObject *_python_par_select_params = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "extra() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_select == key )
            {
                if (unlikely( _python_par_select ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'select'" );
                    goto error_exit;
                }

                _python_par_select = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_where == key )
            {
                if (unlikely( _python_par_where ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'where'" );
                    goto error_exit;
                }

                _python_par_where = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_params == key )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_tables == key )
            {
                if (unlikely( _python_par_tables ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'tables'" );
                    goto error_exit;
                }

                _python_par_tables = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_order_by == key )
            {
                if (unlikely( _python_par_order_by ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'order_by'" );
                    goto error_exit;
                }

                _python_par_order_by = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_select_params == key )
            {
                if (unlikely( _python_par_select_params ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'select_params'" );
                    goto error_exit;
                }

                _python_par_select_params = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_select, key ) )
            {
                if (unlikely( _python_par_select ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'select'" );
                    goto error_exit;
                }

                _python_par_select = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_where, key ) )
            {
                if (unlikely( _python_par_where ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'where'" );
                    goto error_exit;
                }

                _python_par_where = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_params, key ) )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_tables, key ) )
            {
                if (unlikely( _python_par_tables ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'tables'" );
                    goto error_exit;
                }

                _python_par_tables = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_order_by, key ) )
            {
                if (unlikely( _python_par_order_by ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'order_by'" );
                    goto error_exit;
                }

                _python_par_order_by = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_select_params, key ) )
            {
                if (unlikely( _python_par_select_params ))
                {
                    PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'select_params'" );
                    goto error_exit;
                }

                _python_par_select_params = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "extra() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "extra() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "extra() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "extra() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "extra() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "extra() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "extra() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "extra() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "extra() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "extra() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "extra() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "extra() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "extra() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_select != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'select'" );
             goto error_exit;
         }

        _python_par_select = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_where != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'where'" );
             goto error_exit;
         }

        _python_par_where = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'params'" );
             goto error_exit;
         }

        _python_par_params = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_tables != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'tables'" );
             goto error_exit;
         }

        _python_par_tables = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_order_by != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'order_by'" );
             goto error_exit;
         }

        _python_par_order_by = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_select_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extra() got multiple values for keyword argument 'select_params'" );
             goto error_exit;
         }

        _python_par_select_params = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_select == NULL )
    {
        _python_par_select = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_select );
    }
    if ( _python_par_where == NULL )
    {
        _python_par_where = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_where );
    }
    if ( _python_par_params == NULL )
    {
        _python_par_params = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_params );
    }
    if ( _python_par_tables == NULL )
    {
        _python_par_tables = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_tables );
    }
    if ( _python_par_order_by == NULL )
    {
        _python_par_order_by = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_order_by );
    }
    if ( _python_par_select_params == NULL )
    {
        _python_par_select_params = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_select_params );
    }


    return impl_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_select, _python_par_where, _python_par_params, _python_par_tables, _python_par_order_by, _python_par_select_params );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_select );
    Py_XDECREF( _python_par_where );
    Py_XDECREF( _python_par_params );
    Py_XDECREF( _python_par_tables );
    Py_XDECREF( _python_par_order_by );
    Py_XDECREF( _python_par_select_params );

    return NULL;
}

static PyObject *dparse_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_89df96b2ff7c9736f9ae112e556393f2, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 755 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 756 );
        {
                PyObject *tmp_identifier = UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_standard_ordering ) ).asObject() );
                SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_standard_ordering );
        }
        frame_guard.setLineNumber( 757 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "reverse() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reverse() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reverse() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "reverse() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reverse() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "reverse() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "reverse() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reverse() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reverse() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reverse() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reverse() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reverse() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "reverse() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "reverse() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "reverse() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "reverse() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "reverse() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_1f76d05e0120cfe0bc875bda1972c844, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 767 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 768 );
        if ( RICH_COMPARE_BOOL_EQ( _python_var_fields.asObject(), _python_tuple_none_tuple ) )
        {
            frame_guard.setLineNumber( 769 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_deferred_loading ) ).asObject() ) );
        }
        else
        {
            frame_guard.setLineNumber( 771 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_deferred_loading ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_fields.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 772 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "defer() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "defer() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "defer() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "defer() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "defer() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "defer() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "defer() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "defer() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_fields = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_fields, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_fields = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_fields );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );

    return NULL;
}

static PyObject *dparse_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_49_only_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_e350f3f80e1b544170e4d27c5e969e58, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 780 );
        if ( RICH_COMPARE_BOOL_EQ( _python_var_fields.asObject(), _python_tuple_none_tuple ) )
        {
            frame_guard.setLineNumber( 783 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_e7b91fab5a52be36b1a305302aa4edd4 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 784 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 785 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_immediate_loading ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_fields.asObject() ) ) );
        }
        frame_guard.setLineNumber( 786 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "only() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "only() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "only() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "only() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "only() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "only() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "only() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "only() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_fields = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_fields, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_fields = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_fields );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );

    return NULL;
}

static PyObject *dparse_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_alias )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_50_using_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_239e92b36b71909de9b27980a57d9d75, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 792 );
        _python_var_clone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 793 );
        {
                PyObject *tmp_identifier = _python_var_alias.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_clone.asObject(), _python_str_plain__db );
        }
        frame_guard.setLineNumber( 794 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_alias.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_alias = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "using() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "using() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "using() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "using() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "using() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "using() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "using() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "using() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "using() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "using() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "using() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "using() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "using() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "using() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_alias );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_alias );

    return NULL;
}

static PyObject *dparse_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_8be295557039a07db7d2cc91148d26d5, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 805 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_extra_order_by ) ).asObject() ) || CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_order_by ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_True );
        }
        else
        {
            frame_guard.setLineNumber( 807 );
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_default_ordering ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_meta ) ).asObject() ) ).asObject(), _python_str_plain_ordering ) ).asObject() ) ) )
            {
                return INCREASE_REFCOUNT( Py_True );
            }
            else
            {
                return INCREASE_REFCOUNT( Py_False );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "ordered() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "ordered() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "ordered() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "ordered() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "ordered() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "ordered() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "ordered() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "ordered() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "ordered() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "ordered() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "ordered() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "ordered() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "ordered() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "ordered() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "ordered() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "ordered() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "ordered() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_52_db_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_04ead0509e03d21d65e5f9b887c21f9e, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 816 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__for_write ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 817 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper1 keeper_0;
                return ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ) ) ? keeper_0.asObject() : ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_router.asObject0(), _python_str_plain_db_for_write ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 818 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 keeper_1;
            return ( CHECK_IF_TRUE( keeper_1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ) ) ? keeper_1.asObject() : ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_router.asObject0(), _python_str_plain_db_for_read ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "db() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "db() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "db() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "db() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "db() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "db() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "db() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "db() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "db() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "db() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_objs, PyObject *_python_par_fields, PyObject *_python_par_batch_size )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_batch_size( _python_str_plain_batch_size, _python_par_batch_size );
    PyObjectLocalVariable _python_var_ops( _python_str_plain_ops );
    PyObjectLocalVariable _python_var_batch( _python_str_plain_batch );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );

    // Actual function code.
    static PyFrameObject *frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_b8a978ce7a81a2e928404e705bf04515, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 829 );
        if ( (!( CHECK_IF_TRUE( _python_var_objs.asObject() ) )) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 831 );
        {
            PyObjectTempKeeper0 subscr1;
            _python_var_ops.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_ops ) );
        }
        frame_guard.setLineNumber( 832 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 keeper_0;
            _python_var_batch_size.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_batch_size.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_max ), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_ops.asObject(), _python_str_plain_bulk_batch_size ) ), call4.assign( _python_var_fields.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_objs.asObject() ) ) ).asObject(), _python_int_pos_1 ) ) );
        }
        {
            frame_guard.setLineNumber( 833 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 range7;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( impl_listcontr_1_of_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( MAKE_ITERATOR( PyObjectTemporary( ( range7.assign( BUILTIN_LEN( _python_var_objs.asObject() ) ), BUILTIN_RANGE3( _python_int_0, range7.asObject0(), _python_var_batch_size.asObject() ) ) ).asObject() ), _python_var_batch_size, _python_var_i, _python_var_objs ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 833 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_batch.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 835 );
                {
                    PyObjectTempKeeper1 call13;
                    PyObjectTempKeeper1 call14;
                    PyObjectTempKeeper0 make_dict9;
                    DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__base_manager ) ).asObject(), _python_str_plain__insert ) ), call14.assign( MAKE_TUPLE1( _python_var_batch.asObject() ) ), CALL_FUNCTION( call13.asObject0(), call14.asObject0(), PyObjectTemporary( ( make_dict9.assign( _python_var_fields.asObject() ), MAKE_DICT2( make_dict9.asObject0(), _python_str_plain_fields, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_batch_size.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_objs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_batch.updateLocalsDict( _python_var_ops.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_objs = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_batch_size = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_batched_insert() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_objs == key )
            {
                if (unlikely( _python_par_objs ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'objs'" );
                    goto error_exit;
                }

                _python_par_objs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_batch_size == key )
            {
                if (unlikely( _python_par_batch_size ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'batch_size'" );
                    goto error_exit;
                }

                _python_par_batch_size = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_objs, key ) )
            {
                if (unlikely( _python_par_objs ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'objs'" );
                    goto error_exit;
                }

                _python_par_objs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_batch_size, key ) )
            {
                if (unlikely( _python_par_batch_size ))
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'batch_size'" );
                    goto error_exit;
                }

                _python_par_batch_size = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_batched_insert() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_batched_insert() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_batched_insert() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_batched_insert() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_batched_insert() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "_batched_insert() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_batched_insert() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "_batched_insert() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_batched_insert() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_batched_insert() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_batched_insert() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_batched_insert() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_objs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'objs'" );
             goto error_exit;
         }

        _python_par_objs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_batch_size != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_batched_insert() got multiple values for keyword argument 'batch_size'" );
             goto error_exit;
         }

        _python_par_batch_size = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_objs, _python_par_fields, _python_par_batch_size );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_objs );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_batch_size );

    return NULL;
}

static PyObject *dparse_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_batch_size,PyObjectLocalVariable &python_closure_i,PyObjectLocalParameterVariableNoDel &python_closure_objs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 833 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 833 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_i.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 op1;
                    PyObjectTempKeeper0 slice3;
                    PyObjectTempKeeper0 slice4;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( slice3.assign( python_closure_objs.asObject() ), slice4.assign( python_closure_i.asObject() ), LOOKUP_SLICE( slice3.asObject0(), slice4.asObject0(), PyObjectTemporary( ( op1.assign( python_closure_i.asObject() ), BINARY_OPERATION_ADD( op1.asObject0(), python_closure_batch_size.asObject() ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_klass, PyObject *_python_par_setup, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_klass( _python_str_plain_klass, _python_par_klass );
    PyObjectLocalParameterVariableNoDel _python_var_setup( _python_str_plain_setup, _python_par_setup );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );

    // Actual function code.
    static PyFrameObject *frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_e462fe299871d384b2f74e6b3d7750c9, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 839 );
        if ( ( _python_var_klass.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 840 );
            _python_var_klass.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) );
        }
        frame_guard.setLineNumber( 841 );
        _python_var_query.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clone ) ).asObject() ) );
        frame_guard.setLineNumber( 842 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__sticky_filter ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 843 );
            SET_ATTRIBUTE( Py_True, _python_var_query.asObject(), _python_str_plain_filter_is_sticky );
        }
        frame_guard.setLineNumber( 844 );
        {
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper0 make_dict3;
            _python_var_c.assign1( ( call7.assign( _python_var_klass.asObject() ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), make_dict3.assign( _python_var_query.asObject() ), MAKE_DICT3( make_dict1.asObject0(), _python_str_plain_model, make_dict3.asObject0(), _python_str_plain_query, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ).asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 845 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__for_write ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__for_write );
        }
        frame_guard.setLineNumber( 846 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__prefetch_related_lookups ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__prefetch_related_lookups );
        }
        frame_guard.setLineNumber( 847 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__known_related_objects ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__known_related_objects );
        }
        frame_guard.setLineNumber( 848 );
        {
            PyObjectTempKeeper1 call10;
            DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain___dict__ ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 849 );
        if ( ( CHECK_IF_TRUE( _python_var_setup.asObject() ) && HAS_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ) )
        {
            frame_guard.setLineNumber( 850 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 851 );
        return _python_var_c.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_setup.updateLocalsDict( _python_var_klass.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_c.updateLocalsDict( _python_var_query.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_klass = NULL;
    PyObject *_python_par_setup = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument klass was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_klass );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_klass == NULL );

            _python_par_klass = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_klass );

            kw_found += 1;
        }
    }

    // Check if argument setup was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_setup );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_setup == NULL );

            _python_par_setup = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_setup );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_clone() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_klass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'klass'" );
             goto error_exit;
         }

        _python_par_klass = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_setup != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'setup'" );
             goto error_exit;
         }

        _python_par_setup = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_klass == NULL )
    {
        _python_par_klass = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_klass );
    }
    if ( _python_par_setup == NULL )
    {
        _python_par_setup = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_setup );
    }


    return impl_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_klass, _python_par_setup, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_klass );
    Py_XDECREF( _python_par_setup );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_357250f4faa3279aea18dfb4ee74180f, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 854 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__result_cache ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 855 );
            {
                    PyObjectTemporary tmp_identifier( TO_LIST( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_iterator ) ).asObject() ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__result_cache );
            }
        }
        frame_guard.setLineNumber( 856 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__prefetch_related_lookups ) ).asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__prefetch_done ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 857 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__prefetch_related_objects ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_fetch_all() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_fetch_all() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_fetch_all() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_fetch_all() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_fetch_all() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_fetch_all() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_fetch_all() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_fetch_all() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_fetch_all() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_fetch_all() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_fetch_all() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_fetch_all() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_fetch_all() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_fetch_all() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_fetch_all() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_fetch_all() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_fetch_all() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_832bb5bede227eb290b2a405b68ee15f, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 870 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain__sticky_filter );
        frame_guard.setLineNumber( 871 );
        return _python_var_self.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_next_is_sticky() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_next_is_sticky() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_next_is_sticky() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_next_is_sticky() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_next_is_sticky() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_next_is_sticky() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_merge_sanity_check() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_objects( _python_str_plain_objects );

    // Actual function code.
    static PyFrameObject *frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_a1c87721cbe13392e655b16baf217c37, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 885 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain__known_related_objects ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 885 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 885 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_field.assign0( _python_tmp_element_1.asObject() );
                        _python_var_objects.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 886 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call4;
                    DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__known_related_objects ) ).asObject(), _python_str_plain_setdefault ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_field.asObject(), PyObjectTemporary( PyDict_New() ).asObject() ) ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_objects.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_objects.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_merge_known_related_objects() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_merge_known_related_objects() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_aggregates )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_aggregates( _python_str_plain_aggregates, _python_par_aggregates );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_field_names( _python_str_plain_field_names );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_62d417537d065366baa430625b364d8b, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 892 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 893 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_group_by ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 894 );
            _python_var_field_names.assign1( impl_listcontr_1_of_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_concrete_fields ) ).asObject() ), _python_var_f ) );
            frame_guard.setLineNumber( 895 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_fields ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_field_names.asObject(), Py_False ) ) );
            }
            frame_guard.setLineNumber( 896 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_group_by ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_aggregates.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_field_names.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_aggregates = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_aggregates == key )
            {
                if (unlikely( _python_par_aggregates ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'aggregates'" );
                    goto error_exit;
                }

                _python_par_aggregates = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_aggregates, key ) )
            {
                if (unlikely( _python_par_aggregates ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'aggregates'" );
                    goto error_exit;
                }

                _python_par_aggregates = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_setup_aggregate_query() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_aggregates != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'aggregates'" );
             goto error_exit;
         }

        _python_par_aggregates = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_aggregates );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_aggregates );

    return NULL;
}

static PyObject *dparse_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 894 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 894 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_attname ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_7ca347c70ad5e30a9f888b26c95321d7, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 899 );
        return _python_var_self.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_prepare() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_prepare() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_prepare() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_prepare() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query );
        }

        frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_affba6d92edbdabb1f293cbaa4ccace5, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 905 );
        _python_var_obj.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_values ) ).asObject(), _python_str_plain_pk ) );
        frame_guard.setLineNumber( 906 );
        {
            PyObjectTempKeeper0 cmp6;
            PyObjectTempKeeper0 subscr4;
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__db ) ).asObject() == Py_None ) || ( cmp6.assign( _python_var_connection.asObject() ), RICH_COMPARE_BOOL_EQ( cmp6.asObject0(), PyObjectTemporary( ( subscr4.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__db ) ).asObject() ) ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 907 );
            {
                PyObjectTempKeeper1 call1;
                return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_connection.asObject(), _python_str_plain_connection ) ).asObject() ) ) ).asObject(), _python_str_plain_as_nested_sql ) ).asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 908 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_32234c4f2cc7f661527fa444c719bd34 ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query );
           frame_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_as_sql() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_as_sql() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_2_InstanceCheckMeta_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___instancecheck__( _python_str_plain___instancecheck__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var___instancecheck__.assign1( MAKE_FUNCTION_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query(  ) );
    return _python_var___instancecheck__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );

    // Actual function code.
    static PyFrameObject *frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query ) )
    {
        if ( frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query );
        }

        frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d5f91744d370c21e7dc5b20b04d9f95f, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 916 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_is_empty ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query );
           frame_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__instancecheck__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__instancecheck__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__instancecheck__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__instancecheck__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__instancecheck__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__instancecheck__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__instancecheck__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__instancecheck__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__instancecheck__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__instancecheck__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__instancecheck__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__instancecheck__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__instancecheck__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__instancecheck__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__instancecheck__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__instancecheck__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__instancecheck__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__instancecheck__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__instancecheck__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__instancecheck__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query( self, _python_par_self, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_3_EmptyQuerySet_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var___doc__.assign0( _python_str_digest_a536f1aa99f1e99fe55cf05e9a3f2f49 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query(  ) );
    return _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query );
        }

        frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_05667cefaf432ed2b2f242c553eaef7a, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 925 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_bcca0d796cd2065e865a1bfd63bf7439 ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query );
           frame_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_iterator( _python_str_plain_iterator );
    PyObjectLocalVariable _python_var_delete( _python_str_plain_delete );
    PyObjectLocalVariable _python_var__setup_query( _python_str_plain__setup_query );
    PyObjectLocalVariable _python_var__clone( _python_str_plain__clone );
    PyObjectLocalVariable _python_var__merge_sanity_check( _python_str_plain__merge_sanity_check );
    PyObjectLocalVariable _python_var__setup_aggregate_query( _python_str_plain__setup_aggregate_query );
    PyObjectLocalVariable _python_var__as_sql( _python_str_plain__as_sql );
    PyObjectLocalVariable _python_var__prepare( _python_str_plain__prepare );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var_iterator.assign1( MAKE_FUNCTION_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var_delete.assign1( MAKE_FUNCTION_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var__setup_query.assign1( MAKE_FUNCTION_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var__clone.assign1( MAKE_FUNCTION_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var__merge_sanity_check.assign1( MAKE_FUNCTION_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var__setup_aggregate_query.assign1( MAKE_FUNCTION_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var__as_sql.assign1( MAKE_FUNCTION_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    _python_var__prepare.assign1( MAKE_FUNCTION_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
    return _python_var__prepare.updateLocalsDict( _python_var__as_sql.updateLocalsDict( _python_var__setup_aggregate_query.updateLocalsDict( _python_var__merge_sanity_check.updateLocalsDict( _python_var__clone.updateLocalsDict( _python_var__setup_query.updateLocalsDict( _python_var_delete.updateLocalsDict( _python_var_iterator.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_34dfecc4ad78ec846741fb8966e4cee1, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 929 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__query_ValuesQuerySet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 931 );
        SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select_related );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalVariable python_var_extra_names;
    PyObjectLocalVariable python_var_field_names;
    PyObjectLocalVariable python_var_aggregate_names;
    PyObjectLocalVariable python_var_names;
    PyObjectLocalVariable python_var_row;
};

static void _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_destructor( void *context_voidptr )
{
    _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_t *_python_context = (struct _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_t *)context_voidptr;

    delete _python_context;
}

static void function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_t *_python_context = (_context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_extra_names.setVariableName( _python_str_plain_extra_names );
        _python_context->python_var_field_names.setVariableName( _python_str_plain_field_names );
        _python_context->python_var_aggregate_names.setVariableName( _python_str_plain_aggregate_names );
        _python_context->python_var_names.setVariableName( _python_str_plain_names );
        _python_context->python_var_row.setVariableName( _python_str_plain_row );

        // Actual function code.
        static PyFrameObject *frame_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
        {
            if ( frame_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
                Py_DECREF( frame_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
            }

            frame_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_65a38c645fb5234b2133137ade436672, _module_django__db__models__query );
        }

        Py_INCREF( frame_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        generator->m_frame = frame_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 938 );
            _python_context->python_var_extra_names.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_extra_select ) ).asObject() ) );
            frame_guard.setLineNumber( 939 );
            _python_context->python_var_field_names.assign1( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field_names ) );
            frame_guard.setLineNumber( 940 );
            _python_context->python_var_aggregate_names.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_aggregate_select ) ).asObject() ) );
            frame_guard.setLineNumber( 942 );
            {
                PyObjectTempKeeper0 op1;
                PyObjectTempKeeper1 op3;
                _python_context->python_var_names.assign1( ( op3.assign( ( op1.assign( _python_context->python_var_extra_names.asObject() ), BINARY_OPERATION_ADD( op1.asObject0(), _python_context->python_var_field_names.asObject() ) ) ), BINARY_OPERATION_ADD( op3.asObject0(), _python_context->python_var_aggregate_names.asObject() ) ) );
            }
            {
                frame_guard.setLineNumber( 944 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call5;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_results_iter ) ).asObject() ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 944 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_row.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 945 );
                    {
                        PyObjectTempKeeper0 call8;
                        YIELD_VALUE( generator, TO_DICT( PyObjectTemporary( ( call8.assign( _python_context->python_var_names.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_zip ), call8.asObject0(), _python_context->python_var_row.asObject() ) ) ).asObject(), NULL ) );
                    }

                   CONSIDER_THREADING();
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_t *_python_context = new _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_context,
            _python_str_plain_iterator,
            _codeobj_65a38c645fb5234b2133137ade436672,
            _python_context,
            _context_generator_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function iterator" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iterator() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iterator() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "iterator() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_64b8c3e094b4719b2065eac53c270fe8, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 950 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_5bd267ae4b7d65d05bef858a6c5d9f4d ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "delete() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "delete() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "delete() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "delete() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "delete() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "delete() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "delete() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "delete() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "delete() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "delete() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "delete() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "delete() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "delete() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "delete() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "delete() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "delete() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "delete() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_9060003478c5baf387eebdfa2473a7d3, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 961 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_deferred_loading ) ).asObject() ) );
        frame_guard.setLineNumber( 962 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_select_fields ) ).asObject() ) );
        frame_guard.setLineNumber( 964 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 965 );
            SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_extra_names );
            frame_guard.setLineNumber( 966 );
            SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_aggregate_names );
            frame_guard.setLineNumber( 967 );
            if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_extra ) ).asObject() ) )) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_aggregates ) ).asObject() ) )) ) )
            {
                frame_guard.setLineNumber( 970 );
                {
                        PyObjectTemporary tmp_identifier( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_field_names );
                }
            }
            else
            {
                frame_guard.setLineNumber( 972 );
                SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_default_cols );
                frame_guard.setLineNumber( 973 );
                SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_field_names );
                {
                    frame_guard.setLineNumber( 974 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 974 );
                            PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_1 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                            _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 978 );
                        {
                            PyObjectTempKeeper0 cmp9;
                            if ( ( cmp9.assign( _python_var_f.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_extra ) ).asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 979 );
                            {
                                PyObjectTempKeeper1 call1;
                                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_names ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_f.asObject() ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 980 );
                            {
                                PyObjectTempKeeper0 cmp7;
                                if ( ( cmp7.assign( _python_var_f.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_aggregate_select ) ).asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 981 );
                                {
                                    PyObjectTempKeeper1 call3;
                                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_f.asObject() ) ) );
                                }
                            }
                            else
                            {
                                frame_guard.setLineNumber( 983 );
                                {
                                    PyObjectTempKeeper1 call5;
                                    DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field_names ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_f.asObject() ) ) );
                                }
                            }
                            }
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 986 );
            SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_extra_names );
            frame_guard.setLineNumber( 987 );
            {
                    PyObjectTemporary tmp_identifier( impl_listcontr_1_of_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_concrete_fields ) ).asObject() ), _python_var_f ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_field_names );
            }
            frame_guard.setLineNumber( 988 );
            SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_aggregate_names );
        }
        frame_guard.setLineNumber( 990 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select );
        frame_guard.setLineNumber( 991 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_names ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 992 );
            {
                PyObjectTempKeeper1 call11;
                DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_extra_mask ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_names ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 993 );
        {
            PyObjectTempKeeper1 call13;
            DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_fields ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field_names ) ).asObject(), Py_True ) ) );
        }
        frame_guard.setLineNumber( 994 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 995 );
            {
                PyObjectTempKeeper1 call16;
                DECREASE_REFCOUNT( ( call16.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_aggregate_mask ) ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_setup_query() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_setup_query() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 987 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 987 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_attname ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_klass, PyObject *_python_par_setup, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_klass( _python_str_plain_klass, _python_par_klass );
    PyObjectLocalParameterVariableNoDel _python_var_setup( _python_str_plain_setup, _python_par_setup );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );

    // Actual function code.
    static PyFrameObject *frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_5d0751eac640794cedf6c19d22f5e199, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1001 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper0 super1;
            _python_var_c.assign1( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__query_ValuesQuerySet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__clone ) ), call_tmp4.assign( MAKE_TUPLE1( _python_var_klass.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1002 );
        if ( (!( HAS_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__fields ) )) )
        {
            frame_guard.setLineNumber( 1005 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__fields );
            }
        }
        frame_guard.setLineNumber( 1006 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field_names ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain_field_names );
        }
        frame_guard.setLineNumber( 1007 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_names ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain_extra_names );
        }
        frame_guard.setLineNumber( 1008 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain_aggregate_names );
        }
        frame_guard.setLineNumber( 1009 );
        if ( ( CHECK_IF_TRUE( _python_var_setup.asObject() ) && HAS_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ) )
        {
            frame_guard.setLineNumber( 1010 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1011 );
        return _python_var_c.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_setup.updateLocalsDict( _python_var_klass.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_c.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_klass = NULL;
    PyObject *_python_par_setup = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument klass was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_klass );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_klass == NULL );

            _python_par_klass = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_klass );

            kw_found += 1;
        }
    }

    // Check if argument setup was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_setup );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_setup == NULL );

            _python_par_setup = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_setup );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_clone() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_klass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'klass'" );
             goto error_exit;
         }

        _python_par_klass = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_setup != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'setup'" );
             goto error_exit;
         }

        _python_par_setup = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_klass == NULL )
    {
        _python_par_klass = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_klass );
    }
    if ( _python_par_setup == NULL )
    {
        _python_par_setup = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_setup );
    }


    return impl_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_klass, _python_par_setup, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_klass );
    Py_XDECREF( _python_par_setup );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );

    // Actual function code.
    static PyFrameObject *frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_34ec10c288d0fef149b93fba0c1965e7, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1014 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__query_ValuesQuerySet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__merge_sanity_check ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_other.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1015 );
        {
            PyObjectTempKeeper1 cmp5;
            PyObjectTempKeeper1 cmp7;
            PyObjectTempKeeper1 cmp9;
            if ( ( ( cmp5.assign( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extra_names ) ).asObject() ) ), RICH_COMPARE_BOOL_NE( cmp5.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain_extra_names ) ).asObject() ) ).asObject() ) ) || ( ( cmp7.assign( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field_names ) ).asObject() ) ), RICH_COMPARE_BOOL_NE( cmp7.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain_field_names ) ).asObject() ) ).asObject() ) ) || ( cmp9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) ), RICH_COMPARE_BOOL_NE( cmp9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain_aggregate_names ) ).asObject() ) ) ) ) )
        {
            frame_guard.setLineNumber( 1018 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_2c636617d7e039d6132ffcb19d9b38e3, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_merge_sanity_check() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_merge_sanity_check() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_merge_sanity_check() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_aggregates )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_aggregates( _python_str_plain_aggregates, _python_par_aggregates );

    // Actual function code.
    static PyFrameObject *frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_ae5a94150f2899048b6f85ae173cc546, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1025 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_group_by ) ).asObject() ) );
        frame_guard.setLineNumber( 1027 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1028 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) ).asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_aggregates.asObject() ) ) );
            }
            frame_guard.setLineNumber( 1029 );
            {
                PyObjectTempKeeper1 call3;
                DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_set_aggregate_mask ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_aggregate_names ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1031 );
        {
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 super5;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super5.assign( _mvar_django__db__models__query_ValuesQuerySet.asObject0() ), BUILTIN_SUPER( super5.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__setup_aggregate_query ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_aggregates.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_aggregates.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_aggregates = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_aggregates == key )
            {
                if (unlikely( _python_par_aggregates ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'aggregates'" );
                    goto error_exit;
                }

                _python_par_aggregates = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_aggregates, key ) )
            {
                if (unlikely( _python_par_aggregates ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'aggregates'" );
                    goto error_exit;
                }

                _python_par_aggregates = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_setup_aggregate_query() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_aggregates != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_setup_aggregate_query() got multiple values for keyword argument 'aggregates'" );
             goto error_exit;
         }

        _python_par_aggregates = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_aggregates );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_aggregates );

    return NULL;
}

static PyObject *dparse_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_df384d2c207a73c9a9646dbb80de6e38, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1041 );
        if ( ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) && RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) ).asObject(), _python_int_pos_1 ) ) || ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) )) && RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) ).asObject(), _python_int_pos_1 ) ) ) )
        {
            frame_guard.setLineNumber( 1043 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_ec2405a687c50b83a1646f5c76e4a7f4, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 1046 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clone ) ).asObject() ) );
        frame_guard.setLineNumber( 1047 );
        {
            PyObjectTempKeeper0 cmp6;
            PyObjectTempKeeper0 subscr4;
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__db ) ).asObject() == Py_None ) || ( cmp6.assign( _python_var_connection.asObject() ), RICH_COMPARE_BOOL_EQ( cmp6.asObject0(), PyObjectTemporary( ( subscr4.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__db ) ).asObject() ) ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 1048 );
            {
                PyObjectTempKeeper1 call1;
                return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_connection.asObject(), _python_str_plain_connection ) ).asObject() ) ) ).asObject(), _python_str_plain_as_nested_sql ) ).asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 1049 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_32234c4f2cc7f661527fa444c719bd34 ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_as_sql() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_as_sql() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_as_sql() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_as_sql() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
        }

        frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_ccec8596cde5eb6665a7220109a43cb9, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1056 );
        if ( ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) && RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) ).asObject(), _python_int_pos_1 ) ) || ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) )) && RICH_COMPARE_BOOL_GT( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) ).asObject(), _python_int_pos_1 ) ) ) )
        {
            frame_guard.setLineNumber( 1058 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_ec2405a687c50b83a1646f5c76e4a7f4, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 1060 );
        return _python_var_self.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query );
           frame_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_prepare() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_prepare() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_prepare() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_prepare() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_prepare() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_prepare() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_5_ValuesListQuerySet_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_iterator( _python_str_plain_iterator );
    PyObjectLocalVariable _python_var__clone( _python_str_plain__clone );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var_iterator.assign1( MAKE_FUNCTION_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query(  ) );
    _python_var__clone.assign1( MAKE_FUNCTION_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query(  ) );
    return _python_var__clone.updateLocalsDict( _python_var_iterator.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}



struct _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalVariable python_var_row;
    PyObjectLocalVariable python_var_extra_names;
    PyObjectLocalVariable python_var_field_names;
    PyObjectLocalVariable python_var_aggregate_names;
    PyObjectLocalVariable python_var_names;
    PyObjectLocalVariable python_var_fields;
    PyObjectLocalVariable python_var_data;
    PyObjectLocalVariable python_var_f;
};

static void _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_destructor( void *context_voidptr )
{
    _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_t *_python_context = (struct _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_t *)context_voidptr;

    delete _python_context;
}

static void function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_t *_python_context = (_context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_row.setVariableName( _python_str_plain_row );
        _python_context->python_var_extra_names.setVariableName( _python_str_plain_extra_names );
        _python_context->python_var_field_names.setVariableName( _python_str_plain_field_names );
        _python_context->python_var_aggregate_names.setVariableName( _python_str_plain_aggregate_names );
        _python_context->python_var_names.setVariableName( _python_str_plain_names );
        _python_context->python_var_fields.setVariableName( _python_str_plain_fields );
        _python_context->python_var_data.setVariableName( _python_str_plain_data );
        _python_context->python_var_f.setVariableName( _python_str_plain_f );

        // Actual function code.
        static PyFrameObject *frame_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query ) )
        {
            if ( frame_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query" );
#endif
                Py_DECREF( frame_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query );
            }

            frame_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_f0017ef1436c03dd85bde445053bcc1b, _module_django__db__models__query );
        }

        Py_INCREF( frame_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query );
        generator->m_frame = frame_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 1065 );
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_flat ) ).asObject() ) && RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) ).asObject(), _python_int_pos_1 ) ) )
            {
                {
                    frame_guard.setLineNumber( 1066 );
                    PyObject *_tmp_python_tmp_for_iterator;
                    {
                        PyObjectTempKeeper1 call1;
                        _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_results_iter ) ).asObject() ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 1066 );
                            PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_1 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                            _python_context->python_var_row.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 1067 );
                        YIELD_VALUE( generator, LOOKUP_SUBSCRIPT_CONST( _python_context->python_var_row.asObject(), _python_int_0, 0 ) );

                       CONSIDER_THREADING();
                    }
                }
            }
            else
            {
                frame_guard.setLineNumber( 1068 );
                if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_extra_select ) ).asObject() ) )) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_aggregate_select ) ).asObject() ) )) ) )
                {
                    {
                        frame_guard.setLineNumber( 1069 );
                        PyObject *_tmp_python_tmp_for_iterator;
                        {
                            PyObjectTempKeeper1 call3;
                            _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_results_iter ) ).asObject() ) ).asObject() );
                        }
                        PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 1069 );
                                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_2 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                _python_context->python_var_row.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 1070 );
                            YIELD_VALUE( generator, TO_TUPLE( _python_context->python_var_row.asObject() ) );

                           CONSIDER_THREADING();
                        }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1075 );
                    _python_context->python_var_extra_names.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_extra_select ) ).asObject() ) );
                    frame_guard.setLineNumber( 1076 );
                    _python_context->python_var_field_names.assign1( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_field_names ) );
                    frame_guard.setLineNumber( 1077 );
                    _python_context->python_var_aggregate_names.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_aggregate_select ) ).asObject() ) );
                    frame_guard.setLineNumber( 1079 );
                    {
                        PyObjectTempKeeper0 op5;
                        PyObjectTempKeeper1 op7;
                        _python_context->python_var_names.assign1( ( op7.assign( ( op5.assign( _python_context->python_var_extra_names.asObject() ), BINARY_OPERATION_ADD( op5.asObject0(), _python_context->python_var_field_names.asObject() ) ) ), BINARY_OPERATION_ADD( op7.asObject0(), _python_context->python_var_aggregate_names.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1083 );
                    if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) )
                    {
                        frame_guard.setLineNumber( 1084 );
                        {
                            PyObjectTempKeeper1 op9;
                            _python_context->python_var_fields.assign1( ( op9.assign( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain__fields ) ).asObject() ) ), BINARY_OPERATION_ADD( op9.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( MAKE_ITERATOR( _python_context->python_var_aggregate_names.asObject() ), _python_context->python_var_f, _python_context->python_var_self ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 1086 );
                        _python_context->python_var_fields.assign0( _python_context->python_var_names.asObject() );
                    }
                    {
                        frame_guard.setLineNumber( 1088 );
                        PyObject *_tmp_python_tmp_for_iterator;
                        {
                            PyObjectTempKeeper1 call11;
                            _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_results_iter ) ).asObject() ) ).asObject() );
                        }
                        PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 1088 );
                                PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_3 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                                _python_context->python_var_row.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 1089 );
                            {
                                PyObjectTempKeeper0 call14;
                                _python_context->python_var_data.assign1( TO_DICT( PyObjectTemporary( ( call14.assign( _python_context->python_var_names.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_zip ), call14.asObject0(), _python_context->python_var_row.asObject() ) ) ).asObject(), NULL ) );
                            }
                            frame_guard.setLineNumber( 1090 );
                            YIELD_VALUE( generator, TO_TUPLE( PyObjectTemporary( impl_listcontr_2_of_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( MAKE_ITERATOR( _python_context->python_var_fields.asObject() ), _python_context->python_var_data, _python_context->python_var_f ) ).asObject() ) );

                           CONSIDER_THREADING();
                        }
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_t *_python_context = new _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_context,
            _python_str_plain_iterator,
            _codeobj_f0017ef1436c03dd85bde445053bcc1b,
            _python_context,
            _context_generator_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function iterator" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iterator() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iterator() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "iterator() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f,PyObjectLocalParameterVariableNoDel &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1084 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1084 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( cmp1.assign( python_closure_f.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain__fields ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1084 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_f.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_data,PyObjectLocalVariable &python_closure_f )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1090 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1090 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 subscr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( subscr1.assign( python_closure_data.asObject() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), python_closure_f.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_clone( _python_str_plain_clone );

    // Actual function code.
    static PyFrameObject *frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query );
        }

        frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_bdf4241f4b8d5ec0b3f0f9446b52f0e0, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1093 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            _python_var_clone.assign1( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__query_ValuesListQuerySet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__clone ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1094 );
        if ( (!( HAS_ATTRIBUTE( _python_var_clone.asObject(), _python_str_plain_flat ) )) )
        {
            frame_guard.setLineNumber( 1096 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_flat ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_clone.asObject(), _python_str_plain_flat );
            }
        }
        frame_guard.setLineNumber( 1097 );
        return _python_var_clone.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_clone.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query );
           frame_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_clone() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_6_DateQuerySet_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_iterator( _python_str_plain_iterator );
    PyObjectLocalVariable _python_var__setup_query( _python_str_plain__setup_query );
    PyObjectLocalVariable _python_var__clone( _python_str_plain__clone );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var_iterator.assign1( MAKE_FUNCTION_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query(  ) );
    _python_var__setup_query.assign1( MAKE_FUNCTION_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query(  ) );
    _python_var__clone.assign1( MAKE_FUNCTION_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query(  ) );
    return _python_var__clone.updateLocalsDict( _python_var__setup_query.updateLocalsDict( _python_var_iterator.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query );
        }

        frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_2cedca3d6d02ce3754301bcfab0177ac, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1102 );
        {
            PyObjectTempKeeper1 call1;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_results_iter ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query );
           frame_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iterator() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iterator() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "iterator() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query );
        }

        frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_9df3ac41c7fd540a91ecd66394d51708, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1111 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_deferred_loading ) ).asObject() ) );
        frame_guard.setLineNumber( 1112 );
        {
            PyObjectTempKeeper1 call1;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clone ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT2( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_DateQuery ) ).asObject(), _python_str_plain_klass, Py_True, _python_str_plain_setup ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_query );
        }
        }
        frame_guard.setLineNumber( 1113 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select );
        frame_guard.setLineNumber( 1114 );
        {
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_select ) ), call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__field_name ) ), call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__kind ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), call5.asObject0(), call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__order ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query );
           frame_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_setup_query() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_setup_query() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_klass, PyObject *_python_par_setup, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_klass( _python_str_plain_klass, _python_par_klass );
    PyObjectLocalParameterVariableNoDel _python_var_setup( _python_str_plain_setup, _python_par_setup );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );

    // Actual function code.
    static PyFrameObject *frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query );
        }

        frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_407f246e0e9a981a28bb3db40aab1bcc, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1117 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper0 super1;
            _python_var_c.assign1( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__query_DateQuerySet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__clone ) ), call_tmp4.assign( MAKE_TUPLE2( _python_var_klass.asObject(), Py_False ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1118 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__field_name ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__field_name );
        }
        frame_guard.setLineNumber( 1119 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__kind ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__kind );
        }
        frame_guard.setLineNumber( 1120 );
        if ( ( CHECK_IF_TRUE( _python_var_setup.asObject() ) && HAS_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ) )
        {
            frame_guard.setLineNumber( 1121 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1122 );
        return _python_var_c.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_setup.updateLocalsDict( _python_var_klass.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_c.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query );
           frame_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_klass = NULL;
    PyObject *_python_par_setup = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument klass was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_klass );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_klass == NULL );

            _python_par_klass = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_klass );

            kw_found += 1;
        }
    }

    // Check if argument setup was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_setup );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_setup == NULL );

            _python_par_setup = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_setup );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_clone() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_klass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'klass'" );
             goto error_exit;
         }

        _python_par_klass = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_setup != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'setup'" );
             goto error_exit;
         }

        _python_par_setup = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_klass == NULL )
    {
        _python_par_klass = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_klass );
    }
    if ( _python_par_setup == NULL )
    {
        _python_par_setup = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_setup );
    }


    return impl_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_klass, _python_par_setup, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_klass );
    Py_XDECREF( _python_par_setup );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_7_DateTimeQuerySet_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_iterator( _python_str_plain_iterator );
    PyObjectLocalVariable _python_var__setup_query( _python_str_plain__setup_query );
    PyObjectLocalVariable _python_var__clone( _python_str_plain__clone );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var_iterator.assign1( MAKE_FUNCTION_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  ) );
    _python_var__setup_query.assign1( MAKE_FUNCTION_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  ) );
    _python_var__clone.assign1( MAKE_FUNCTION_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  ) );
    return _python_var__clone.updateLocalsDict( _python_var__setup_query.updateLocalsDict( _python_var_iterator.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
        }

        frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_8150bda4c3ba02a6ffe33f62cb91a64b, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1127 );
        {
            PyObjectTempKeeper1 call1;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_results_iter ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
           frame_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iterator() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iterator() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "iterator() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "iterator() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "iterator() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "iterator() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
        }

        frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_5a5192f592623579a5108d2c7677fb00, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1136 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clear_deferred_loading ) ).asObject() ) );
        frame_guard.setLineNumber( 1137 );
        {
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper1 make_dict1;
            {
                PyObjectTemporary tmp_identifier( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clone ) ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_DateTimeQuery ) ), MAKE_DICT3( make_dict1.asObject0(), _python_str_plain_klass, Py_True, _python_str_plain_setup, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__tzinfo ) ).asObject(), _python_str_plain_tzinfo ) ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_query );
        }
        }
        frame_guard.setLineNumber( 1138 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_select );
        frame_guard.setLineNumber( 1139 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper1 call12;
            DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_add_select ) ), call11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__field_name ) ), call12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__kind ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), call12.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__order ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
           frame_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_setup_query() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_setup_query() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_setup_query() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_setup_query() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_klass, PyObject *_python_par_setup, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_klass( _python_str_plain_klass, _python_par_klass );
    PyObjectLocalParameterVariableNoDel _python_var_setup( _python_str_plain_setup, _python_par_setup );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );

    // Actual function code.
    static PyFrameObject *frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
        }

        frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_82b6cecc51ede2d0a64a5378ce400975, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1142 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper0 super1;
            _python_var_c.assign1( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__query_DateTimeQuerySet.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain__clone ) ), call_tmp4.assign( MAKE_TUPLE2( _python_var_klass.asObject(), Py_False ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1143 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__field_name ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__field_name );
        }
        frame_guard.setLineNumber( 1144 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__kind ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__kind );
        }
        frame_guard.setLineNumber( 1145 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__tzinfo ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_c.asObject(), _python_str_plain__tzinfo );
        }
        frame_guard.setLineNumber( 1146 );
        if ( ( CHECK_IF_TRUE( _python_var_setup.asObject() ) && HAS_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ) )
        {
            frame_guard.setLineNumber( 1147 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_c.asObject(), _python_str_plain__setup_query ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1148 );
        return _python_var_c.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_setup.updateLocalsDict( _python_var_klass.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_c.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query );
           frame_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_klass = NULL;
    PyObject *_python_par_setup = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "_clone() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument klass was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_klass );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_klass == NULL );

            _python_par_klass = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_klass );

            kw_found += 1;
        }
    }

    // Check if argument setup was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_setup );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_setup == NULL );

            _python_par_setup = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_setup );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_clone() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_clone() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_clone() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_klass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'klass'" );
             goto error_exit;
         }

        _python_par_klass = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_setup != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clone() got multiple values for keyword argument 'setup'" );
             goto error_exit;
         }

        _python_par_setup = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_klass == NULL )
    {
        _python_par_klass = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_klass );
    }
    if ( _python_par_setup == NULL )
    {
        _python_par_setup = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_setup );
    }


    return impl_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_klass, _python_par_setup, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_klass );
    Py_XDECREF( _python_par_setup );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_get_klass_info_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_klass, PyObject *_python_par_max_depth, PyObject *_python_par_cur_depth, PyObject *_python_par_requested, PyObject *_python_par_only_load, PyObject *_python_par_from_parent )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_klass( _python_str_plain_klass, _python_par_klass );
    PyObjectLocalParameterVariableNoDel _python_var_max_depth( _python_str_plain_max_depth, _python_par_max_depth );
    PyObjectLocalParameterVariableNoDel _python_var_cur_depth( _python_str_plain_cur_depth, _python_par_cur_depth );
    PyObjectLocalParameterVariableNoDel _python_var_requested( _python_str_plain_requested, _python_par_requested );
    PyObjectLocalParameterVariableNoDel _python_var_only_load( _python_str_plain_only_load, _python_par_only_load );
    PyObjectLocalParameterVariableNoDel _python_var_from_parent( _python_str_plain_from_parent, _python_par_from_parent );
    PyObjectLocalVariable _python_var_load_fields( _python_str_plain_load_fields );
    PyObjectLocalVariable _python_var_parent( _python_str_plain_parent );
    PyObjectLocalVariable _python_var_fields( _python_str_plain_fields );
    PyObjectLocalVariable _python_var_skip( _python_str_plain_skip );
    PyObjectLocalVariable _python_var_init_list( _python_str_plain_init_list );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_model( _python_str_plain_model );
    PyObjectLocalVariable _python_var_field_count( _python_str_plain_field_count );
    PyObjectLocalVariable _python_var_field_names( _python_str_plain_field_names );
    PyObjectLocalVariable _python_var_non_seen_models( _python_str_plain_non_seen_models );
    PyObjectLocalVariable _python_var_restricted( _python_str_plain_restricted );
    PyObjectLocalVariable _python_var_related_fields( _python_str_plain_related_fields );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_next( _python_str_plain_next );
    PyObjectLocalVariable _python_var_klass_info( _python_str_plain_klass_info );
    PyObjectLocalVariable _python_var_reverse_related_fields( _python_str_plain_reverse_related_fields );
    PyObjectLocalVariable _python_var_o( _python_str_plain_o );
    PyObjectLocalVariable _python_var_pk_idx( _python_str_plain_pk_idx );
    PyObjectLocalVariable _python_var_p( _python_str_plain_p );

    // Actual function code.
    static PyFrameObject *frame_function_8_get_klass_info_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_8_get_klass_info_of_module_django__db__models__query ) )
    {
        if ( frame_function_8_get_klass_info_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_get_klass_info_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_8_get_klass_info_of_module_django__db__models__query );
        }

        frame_function_8_get_klass_info_of_module_django__db__models__query = MAKE_FRAME( _codeobj_8a2b7516bcfa9de18dd45cfa14c5585f, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_8_get_klass_info_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_8_get_klass_info_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1177 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( CHECK_IF_TRUE( _python_var_max_depth.asObject() ) && ( ( _python_var_requested.asObject() == Py_None ) && ( cmp1.assign( _python_var_cur_depth.asObject() ), RICH_COMPARE_BOOL_GT( cmp1.asObject0(), _python_var_max_depth.asObject() ) ) ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 1181 );
        if ( CHECK_IF_TRUE( _python_var_only_load.asObject() ) )
        {
            frame_guard.setLineNumber( 1182 );
            {
                PyObjectTempKeeper1 call3;
                PyObjectTempKeeper1 keeper_2;
                _python_var_load_fields.assign1( ( CHECK_IF_TRUE( keeper_2.assign( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_only_load.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_klass.asObject() ) ) ) ) ? keeper_2.asObject() : CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) ) );
            }
            {
                frame_guard.setLineNumber( 1186 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_parent_list ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1186 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_parent.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 1187 );
                    {
                        PyObjectTempKeeper1 call5;
                        _python_var_fields.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_only_load.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_parent.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1188 );
                    if ( CHECK_IF_TRUE( _python_var_fields.asObject() ) )
                    {
                        frame_guard.setLineNumber( 1189 );
                        {
                            PyObjectTempKeeper1 call7;
                            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_load_fields.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_fields.asObject() ) ) );
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        else
        {
            _python_var_load_fields.assign0( Py_None );
        }
        frame_guard.setLineNumber( 1193 );
        if ( CHECK_IF_TRUE( _python_var_load_fields.asObject() ) )
        {
            frame_guard.setLineNumber( 1195 );
            _python_var_skip.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
            _python_var_init_list.assign1( PyList_New( 0 ) );
            {
                frame_guard.setLineNumber( 1198 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_concrete_fields_with_model ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1198 );
                        PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_2 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                        {
                            frame_guard.setLineNumber( 1198 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_field.assign0( _python_tmp_element_1.asObject() );
                            _python_var_model.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 1199 );
                    {
                        PyObjectTempKeeper1 cmp16;
                        if ( ( cmp16.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_name ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp16.asObject0(), _python_var_load_fields.asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 1200 );
                        {
                            PyObjectTempKeeper1 call9;
                            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_skip.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_attname ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 1201 );
                        {
                            PyObjectTempKeeper0 call14;
                            if ( ( CHECK_IF_TRUE( _python_var_from_parent.asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call14.assign( _python_var_from_parent.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_issubclass ), call14.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain___class__ ) ).asObject() ) ) ).asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 1204 );
                            CONSIDER_THREADING(); continue;
                        }
                        else
                        {
                            frame_guard.setLineNumber( 1206 );
                            {
                                PyObjectTempKeeper1 call11;
                                DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_init_list.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_attname ) ).asObject() ) ) );
                            }
                        }
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 1208 );
            _python_var_field_count.assign1( BUILTIN_LEN( _python_var_init_list.asObject() ) );
            frame_guard.setLineNumber( 1209 );
            if ( CHECK_IF_TRUE( _python_var_skip.asObject() ) )
            {
                frame_guard.setLineNumber( 1210 );
                {
                    PyObjectTempKeeper0 call18;
                    PyObjectTempKeeper0 call19;
                    _python_var_klass.assign1( ( call18.assign( _mvar_django__db__models__query_deferred_class_factory.asObject0() ), call19.assign( _python_var_klass.asObject() ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), call19.asObject0(), _python_var_skip.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1211 );
                _python_var_field_names.assign0( _python_var_init_list.asObject() );
            }
            else
            {
                _python_var_field_names.assign0( _python_tuple_empty );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1217 );
            _python_var_field_count.assign1( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_concrete_fields ) ).asObject() ) );
            frame_guard.setLineNumber( 1219 );
            {
                PyObjectTempKeeper1 cmp23;
                if ( ( CHECK_IF_TRUE( _python_var_from_parent.asObject() ) && ( cmp23.assign( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_local_concrete_fields ) ).asObject() ) ), RICH_COMPARE_BOOL_NE( cmp23.asObject0(), PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_concrete_fields ) ).asObject() ) ).asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 1222 );
                _python_var_non_seen_models.assign1( impl_listcontr_1_of_function_8_get_klass_info_of_module_django__db__models__query( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_parent_list ) ).asObject() ) ).asObject() ), _python_var_from_parent, _python_var_p ) );
                frame_guard.setLineNumber( 1225 );
                {
                    PyObjectTempKeeper1 call21;
                    DECREASE_REFCOUNT( ( call21.assign( LOOKUP_ATTRIBUTE( _python_var_non_seen_models.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_var_klass.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1226 );
                _python_var_field_names.assign1( impl_listcontr_2_of_function_8_get_klass_info_of_module_django__db__models__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_concrete_fields ) ).asObject() ), _python_var_f, _python_var_non_seen_models ) );
                frame_guard.setLineNumber( 1228 );
                _python_var_field_count.assign1( BUILTIN_LEN( _python_var_field_names.asObject() ) );
            }
            }
            frame_guard.setLineNumber( 1232 );
            {
                PyObjectTempKeeper0 cmp25;
                if ( ( cmp25.assign( _python_var_field_count.asObject() ), RICH_COMPARE_BOOL_EQ( cmp25.asObject0(), PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_concrete_fields ) ).asObject() ) ).asObject() ) ) )
            {
                _python_var_field_names.assign0( _python_tuple_empty );
            }
            }
        }
        frame_guard.setLineNumber( 1235 );
        _python_var_restricted.assign0( BOOL_FROM( ( _python_var_requested.asObject() != Py_None ) ) );
        _python_var_related_fields.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1238 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1238 );
                    PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_3 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1239 );
                {
                    PyObjectTempKeeper0 call44;
                    PyObjectTempKeeper0 call45;
                    PyObjectTempKeeper0 call46;
                    PyObjectTempKeeper0 call47;
                    if ( CHECK_IF_TRUE( PyObjectTemporary( ( call44.assign( _mvar_django__db__models__query_select_related_descend.asObject0() ), call45.assign( _python_var_f.asObject() ), call46.assign( _python_var_restricted.asObject() ), call47.assign( _python_var_requested.asObject() ), CALL_FUNCTION_WITH_ARGS( call44.asObject0(), call45.asObject0(), call46.asObject0(), call47.asObject0(), _python_var_load_fields.asObject() ) ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 1240 );
                    if ( CHECK_IF_TRUE( _python_var_restricted.asObject() ) )
                    {
                        frame_guard.setLineNumber( 1241 );
                        {
                            PyObjectTempKeeper0 subscr27;
                            _python_var_next.assign1( ( subscr27.assign( _python_var_requested.asObject() ), LOOKUP_SUBSCRIPT( subscr27.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_name ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        _python_var_next.assign0( Py_None );
                    }
                    frame_guard.setLineNumber( 1244 );
                    {
                        PyObjectTempKeeper0 call37;
                        PyObjectTempKeeper1 call38;
                        PyObjectTempKeeper0 make_dict29;
                        PyObjectTempKeeper1 make_dict31;
                        PyObjectTempKeeper0 make_dict33;
                        _python_var_klass_info.assign1( ( call37.assign( _mvar_django__db__models__query_get_klass_info.asObject0() ), call38.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) ), CALL_FUNCTION( call37.asObject0(), call38.asObject0(), PyObjectTemporary( ( make_dict29.assign( _python_var_max_depth.asObject() ), make_dict31.assign( BINARY_OPERATION_ADD( _python_var_cur_depth.asObject(), _python_int_pos_1 ) ), make_dict33.assign( _python_var_next.asObject() ), MAKE_DICT4( make_dict29.asObject0(), _python_str_plain_max_depth, make_dict31.asObject0(), _python_str_plain_cur_depth, make_dict33.asObject0(), _python_str_plain_requested, _python_var_only_load.asObject(), _python_str_plain_only_load ) ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1246 );
                    {
                        PyObjectTempKeeper1 call42;
                        PyObjectTempKeeper0 make_tuple40;
                        DECREASE_REFCOUNT( ( call42.assign( LOOKUP_ATTRIBUTE( _python_var_related_fields.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call42.asObject0(), PyObjectTemporary( ( make_tuple40.assign( _python_var_f.asObject() ), MAKE_TUPLE2( make_tuple40.asObject0(), _python_var_klass_info.asObject() ) ) ).asObject() ) ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        _python_var_reverse_related_fields.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 1249 );
        if ( CHECK_IF_TRUE( _python_var_restricted.asObject() ) )
        {
            {
                frame_guard.setLineNumber( 1250 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_all_related_objects ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1250 );
                        PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_4 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                        _python_var_o.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 1251 );
                    {
                        PyObjectTempKeeper1 call71;
                        PyObjectTempKeeper0 call77;
                        PyObjectTempKeeper1 make_tuple73;
                        PyObjectTempKeeper0 make_tuple74;
                        PyObjectTempKeeper0 make_tuple75;
                        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_unique ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call77.assign( _mvar_django__db__models__query_select_related_descend.asObject0() ), CALL_FUNCTION( call77.asObject0(), PyObjectTemporary( ( make_tuple73.assign( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_field ) ), make_tuple74.assign( _python_var_restricted.asObject() ), make_tuple75.assign( _python_var_requested.asObject() ), MAKE_TUPLE4( make_tuple73.asObject0(), make_tuple74.asObject0(), make_tuple75.asObject0(), PyObjectTemporary( ( call71.assign( LOOKUP_ATTRIBUTE( _python_var_only_load.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call71.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_model ) ).asObject() ) ) ).asObject() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_20f16b30e1951d468c3080dfc46b8748 ) ).asObject() ) ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 1253 );
                        {
                            PyObjectTempKeeper0 subscr49;
                            _python_var_next.assign1( ( subscr49.assign( _python_var_requested.asObject() ), LOOKUP_SUBSCRIPT( subscr49.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related_query_name ) ).asObject() ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1254 );
                        {
                            PyObjectTempKeeper1 call52;
                            _python_var_parent.assign0( ( CHECK_IF_TRUE( PyObjectTemporary( ( call52.assign( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_model ) ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_issubclass ), call52.asObject0(), _python_var_klass.asObject() ) ) ).asObject() ) ? _python_var_klass.asObject() : Py_None ) );
                        }
                        frame_guard.setLineNumber( 1255 );
                        {
                            PyObjectTempKeeper0 call64;
                            PyObjectTempKeeper1 call65;
                            PyObjectTempKeeper0 make_dict54;
                            PyObjectTempKeeper1 make_dict56;
                            PyObjectTempKeeper0 make_dict58;
                            PyObjectTempKeeper0 make_dict60;
                            _python_var_klass_info.assign1( ( call64.assign( _mvar_django__db__models__query_get_klass_info.asObject0() ), call65.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_model ) ).asObject() ) ), CALL_FUNCTION( call64.asObject0(), call65.asObject0(), PyObjectTemporary( ( make_dict54.assign( _python_var_max_depth.asObject() ), make_dict56.assign( BINARY_OPERATION_ADD( _python_var_cur_depth.asObject(), _python_int_pos_1 ) ), make_dict58.assign( _python_var_next.asObject() ), make_dict60.assign( _python_var_only_load.asObject() ), MAKE_DICT5( make_dict54.asObject0(), _python_str_plain_max_depth, make_dict56.asObject0(), _python_str_plain_cur_depth, make_dict58.asObject0(), _python_str_plain_requested, make_dict60.asObject0(), _python_str_plain_only_load, _python_var_parent.asObject(), _python_str_plain_from_parent ) ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1257 );
                        {
                            PyObjectTempKeeper1 call69;
                            PyObjectTempKeeper1 make_tuple67;
                            DECREASE_REFCOUNT( ( call69.assign( LOOKUP_ATTRIBUTE( _python_var_reverse_related_fields.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call69.asObject0(), PyObjectTemporary( ( make_tuple67.assign( LOOKUP_ATTRIBUTE( _python_var_o.asObject(), _python_str_plain_field ) ), MAKE_TUPLE2( make_tuple67.asObject0(), _python_var_klass_info.asObject() ) ) ).asObject() ) ) );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        frame_guard.setLineNumber( 1258 );
        if ( CHECK_IF_TRUE( _python_var_field_names.asObject() ) )
        {
            frame_guard.setLineNumber( 1259 );
            {
                PyObjectTempKeeper1 call80;
                _python_var_pk_idx.assign1( ( call80.assign( LOOKUP_ATTRIBUTE( _python_var_field_names.asObject(), _python_str_plain_index ) ), CALL_FUNCTION_WITH_ARGS( call80.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_attname ) ).asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1261 );
            _python_var_pk_idx.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk_index ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1263 );
        {
            PyObjectTempKeeper0 make_tuple82;
            PyObjectTempKeeper0 make_tuple83;
            PyObjectTempKeeper0 make_tuple84;
            PyObjectTempKeeper0 make_tuple85;
            PyObjectTempKeeper0 make_tuple86;
            return ( make_tuple82.assign( _python_var_klass.asObject() ), make_tuple83.assign( _python_var_field_names.asObject() ), make_tuple84.assign( _python_var_field_count.asObject() ), make_tuple85.assign( _python_var_related_fields.asObject() ), make_tuple86.assign( _python_var_reverse_related_fields.asObject() ), MAKE_TUPLE6( make_tuple82.asObject0(), make_tuple83.asObject0(), make_tuple84.asObject0(), make_tuple85.asObject0(), make_tuple86.asObject0(), _python_var_pk_idx.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_from_parent.updateLocalsDict( _python_var_only_load.updateLocalsDict( _python_var_requested.updateLocalsDict( _python_var_cur_depth.updateLocalsDict( _python_var_max_depth.updateLocalsDict( _python_var_klass.updateLocalsDict( _python_var_p.updateLocalsDict( _python_var_pk_idx.updateLocalsDict( _python_var_o.updateLocalsDict( _python_var_reverse_related_fields.updateLocalsDict( _python_var_klass_info.updateLocalsDict( _python_var_next.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_related_fields.updateLocalsDict( _python_var_restricted.updateLocalsDict( _python_var_non_seen_models.updateLocalsDict( _python_var_field_names.updateLocalsDict( _python_var_field_count.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_init_list.updateLocalsDict( _python_var_skip.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_parent.updateLocalsDict( _python_var_load_fields.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_get_klass_info_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_8_get_klass_info_of_module_django__db__models__query );
           frame_function_8_get_klass_info_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_get_klass_info_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_klass = NULL;
    PyObject *_python_par_max_depth = NULL;
    PyObject *_python_par_cur_depth = NULL;
    PyObject *_python_par_requested = NULL;
    PyObject *_python_par_only_load = NULL;
    PyObject *_python_par_from_parent = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_klass_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_klass == key )
            {
                if (unlikely( _python_par_klass ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'klass'" );
                    goto error_exit;
                }

                _python_par_klass = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_max_depth == key )
            {
                if (unlikely( _python_par_max_depth ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'max_depth'" );
                    goto error_exit;
                }

                _python_par_max_depth = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cur_depth == key )
            {
                if (unlikely( _python_par_cur_depth ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'cur_depth'" );
                    goto error_exit;
                }

                _python_par_cur_depth = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_requested == key )
            {
                if (unlikely( _python_par_requested ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'requested'" );
                    goto error_exit;
                }

                _python_par_requested = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_only_load == key )
            {
                if (unlikely( _python_par_only_load ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'only_load'" );
                    goto error_exit;
                }

                _python_par_only_load = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_from_parent == key )
            {
                if (unlikely( _python_par_from_parent ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'from_parent'" );
                    goto error_exit;
                }

                _python_par_from_parent = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_klass, key ) )
            {
                if (unlikely( _python_par_klass ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'klass'" );
                    goto error_exit;
                }

                _python_par_klass = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_max_depth, key ) )
            {
                if (unlikely( _python_par_max_depth ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'max_depth'" );
                    goto error_exit;
                }

                _python_par_max_depth = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cur_depth, key ) )
            {
                if (unlikely( _python_par_cur_depth ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'cur_depth'" );
                    goto error_exit;
                }

                _python_par_cur_depth = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_requested, key ) )
            {
                if (unlikely( _python_par_requested ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'requested'" );
                    goto error_exit;
                }

                _python_par_requested = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_only_load, key ) )
            {
                if (unlikely( _python_par_only_load ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'only_load'" );
                    goto error_exit;
                }

                _python_par_only_load = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_from_parent, key ) )
            {
                if (unlikely( _python_par_from_parent ))
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'from_parent'" );
                    goto error_exit;
                }

                _python_par_from_parent = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_klass_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_klass_info() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_klass_info() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_klass_info() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_klass_info() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_klass_info() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_klass_info() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_klass_info() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_klass_info() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_klass_info() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_klass_info() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_klass_info() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_klass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'klass'" );
             goto error_exit;
         }

        _python_par_klass = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_max_depth != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'max_depth'" );
             goto error_exit;
         }

        _python_par_max_depth = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_cur_depth != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'cur_depth'" );
             goto error_exit;
         }

        _python_par_cur_depth = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_requested != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'requested'" );
             goto error_exit;
         }

        _python_par_requested = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_only_load != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'only_load'" );
             goto error_exit;
         }

        _python_par_only_load = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_from_parent != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_klass_info() got multiple values for keyword argument 'from_parent'" );
             goto error_exit;
         }

        _python_par_from_parent = INCREASE_REFCOUNT( args[ 5 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_max_depth == NULL )
    {
        _python_par_max_depth = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_max_depth );
    }
    if ( _python_par_cur_depth == NULL )
    {
        _python_par_cur_depth = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_cur_depth );
    }
    if ( _python_par_requested == NULL )
    {
        _python_par_requested = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_requested );
    }
    if ( _python_par_only_load == NULL )
    {
        _python_par_only_load = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_only_load );
    }
    if ( _python_par_from_parent == NULL )
    {
        _python_par_from_parent = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_from_parent );
    }


    return impl_function_8_get_klass_info_of_module_django__db__models__query( self, _python_par_klass, _python_par_max_depth, _python_par_cur_depth, _python_par_requested, _python_par_only_load, _python_par_from_parent );

error_exit:;

    Py_XDECREF( _python_par_klass );
    Py_XDECREF( _python_par_max_depth );
    Py_XDECREF( _python_par_cur_depth );
    Py_XDECREF( _python_par_requested );
    Py_XDECREF( _python_par_only_load );
    Py_XDECREF( _python_par_from_parent );

    return NULL;
}

static PyObject *dparse_function_8_get_klass_info_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_8_get_klass_info_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_get_klass_info_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_8_get_klass_info_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_from_parent,PyObjectLocalVariable &python_closure_p )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1222 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1222 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_p.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call2;
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call2.assign( python_closure_from_parent.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_issubclass ), call2.asObject0(), python_closure_p.asObject() ) ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 1222 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_p.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_8_get_klass_info_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f,PyObjectLocalVariable &python_closure_non_seen_models )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1226 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1226 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 cmp1;
                    if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_model ) ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), python_closure_non_seen_models.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1226 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_attname ) ).asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_9_get_cached_row_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_row, PyObject *_python_par_index_start, PyObject *_python_par_using, PyObject *_python_par_klass_info, PyObject *_python_par_offset, PyObject *_python_par_parent_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_row( _python_str_plain_row, _python_par_row );
    PyObjectLocalParameterVariableNoDel _python_var_index_start( _python_str_plain_index_start, _python_par_index_start );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );
    PyObjectLocalParameterVariableNoDel _python_var_klass_info( _python_str_plain_klass_info, _python_par_klass_info );
    PyObjectLocalParameterVariableNoDel _python_var_offset( _python_str_plain_offset, _python_par_offset );
    PyObjectLocalParameterVariableNoDel _python_var_parent_data( _python_str_plain_parent_data, _python_par_parent_data );
    PyObjectLocalVariable _python_var_klass( _python_str_plain_klass );
    PyObjectLocalVariable _python_var_field_names( _python_str_plain_field_names );
    PyObjectLocalVariable _python_var_field_count( _python_str_plain_field_count );
    PyObjectLocalVariable _python_var_related_fields( _python_str_plain_related_fields );
    PyObjectLocalVariable _python_var_reverse_related_fields( _python_str_plain_reverse_related_fields );
    PyObjectLocalVariable _python_var_pk_idx( _python_str_plain_pk_idx );
    PyObjectLocalVariable _python_var_fields( _python_str_plain_fields );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_rel_field( _python_str_plain_rel_field );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );
    PyObjectLocalVariable _python_var_index_end( _python_str_plain_index_end );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_cached_row( _python_str_plain_cached_row );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );
    PyObjectLocalVariable _python_var_rel_model( _python_str_plain_rel_model );
    PyObjectLocalVariable _python_var__( _python_str_plain__ );
    PyObjectLocalVariable _python_var_cached_obj( _python_str_plain_cached_obj );

    // Actual function code.
    static PyFrameObject *frame_function_9_get_cached_row_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_9_get_cached_row_of_module_django__db__models__query ) )
    {
        if ( frame_function_9_get_cached_row_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_get_cached_row_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_9_get_cached_row_of_module_django__db__models__query );
        }

        frame_function_9_get_cached_row_of_module_django__db__models__query = MAKE_FRAME( _codeobj_86a7135e0e849791d58f3722f29157a6, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_9_get_cached_row_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_9_get_cached_row_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1287 );
        if ( ( _python_var_klass_info.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        {
            frame_guard.setLineNumber( 1289 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_var_klass_info.asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
            PyObjectTemporary _python_tmp_element_5( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 4 ) );
            PyObjectTemporary _python_tmp_element_6( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 5 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 6 );
            _python_var_klass.assign0( _python_tmp_element_1.asObject() );
            _python_var_field_names.assign0( _python_tmp_element_2.asObject() );
            _python_var_field_count.assign0( _python_tmp_element_3.asObject() );
            _python_var_related_fields.assign0( _python_tmp_element_4.asObject() );
            _python_var_reverse_related_fields.assign0( _python_tmp_element_5.asObject() );
            _python_var_pk_idx.assign0( _python_tmp_element_6.asObject() );
        }
        frame_guard.setLineNumber( 1292 );
        {
            PyObjectTempKeeper0 op1;
            PyObjectTempKeeper0 slice3;
            PyObjectTempKeeper0 slice4;
            _python_var_fields.assign1( ( slice3.assign( _python_var_row.asObject() ), slice4.assign( _python_var_index_start.asObject() ), LOOKUP_SLICE( slice3.asObject0(), slice4.asObject0(), PyObjectTemporary( ( op1.assign( _python_var_index_start.asObject() ), BINARY_OPERATION_ADD( op1.asObject0(), _python_var_field_count.asObject() ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1295 );
        {
            PyObjectTempKeeper0 subscr17;
            PyObjectTempKeeper0 subscr19;
            if ( ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( ( subscr17.assign( _python_var_fields.asObject() ), LOOKUP_SUBSCRIPT( subscr17.asObject0(), _python_var_pk_idx.asObject() ) ) ).asObject(), Py_None ) || RICH_COMPARE_BOOL_EQ( PyObjectTemporary( ( subscr19.assign( _python_var_fields.asObject() ), LOOKUP_SUBSCRIPT( subscr19.asObject0(), _python_var_pk_idx.asObject() ) ) ).asObject(), _python_str_empty ) ) )
        {
            _python_var_obj.assign0( Py_None );
        }
        else
        {
            frame_guard.setLineNumber( 1297 );
            if ( CHECK_IF_TRUE( _python_var_field_names.asObject() ) )
            {
                frame_guard.setLineNumber( 1298 );
                _python_var_fields.assign1( TO_LIST( _python_var_fields.asObject() ) );
                {
                    frame_guard.setLineNumber( 1299 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_parent_data.asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 1299 );
                            PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_1 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                            {
                                frame_guard.setLineNumber( 1299 );
                                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_var_rel_field.assign0( _python_tmp_element_1.asObject() );
                                _python_var_value.assign0( _python_tmp_element_2.asObject() );
                            }
                        }
                        frame_guard.setLineNumber( 1300 );
                        {
                            PyObjectTempKeeper1 call6;
                            DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_field_names.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_attname ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1301 );
                        {
                            PyObjectTempKeeper1 call8;
                            DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_fields.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_value.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
                frame_guard.setLineNumber( 1302 );
                {
                    PyObjectTempKeeper0 call11;
                    PyObjectTempKeeper0 call_tmp13;
                    _python_var_obj.assign1( ( call_tmp13.assign( _python_var_klass.asObject() ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp13.asObject(), TO_DICT( PyObjectTemporary( ( call11.assign( _python_var_field_names.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_zip ), call11.asObject0(), _python_var_fields.asObject() ) ) ).asObject(), NULL ) ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1304 );
                {
                    PyObjectTempKeeper0 call_tmp15;
                    _python_var_obj.assign1( ( call_tmp15.assign( _python_var_klass.asObject() ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp15.asObject(), _python_var_fields.asObject1() ) ) );
                }
            }
        }
        }
        frame_guard.setLineNumber( 1306 );
        if ( CHECK_IF_TRUE( _python_var_obj.asObject() ) )
        {
            frame_guard.setLineNumber( 1307 );
            {
                    PyObject *tmp_identifier = _python_var_using.asObject();
                    SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db );
            }
            frame_guard.setLineNumber( 1308 );
            SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_adding );
        }
        frame_guard.setLineNumber( 1311 );
        {
            PyObjectTempKeeper0 op21;
            PyObjectTempKeeper1 op23;
            _python_var_index_end.assign1( ( op23.assign( ( op21.assign( _python_var_index_start.asObject() ), BINARY_OPERATION_ADD( op21.asObject0(), _python_var_field_count.asObject() ) ) ), BINARY_OPERATION_ADD( op23.asObject0(), _python_var_offset.asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 1314 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_related_fields.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1314 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 1314 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_f.assign0( _python_tmp_element_1.asObject() );
                        _python_var_klass_info.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1316 );
                {
                    PyObjectTempKeeper0 call25;
                    PyObjectTempKeeper0 call26;
                    PyObjectTempKeeper0 call27;
                    PyObjectTempKeeper0 call28;
                    _python_var_cached_row.assign1( ( call25.assign( _mvar_django__db__models__query_get_cached_row.asObject0() ), call26.assign( _python_var_row.asObject() ), call27.assign( _python_var_index_end.asObject() ), call28.assign( _python_var_using.asObject() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), call26.asObject0(), call27.asObject0(), call28.asObject0(), _python_var_klass_info.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1319 );
                if ( CHECK_IF_TRUE( _python_var_cached_row.asObject() ) )
                {
                    {
                        frame_guard.setLineNumber( 1320 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_var_cached_row.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_rel_obj.assign0( _python_tmp_element_1.asObject() );
                        _python_var_index_end.assign0( _python_tmp_element_2.asObject() );
                    }
                    frame_guard.setLineNumber( 1321 );
                    if ( ( _python_var_obj.asObject() != Py_None ) )
                    {
                        frame_guard.setLineNumber( 1324 );
                        {
                            PyObjectTempKeeper0 setattr30;
                            PyObjectTempKeeper1 setattr31;
                            ( ( setattr30.assign( _python_var_obj.asObject() ), setattr31.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr30.asObject0(), setattr31.asObject0(), _python_var_rel_obj.asObject() ) ), Py_None );
                        }
                    }
                    frame_guard.setLineNumber( 1325 );
                    if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_unique ) ).asObject() ) && ( _python_var_rel_obj.asObject() != Py_None ) ) )
                    {
                        frame_guard.setLineNumber( 1328 );
                        {
                            PyObjectTempKeeper0 setattr33;
                            PyObjectTempKeeper1 setattr34;
                            ( ( setattr33.assign( _python_var_rel_obj.asObject() ), setattr34.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr33.asObject0(), setattr34.asObject0(), _python_var_obj.asObject() ) ), Py_None );
                        }
                    }
                }

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 1333 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_reverse_related_fields.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1333 );
                    PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_3 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                    {
                        frame_guard.setLineNumber( 1333 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_f.assign0( _python_tmp_element_1.asObject() );
                        _python_var_klass_info.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                _python_var_parent_data.assign1( PyList_New( 0 ) );
                {
                    frame_guard.setLineNumber( 1336 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_klass_info.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_fields_with_model ) ).asObject() ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 1336 );
                            PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_4 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                            {
                                frame_guard.setLineNumber( 1336 );
                                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_var_rel_field.assign0( _python_tmp_element_1.asObject() );
                                _python_var_rel_model.assign0( _python_tmp_element_2.asObject() );
                            }
                        }
                        frame_guard.setLineNumber( 1337 );
                        {
                            PyObjectTempKeeper0 isinstance43;
                            if ( ( ( _python_var_rel_model.asObject() != Py_None ) && ( isinstance43.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance43.asObject0(), _python_var_rel_model.asObject() ) ) ) )
                        {
                            frame_guard.setLineNumber( 1338 );
                            {
                                PyObjectTempKeeper1 call41;
                                PyObjectTempKeeper0 getattr36;
                                PyObjectTempKeeper0 make_tuple39;
                                DECREASE_REFCOUNT( ( call41.assign( LOOKUP_ATTRIBUTE( _python_var_parent_data.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), PyObjectTemporary( ( make_tuple39.assign( _python_var_rel_field.asObject() ), MAKE_TUPLE2( make_tuple39.asObject0(), PyObjectTemporary( ( getattr36.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr36.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ) ) ).asObject() ) ) );
                            }
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
                frame_guard.setLineNumber( 1340 );
                {
                    PyObjectTempKeeper0 call49;
                    PyObjectTempKeeper1 call50;
                    PyObjectTempKeeper0 make_tuple45;
                    PyObjectTempKeeper0 make_tuple46;
                    PyObjectTempKeeper0 make_tuple47;
                    _python_var_cached_row.assign1( ( call49.assign( _mvar_django__db__models__query_get_cached_row.asObject0() ), call50.assign( ( make_tuple45.assign( _python_var_row.asObject() ), make_tuple46.assign( _python_var_index_end.asObject() ), make_tuple47.assign( _python_var_using.asObject() ), MAKE_TUPLE4( make_tuple45.asObject0(), make_tuple46.asObject0(), make_tuple47.asObject0(), _python_var_klass_info.asObject() ) ) ), CALL_FUNCTION( call49.asObject0(), call50.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_parent_data.asObject(), _python_str_plain_parent_data ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 1344 );
                if ( CHECK_IF_TRUE( _python_var_cached_row.asObject() ) )
                {
                    {
                        frame_guard.setLineNumber( 1345 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_var_cached_row.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_rel_obj.assign0( _python_tmp_element_1.asObject() );
                        _python_var_index_end.assign0( _python_tmp_element_2.asObject() );
                    }
                    frame_guard.setLineNumber( 1346 );
                    if ( ( _python_var_obj.asObject() != Py_None ) )
                    {
                        frame_guard.setLineNumber( 1348 );
                        {
                            PyObjectTempKeeper0 setattr52;
                            PyObjectTempKeeper1 setattr53;
                            ( ( setattr52.assign( _python_var_obj.asObject() ), setattr53.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr52.asObject0(), setattr53.asObject0(), _python_var_rel_obj.asObject() ) ), Py_None );
                        }
                    }
                    frame_guard.setLineNumber( 1349 );
                    if ( ( _python_var_rel_obj.asObject() != Py_None ) )
                    {
                        frame_guard.setLineNumber( 1352 );
                        {
                            PyObjectTempKeeper0 setattr55;
                            PyObjectTempKeeper1 setattr56;
                            ( ( setattr55.assign( _python_var_rel_obj.asObject() ), setattr56.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr55.asObject0(), setattr56.asObject0(), _python_var_obj.asObject() ) ), Py_None );
                        }
                        {
                            frame_guard.setLineNumber( 1354 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_parent_data.asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1354 );
                                    PyObject *_tmp_unpack_5 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_5 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_5 );
                                    {
                                        frame_guard.setLineNumber( 1354 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_var_rel_field.assign0( _python_tmp_element_1.asObject() );
                                        _python_var__.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 1355 );
                                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_rel ) ).asObject() ) )
                                {
                                    frame_guard.setLineNumber( 1356 );
                                    {
                                        PyObjectTempKeeper0 getattr58;
                                        PyObjectTempKeeper0 setattr61;
                                        PyObjectTempKeeper1 setattr62;
                                        ( ( setattr61.assign( _python_var_rel_obj.asObject() ), setattr62.assign( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr61.asObject0(), setattr62.asObject0(), PyObjectTemporary( ( getattr58.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr58.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ) ), Py_None );
                                    }
                                    frame_guard.setLineNumber( 1357 );
                                    try
                                    {
                                        frame_guard.setLineNumber( 1358 );
                                        {
                                            PyObjectTempKeeper0 getattr64;
                                            _python_var_cached_obj.assign1( ( getattr64.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr64.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ).asObject(), NULL ) ) );
                                        }
                                        frame_guard.setLineNumber( 1359 );
                                        {
                                            PyObjectTempKeeper0 setattr67;
                                            PyObjectTempKeeper1 setattr68;
                                            ( ( setattr67.assign( _python_var_rel_obj.asObject() ), setattr68.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr67.asObject0(), setattr68.asObject0(), _python_var_cached_obj.asObject() ) ), Py_None );
                                        }
                                    }
                                    catch ( PythonException &_exception )
                                    {
                                        if ( !_exception.hasTraceback() )
                                        {
                                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                        }
                                        else
                                        {
                                            _exception.addTraceback( frame_guard.getFrame0() );
                                        }

                                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                                        _exception.toExceptionHandler();

                                        if ( _exception.matches( PyExc_AttributeError ) )
                                        {

                                        }
                                        else
                                        {
                                            PyTracebackObject *tb = _exception.getTraceback();
                                            frame_guard.setLineNumber( tb->tb_lineno );
                                            _exception.setTraceback( tb->tb_next );
                                            tb->tb_next = NULL;

                                            throw;
                                        }
                                    }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1363 );
        {
            PyObjectTempKeeper0 make_tuple70;
            return ( make_tuple70.assign( _python_var_obj.asObject() ), MAKE_TUPLE2( make_tuple70.asObject0(), _python_var_index_end.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_parent_data.updateLocalsDict( _python_var_offset.updateLocalsDict( _python_var_klass_info.updateLocalsDict( _python_var_using.updateLocalsDict( _python_var_index_start.updateLocalsDict( _python_var_row.updateLocalsDict( _python_var_cached_obj.updateLocalsDict( _python_var__.updateLocalsDict( _python_var_rel_model.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( _python_var_cached_row.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_index_end.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_rel_field.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_pk_idx.updateLocalsDict( _python_var_reverse_related_fields.updateLocalsDict( _python_var_related_fields.updateLocalsDict( _python_var_field_count.updateLocalsDict( _python_var_field_names.updateLocalsDict( _python_var_klass.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_get_cached_row_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_9_get_cached_row_of_module_django__db__models__query );
           frame_function_9_get_cached_row_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_get_cached_row_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_row = NULL;
    PyObject *_python_par_index_start = NULL;
    PyObject *_python_par_using = NULL;
    PyObject *_python_par_klass_info = NULL;
    PyObject *_python_par_offset = NULL;
    PyObject *_python_par_parent_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_cached_row() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_row == key )
            {
                if (unlikely( _python_par_row ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'row'" );
                    goto error_exit;
                }

                _python_par_row = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_index_start == key )
            {
                if (unlikely( _python_par_index_start ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'index_start'" );
                    goto error_exit;
                }

                _python_par_index_start = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_klass_info == key )
            {
                if (unlikely( _python_par_klass_info ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'klass_info'" );
                    goto error_exit;
                }

                _python_par_klass_info = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_offset == key )
            {
                if (unlikely( _python_par_offset ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'offset'" );
                    goto error_exit;
                }

                _python_par_offset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parent_data == key )
            {
                if (unlikely( _python_par_parent_data ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'parent_data'" );
                    goto error_exit;
                }

                _python_par_parent_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_row, key ) )
            {
                if (unlikely( _python_par_row ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'row'" );
                    goto error_exit;
                }

                _python_par_row = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_index_start, key ) )
            {
                if (unlikely( _python_par_index_start ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'index_start'" );
                    goto error_exit;
                }

                _python_par_index_start = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_klass_info, key ) )
            {
                if (unlikely( _python_par_klass_info ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'klass_info'" );
                    goto error_exit;
                }

                _python_par_klass_info = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_offset, key ) )
            {
                if (unlikely( _python_par_offset ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'offset'" );
                    goto error_exit;
                }

                _python_par_offset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parent_data, key ) )
            {
                if (unlikely( _python_par_parent_data ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'parent_data'" );
                    goto error_exit;
                }

                _python_par_parent_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_cached_row() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_cached_row() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_cached_row() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_cached_row() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_cached_row() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_cached_row() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_cached_row() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_cached_row() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_cached_row() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_cached_row() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_cached_row() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_cached_row() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_row != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'row'" );
             goto error_exit;
         }

        _python_par_row = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_index_start != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'index_start'" );
             goto error_exit;
         }

        _python_par_index_start = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_klass_info != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'klass_info'" );
             goto error_exit;
         }

        _python_par_klass_info = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_offset != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'offset'" );
             goto error_exit;
         }

        _python_par_offset = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_cached_row() got multiple values for keyword argument 'parent_data'" );
             goto error_exit;
         }

        _python_par_parent_data = INCREASE_REFCOUNT( args[ 5 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_offset == NULL )
    {
        _python_par_offset = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_offset );
    }
    if ( _python_par_parent_data == NULL )
    {
        _python_par_parent_data = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_parent_data );
    }


    return impl_function_9_get_cached_row_of_module_django__db__models__query( self, _python_par_row, _python_par_index_start, _python_par_using, _python_par_klass_info, _python_par_offset, _python_par_parent_data );

error_exit:;

    Py_XDECREF( _python_par_row );
    Py_XDECREF( _python_par_index_start );
    Py_XDECREF( _python_par_using );
    Py_XDECREF( _python_par_klass_info );
    Py_XDECREF( _python_par_offset );
    Py_XDECREF( _python_par_parent_data );

    return NULL;
}

static PyObject *dparse_function_9_get_cached_row_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_9_get_cached_row_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_get_cached_row_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___iter__( _python_str_plain___iter__ );
    PyObjectLocalVariable _python_var___repr__( _python_str_plain___repr__ );
    PyObjectLocalVariable _python_var___getitem__( _python_str_plain___getitem__ );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_using( _python_str_plain_using );
    PyObjectLocalVariable _python_var_columns( _python_str_plain_columns );
    PyObjectLocalVariable _python_var_model_fields( _python_str_plain_model_fields );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_query );
    _python_var___doc__.assign0( _python_str_digest_b391a41cd3cb66cc0cee768e68135628 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query(  ) );
    _python_var___iter__.assign1( MAKE_FUNCTION_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query(  ) );
    _python_var___repr__.assign1( MAKE_FUNCTION_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query(  ) );
    _python_var___getitem__.assign1( MAKE_FUNCTION_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query(  ) );
    static PyFrameObject *frame_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_1c73b095f2f52716ec5d0a125c7ba23a, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1453 );
        _python_var_db.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query(  ) ).asObject() ) );
        _python_var_using.assign1( MAKE_FUNCTION_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query(  ) );
        frame_guard.setLineNumber( 1467 );
        _python_var_columns.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query(  ) ).asObject() ) );
        frame_guard.setLineNumber( 1487 );
        _python_var_model_fields.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_model_fields.updateLocalsDict( _python_var_columns.updateLocalsDict( _python_var_using.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var___getitem__.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        throw;
    }
    return _python_var_model_fields.updateLocalsDict( _python_var_columns.updateLocalsDict( _python_var_using.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var___getitem__.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_raw_query, PyObject *_python_par_model, PyObject *_python_par_query, PyObject *_python_par_params, PyObject *_python_par_translations, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_raw_query( _python_str_plain_raw_query, _python_par_raw_query );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_query( _python_str_plain_query, _python_par_query );
    PyObjectLocalParameterVariableNoDel _python_var_params( _python_str_plain_params, _python_par_params );
    PyObjectLocalParameterVariableNoDel _python_var_translations( _python_str_plain_translations, _python_par_translations );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_b6a867abe32a7091695145965edb8d40, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1373 );
        {
                PyObject *tmp_identifier = _python_var_raw_query.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_raw_query );
        }
        frame_guard.setLineNumber( 1374 );
        {
                PyObject *tmp_identifier = _python_var_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 1375 );
        {
                PyObject *tmp_identifier = _python_var_using.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__db );
        }
        frame_guard.setLineNumber( 1376 );
        {
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 keeper_0;
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_query.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_RawQuery ) ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( _python_var_raw_query.asObject() ), make_dict3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ), MAKE_DICT3( make_dict1.asObject0(), _python_str_plain_sql, make_dict3.asObject0(), _python_str_plain_using, _python_var_params.asObject(), _python_str_plain_params ) ) ).asObject() ) ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_query );
        }
        }
        frame_guard.setLineNumber( 1377 );
        {
            PyObjectTempKeeper0 keeper_1;
            {
                PyObject *tmp_identifier = ( CHECK_IF_TRUE( keeper_1.assign( _python_var_params.asObject() ) ) ? keeper_1.asObject0() : _python_tuple_empty );
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_params );
        }
        }
        frame_guard.setLineNumber( 1378 );
        {
            PyObjectTempKeeper0 keeper_2;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_2.assign( _python_var_translations.asObject() ) ) ? INCREASE_REFCOUNT( keeper_2.asObject0() ) : PyDict_New() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_translations );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_translations.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_raw_query.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_raw_query = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_query = NULL;
    PyObject *_python_par_params = NULL;
    PyObject *_python_par_translations = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_raw_query == key )
            {
                if (unlikely( _python_par_raw_query ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'raw_query'" );
                    goto error_exit;
                }

                _python_par_raw_query = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_query == key )
            {
                if (unlikely( _python_par_query ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query'" );
                    goto error_exit;
                }

                _python_par_query = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_params == key )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_translations == key )
            {
                if (unlikely( _python_par_translations ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'translations'" );
                    goto error_exit;
                }

                _python_par_translations = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_raw_query, key ) )
            {
                if (unlikely( _python_par_raw_query ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'raw_query'" );
                    goto error_exit;
                }

                _python_par_raw_query = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_query, key ) )
            {
                if (unlikely( _python_par_query ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query'" );
                    goto error_exit;
                }

                _python_par_query = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_params, key ) )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_translations, key ) )
            {
                if (unlikely( _python_par_translations ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'translations'" );
                    goto error_exit;
                }

                _python_par_translations = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_raw_query != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'raw_query'" );
             goto error_exit;
         }

        _python_par_raw_query = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_query != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query'" );
             goto error_exit;
         }

        _python_par_query = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
             goto error_exit;
         }

        _python_par_params = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_translations != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'translations'" );
             goto error_exit;
         }

        _python_par_translations = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_model == NULL )
    {
        _python_par_model = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_model );
    }
    if ( _python_par_query == NULL )
    {
        _python_par_query = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_query );
    }
    if ( _python_par_params == NULL )
    {
        _python_par_params = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_params );
    }
    if ( _python_par_translations == NULL )
    {
        _python_par_translations = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_translations );
    }
    if ( _python_par_using == NULL )
    {
        _python_par_using = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_using );
    }


    return impl_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_raw_query, _python_par_model, _python_par_query, _python_par_params, _python_par_translations, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_raw_query );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_query );
    Py_XDECREF( _python_par_params );
    Py_XDECREF( _python_par_translations );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalVariable python_var_model_init_field_names;
    PyObjectLocalVariable python_var_annotation_fields;
    PyObjectLocalVariable python_var_db;
    PyObjectLocalVariable python_var_compiler;
    PyObjectLocalVariable python_var_need_resolv_columns;
    PyObjectLocalVariable python_var_query;
    PyObjectLocalVariable python_var_pos;
    PyObjectLocalVariable python_var_column;
    PyObjectLocalVariable python_var_skip;
    PyObjectLocalVariable python_var_field;
    PyObjectLocalVariable python_var_model_cls;
    PyObjectLocalVariable python_var_model_init_field_pos;
    PyObjectLocalVariable python_var_fields;
    PyObjectLocalVariable python_var_values;
    PyObjectLocalVariable python_var_model_init_kwargs;
    PyObjectLocalVariable python_var_attname;
    PyObjectLocalVariable python_var_instance;
    PyObjectLocalVariable python_var_model_init_args;
    PyObjectLocalVariable python_var_c;
};

static void _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_destructor( void *context_voidptr )
{
    _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_t *_python_context = (struct _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_t *)context_voidptr;

    delete _python_context;
}

static void function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_t *_python_context = (_context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_model_init_field_names.setVariableName( _python_str_plain_model_init_field_names );
        _python_context->python_var_annotation_fields.setVariableName( _python_str_plain_annotation_fields );
        _python_context->python_var_db.setVariableName( _python_str_plain_db );
        _python_context->python_var_compiler.setVariableName( _python_str_plain_compiler );
        _python_context->python_var_need_resolv_columns.setVariableName( _python_str_plain_need_resolv_columns );
        _python_context->python_var_query.setVariableName( _python_str_plain_query );
        _python_context->python_var_pos.setVariableName( _python_str_plain_pos );
        _python_context->python_var_column.setVariableName( _python_str_plain_column );
        _python_context->python_var_skip.setVariableName( _python_str_plain_skip );
        _python_context->python_var_field.setVariableName( _python_str_plain_field );
        _python_context->python_var_model_cls.setVariableName( _python_str_plain_model_cls );
        _python_context->python_var_model_init_field_pos.setVariableName( _python_str_plain_model_init_field_pos );
        _python_context->python_var_fields.setVariableName( _python_str_plain_fields );
        _python_context->python_var_values.setVariableName( _python_str_plain_values );
        _python_context->python_var_model_init_kwargs.setVariableName( _python_str_plain_model_init_kwargs );
        _python_context->python_var_attname.setVariableName( _python_str_plain_attname );
        _python_context->python_var_instance.setVariableName( _python_str_plain_instance );
        _python_context->python_var_model_init_args.setVariableName( _python_str_plain_model_init_args );
        _python_context->python_var_c.setVariableName( _python_str_plain_c );

        // Actual function code.
        _python_context->python_var_model_init_field_names.assign1( PyDict_New() );
        _python_context->python_var_annotation_fields.assign1( PyList_New( 0 ) );
        static PyFrameObject *frame_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query ) )
        {
            if ( frame_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
                Py_DECREF( frame_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query );
            }

            frame_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_05f758cd871449f9bbda25b1928c18a4, _module_django__db__models__query );
        }

        Py_INCREF( frame_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query );
        generator->m_frame = frame_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 1390 );
            _python_context->python_var_db.assign1( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_db ) );
            frame_guard.setLineNumber( 1391 );
            {
                PyObjectTempKeeper1 call5;
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper1 call7;
                PyObjectTempKeeper0 subscr1;
                PyObjectTempKeeper0 subscr3;
                _python_context->python_var_compiler.assign1( ( call5.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_context->python_var_db.asObject() ) ) ).asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_compiler ) ).asObject(), _python_str_plain_SQLCompiler ) ), call6.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ), call7.assign( ( subscr3.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_context->python_var_db.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), call7.asObject0(), _python_context->python_var_db.asObject() ) ) );
            }
            frame_guard.setLineNumber( 1394 );
            _python_context->python_var_need_resolv_columns.assign0( BOOL_FROM( HAS_ATTRIBUTE( _python_context->python_var_compiler.asObject(), _python_str_plain_resolve_columns ) ) );
            frame_guard.setLineNumber( 1396 );
            _python_context->python_var_query.assign1( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_query ) ).asObject() ) );
            {
                frame_guard.setLineNumber( 1400 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_columns ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1400 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 1400 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_context->python_var_pos.assign0( _python_tmp_element_1.asObject() );
                            _python_context->python_var_column.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 1401 );
                    {
                        PyObjectTempKeeper0 cmp15;
                        if ( ( cmp15.assign( _python_context->python_var_column.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model_fields ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 1402 );
                        {
                            PyObjectTempKeeper1 subscr9;
                            {
                                PyObject *tmp_identifier = _python_context->python_var_pos.asObject();
                                PyObject *tmp_subscribed = _python_context->python_var_model_init_field_names.asObject();
                                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr9.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model_fields ) ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_context->python_var_column.asObject() ) ) ).asObject(), _python_str_plain_attname ) ).asObject() );
                        }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 1404 );
                        {
                            PyObjectTempKeeper1 call13;
                            PyObjectTempKeeper0 make_tuple11;
                            DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_annotation_fields.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( ( make_tuple11.assign( _python_context->python_var_column.asObject() ), MAKE_TUPLE2( make_tuple11.asObject0(), _python_context->python_var_pos.asObject() ) ) ).asObject() ) ) );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 1407 );
            _python_context->python_var_skip.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
            {
                frame_guard.setLineNumber( 1408 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1408 );
                        PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_2 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                        _python_context->python_var_field.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 1409 );
                    {
                        PyObjectTempKeeper1 cmp19;
                        if ( ( cmp19.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_attname ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp19.asObject0(), _python_context->python_var_model_init_field_names.asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 1410 );
                        {
                            PyObjectTempKeeper1 call17;
                            DECREASE_REFCOUNT( ( call17.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_skip.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_attname ) ).asObject() ) ) );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 1411 );
            if ( CHECK_IF_TRUE( _python_context->python_var_skip.asObject() ) )
            {
                frame_guard.setLineNumber( 1412 );
                {
                    PyObjectTempKeeper1 cmp21;
                    if ( ( cmp21.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_attname ) ), SEQUENCE_CONTAINS_BOOL( cmp21.asObject0(), _python_context->python_var_skip.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1413 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__query_InvalidQuery.asObject0(), _python_str_digest_93336fd4cea1ea5fbd1088d9ca5e96a1 ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) ).asObject() );
                    }
                }
                }
                frame_guard.setLineNumber( 1414 );
                {
                    PyObjectTempKeeper0 call23;
                    PyObjectTempKeeper1 call24;
                    _python_context->python_var_model_cls.assign1( ( call23.assign( _mvar_django__db__models__query_deferred_class_factory.asObject0() ), call24.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), call24.asObject0(), _python_context->python_var_skip.asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1416 );
                _python_context->python_var_model_cls.assign1( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) );
                _python_context->python_var_model_init_field_pos.assign1( PyList_New( 0 ) );
                {
                    frame_guard.setLineNumber( 1421 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 1421 );
                            PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_3 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                            _python_context->python_var_field.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 1422 );
                        {
                            PyObjectTempKeeper1 call28;
                            PyObjectTempKeeper0 subscr26;
                            DECREASE_REFCOUNT( ( call28.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_model_init_field_pos.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call28.asObject0(), PyObjectTemporary( ( subscr26.assign( _python_context->python_var_model_init_field_names.asObject() ), LOOKUP_SUBSCRIPT( subscr26.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_field.asObject(), _python_str_plain_attname ) ).asObject() ) ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }
            frame_guard.setLineNumber( 1423 );
            if ( CHECK_IF_TRUE( _python_context->python_var_need_resolv_columns.asObject() ) )
            {
                frame_guard.setLineNumber( 1424 );
                _python_context->python_var_fields.assign1( impl_listcontr_1_of_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_columns ) ).asObject() ), _python_context->python_var_c, _python_context->python_var_self ) );
            }
            {
                frame_guard.setLineNumber( 1426 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_context->python_var_query.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1426 );
                        PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_4 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                        _python_context->python_var_values.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 1427 );
                    if ( CHECK_IF_TRUE( _python_context->python_var_need_resolv_columns.asObject() ) )
                    {
                        frame_guard.setLineNumber( 1428 );
                        {
                            PyObjectTempKeeper1 call30;
                            PyObjectTempKeeper0 call31;
                            _python_context->python_var_values.assign1( ( call30.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_compiler.asObject(), _python_str_plain_resolve_columns ) ), call31.assign( _python_context->python_var_values.asObject() ), CALL_FUNCTION_WITH_ARGS( call30.asObject0(), call31.asObject0(), _python_context->python_var_fields.asObject() ) ) );
                        }
                    }
                    frame_guard.setLineNumber( 1430 );
                    if ( CHECK_IF_TRUE( _python_context->python_var_skip.asObject() ) )
                    {
                        _python_context->python_var_model_init_kwargs.assign1( PyDict_New() );
                        {
                            frame_guard.setLineNumber( 1432 );
                            PyObject *_tmp_python_tmp_for_iterator;
                            {
                                PyObjectTempKeeper1 call33;
                                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call33.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call33.asObject0(), _python_context->python_var_model_init_field_names.asObject() ) ) ).asObject() );
                            }
                            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1432 );
                                    PyObject *_tmp_unpack_5 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_5 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_5 );
                                    {
                                        frame_guard.setLineNumber( 1432 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_context->python_var_attname.assign0( _python_tmp_element_1.asObject() );
                                        _python_context->python_var_pos.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 1433 );
                                {
                                    PyObjectTempKeeper0 subscr35;
                                    {
                                        PyObjectTemporary tmp_identifier( ( subscr35.assign( _python_context->python_var_values.asObject() ), LOOKUP_SUBSCRIPT( subscr35.asObject0(), _python_context->python_var_pos.asObject() ) ) );
                                        PyObject *tmp_subscribed = _python_context->python_var_model_init_kwargs.asObject();
                                        SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_context->python_var_attname.asObject() );
                                }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                        frame_guard.setLineNumber( 1434 );
                        {
                            PyObjectTempKeeper0 call_tmp37;
                            _python_context->python_var_instance.assign1( ( call_tmp37.assign( _python_context->python_var_model_cls.asObject() ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp37.asObject(), _python_context->python_var_model_init_kwargs.asObject1() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 1436 );
                        _python_context->python_var_model_init_args.assign1( impl_listcontr_2_of_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( MAKE_ITERATOR( _python_context->python_var_model_init_field_pos.asObject() ), _python_context->python_var_pos, _python_context->python_var_values ) );
                        frame_guard.setLineNumber( 1437 );
                        {
                            PyObjectTempKeeper0 call_tmp39;
                            _python_context->python_var_instance.assign1( ( call_tmp39.assign( _python_context->python_var_model_cls.asObject() ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp39.asObject(), _python_context->python_var_model_init_args.asObject1() ) ) );
                        }
                    }
                    frame_guard.setLineNumber( 1438 );
                    if ( CHECK_IF_TRUE( _python_context->python_var_annotation_fields.asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 1439 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_context->python_var_annotation_fields.asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1439 );
                                    PyObject *_tmp_unpack_6 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_6 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_6 );
                                    {
                                        frame_guard.setLineNumber( 1439 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_context->python_var_column.assign0( _python_tmp_element_1.asObject() );
                                        _python_context->python_var_pos.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 1440 );
                                {
                                    PyObjectTempKeeper0 setattr43;
                                    PyObjectTempKeeper0 setattr44;
                                    PyObjectTempKeeper0 subscr41;
                                    ( ( setattr43.assign( _python_context->python_var_instance.asObject() ), setattr44.assign( _python_context->python_var_column.asObject() ), BUILTIN_SETATTR( setattr43.asObject0(), setattr44.asObject0(), PyObjectTemporary( ( subscr41.assign( _python_context->python_var_values.asObject() ), LOOKUP_SUBSCRIPT( subscr41.asObject0(), _python_context->python_var_pos.asObject() ) ) ).asObject() ) ), Py_None );
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                    frame_guard.setLineNumber( 1442 );
                    {
                            PyObject *tmp_identifier = _python_context->python_var_db.asObject();
                            SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db );
                    }
                    frame_guard.setLineNumber( 1443 );
                    SET_ATTRIBUTE( Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_adding );
                    frame_guard.setLineNumber( 1445 );
                    YIELD_VALUE( generator, _python_context->python_var_instance.asObject1() );

                   CONSIDER_THREADING();
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_t *_python_context = new _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_context,
            _python_str_plain___iter__,
            _codeobj_05f758cd871449f9bbda25b1928c18a4,
            _python_context,
            _context_generator_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function __iter__" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__iter__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_c,PyObjectLocalParameterVariableNoDel &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1424 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1424 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_c.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_model_fields ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_c.asObject(), Py_None ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_pos,PyObjectLocalVariable &python_closure_values )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1436 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1436 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_pos.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 subscr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( subscr1.assign( python_closure_values.asObject() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), python_closure_pos.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_715e208055dd77c8c2f63e8627b51b57, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1448 );
        {
            PyObjectTempKeeper1 op1;
            return BINARY_OPERATION_REMAINDER( _python_str_digest_ff08a6b74cc9bfd091252c5e72274427, PyObjectTemporary( ( op1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_raw_query ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( TO_TUPLE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_params ) ).asObject() ) ).asObject() ) ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__repr__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_k )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_k( _python_str_plain_k, _python_par_k );

    // Actual function code.
    static PyFrameObject *frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_ab60281153ecef7e124bde4d14bf9875, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1451 );
        {
            PyObjectTempKeeper1 subscr1;
            return ( subscr1.assign( TO_LIST( _python_var_self.asObject() ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_k.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_k.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_k = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_k == key )
            {
                if (unlikely( _python_par_k ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'k'" );
                    goto error_exit;
                }

                _python_par_k = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_k, key ) )
            {
                if (unlikely( _python_par_k ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'k'" );
                    goto error_exit;
                }

                _python_par_k = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getitem__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__getitem__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_k != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'k'" );
             goto error_exit;
         }

        _python_par_k = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_k );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_k );

    return NULL;
}

static PyObject *dparse_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d30d23117d682b46e30a9b28f4f781a0, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1456 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 keeper_0;
            return ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ) ) ? keeper_0.asObject() : ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_router.asObject0(), _python_str_plain_db_for_read ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "db() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "db() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "db() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "db() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "db() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "db() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "db() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "db() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "db() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "db() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_alias )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );

    // Actual function code.
    static PyFrameObject *frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_d455ea7ec18e3c97b0b6373c6827fa42, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1462 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call14;
            PyObjectTempKeeper1 call15;
            PyObjectTempKeeper1 make_dict10;
            PyObjectTempKeeper1 make_dict4;
            PyObjectTempKeeper1 make_dict6;
            PyObjectTempKeeper1 make_dict8;
            return ( call14.assign( _mvar_django__db__models__query_RawQuerySet.asObject0() ), call15.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_raw_query ) ).asObject() ) ), CALL_FUNCTION( call14.asObject0(), call15.asObject0(), PyObjectTemporary( ( make_dict4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), make_dict6.assign( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_clone ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_alias.asObject(), _python_str_plain_using ) ).asObject() ) ) ), make_dict8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_params ) ), make_dict10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_translations ) ), MAKE_DICT5( make_dict4.asObject0(), _python_str_plain_model, make_dict6.asObject0(), _python_str_plain_query, make_dict8.asObject0(), _python_str_plain_params, make_dict10.asObject0(), _python_str_plain_translations, _python_var_alias.asObject(), _python_str_plain_using ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_alias.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_alias = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "using() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "using() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "using() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "using() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "using() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "using() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "using() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "using() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "using() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "using() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "using() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "using() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "using() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "using() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "using() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self, _python_par_alias );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_alias );

    return NULL;
}

static PyObject *dparse_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_query_name( _python_str_plain_query_name );
    PyObjectLocalVariable _python_var_model_name( _python_str_plain_model_name );
    PyObjectLocalVariable _python_var_index( _python_str_plain_index );

    // Actual function code.
    static PyFrameObject *frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_8eb69313cb78f00a253b071d0bf277e7, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1473 );
        if ( (!( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__columns ) )) )
        {
            frame_guard.setLineNumber( 1474 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query ) ).asObject(), _python_str_plain_get_columns ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__columns );
            }
            {
                frame_guard.setLineNumber( 1477 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_translations ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1477 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 1477 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_query_name.assign0( _python_tmp_element_1.asObject() );
                            _python_var_model_name.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 1478 );
                    try
                    {
                        frame_guard.setLineNumber( 1479 );
                        {
                            PyObjectTempKeeper1 call1;
                            _python_var_index.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__columns ) ).asObject(), _python_str_plain_index ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_query_name.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1480 );
                        {
                                PyObject *tmp_identifier = _python_var_model_name.asObject();
                                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__columns ) );
                                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_index.asObject() );
                        }
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( PyExc_ValueError ) )
                        {

                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        frame_guard.setLineNumber( 1485 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__columns );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_model_name.updateLocalsDict( _python_var_query_name.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "columns() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "columns() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "columns() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "columns() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "columns() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "columns() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "columns() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "columns() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "columns() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "columns() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "columns() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_converter( _python_str_plain_converter );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_column( _python_str_plain_column );

    // Actual function code.
    static PyFrameObject *frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query ) )
    {
        if ( frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query );
        }

        frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query = MAKE_FRAME( _codeobj_f6e53d4e9ee5582b536881c5b33040db, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1492 );
        if ( (!( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__model_fields ) )) )
        {
            frame_guard.setLineNumber( 1493 );
            {
                PyObjectTempKeeper0 subscr1;
                _python_var_converter.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr1.assign( _mvar_django__db__models__query_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject(), _python_str_plain_introspection ) ).asObject(), _python_str_plain_table_name_converter ) );
            }
            frame_guard.setLineNumber( 1494 );
            SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain__model_fields );
            {
                frame_guard.setLineNumber( 1495 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1495 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_field.assign0( _python_tmp_iter_value.asObject() );
                    }
                    {
                        frame_guard.setLineNumber( 1496 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_get_attname_column ) ).asObject() ) ).asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_name.assign0( _python_tmp_element_1.asObject() );
                        _python_var_column.assign0( _python_tmp_element_2.asObject() );
                    }
                    frame_guard.setLineNumber( 1497 );
                    {
                        PyObjectTempKeeper0 call3;
                        {
                            PyObject *tmp_identifier = _python_var_field.asObject();
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__model_fields ) );
                            SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), PyObjectTemporary( ( call3.assign( _python_var_converter.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_column.asObject() ) ) ).asObject() );
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        frame_guard.setLineNumber( 1498 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__model_fields );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_column.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_converter.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query );
           frame_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "model_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "model_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "model_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "model_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "model_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "model_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "model_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "model_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "model_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "model_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "model_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "model_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "model_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "model_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "model_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "model_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "model_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_insert_query_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_model, PyObject *_python_par_objs, PyObject *_python_par_fields, PyObject *_python_par_return_id, PyObject *_python_par_raw, PyObject *_python_par_using )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_return_id( _python_str_plain_return_id, _python_par_return_id );
    PyObjectLocalParameterVariableNoDel _python_var_raw( _python_str_plain_raw, _python_par_raw );
    PyObjectLocalParameterVariableNoDel _python_var_using( _python_str_plain_using, _python_par_using );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );

    // Actual function code.
    static PyFrameObject *frame_function_11_insert_query_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_11_insert_query_of_module_django__db__models__query ) )
    {
        if ( frame_function_11_insert_query_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_insert_query_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_11_insert_query_of_module_django__db__models__query );
        }

        frame_function_11_insert_query_of_module_django__db__models__query = MAKE_FRAME( _codeobj_5094376dcb71eac4489b399c3d7d1e6f, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_11_insert_query_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_11_insert_query_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1507 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_query.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_InsertQuery ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_model.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1508 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper0 make_tuple3;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_insert_values ) ), call6.assign( ( make_tuple3.assign( _python_var_fields.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_objs.asObject() ) ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_raw.asObject(), _python_str_plain_raw ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1509 );
        {
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper1 call8;
            return ( call11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_query.asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION( call8.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_using.asObject(), _python_str_plain_using ) ).asObject() ) ) ).asObject(), _python_str_plain_execute_sql ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_return_id.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_using.updateLocalsDict( _python_var_raw.updateLocalsDict( _python_var_return_id.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_objs.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_query.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11_insert_query_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_11_insert_query_of_module_django__db__models__query );
           frame_function_11_insert_query_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_insert_query_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_objs = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_return_id = NULL;
    PyObject *_python_par_raw = NULL;
    PyObject *_python_par_using = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "insert_query() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_objs == key )
            {
                if (unlikely( _python_par_objs ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'objs'" );
                    goto error_exit;
                }

                _python_par_objs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_return_id == key )
            {
                if (unlikely( _python_par_return_id ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'return_id'" );
                    goto error_exit;
                }

                _python_par_return_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_raw == key )
            {
                if (unlikely( _python_par_raw ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'raw'" );
                    goto error_exit;
                }

                _python_par_raw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_using == key )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_objs, key ) )
            {
                if (unlikely( _python_par_objs ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'objs'" );
                    goto error_exit;
                }

                _python_par_objs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_return_id, key ) )
            {
                if (unlikely( _python_par_return_id ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'return_id'" );
                    goto error_exit;
                }

                _python_par_return_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_raw, key ) )
            {
                if (unlikely( _python_par_raw ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'raw'" );
                    goto error_exit;
                }

                _python_par_raw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_using, key ) )
            {
                if (unlikely( _python_par_using ))
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'using'" );
                    goto error_exit;
                }

                _python_par_using = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "insert_query() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "insert_query() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "insert_query() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "insert_query() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "insert_query() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "insert_query() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "insert_query() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "insert_query() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "insert_query() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "insert_query() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "insert_query() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "insert_query() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_objs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'objs'" );
             goto error_exit;
         }

        _python_par_objs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_return_id != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'return_id'" );
             goto error_exit;
         }

        _python_par_return_id = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_raw != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'raw'" );
             goto error_exit;
         }

        _python_par_raw = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_using != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "insert_query() got multiple values for keyword argument 'using'" );
             goto error_exit;
         }

        _python_par_using = INCREASE_REFCOUNT( args[ 5 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_return_id == NULL )
    {
        _python_par_return_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_return_id );
    }
    if ( _python_par_raw == NULL )
    {
        _python_par_raw = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_raw );
    }
    if ( _python_par_using == NULL )
    {
        _python_par_using = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_using );
    }


    return impl_function_11_insert_query_of_module_django__db__models__query( self, _python_par_model, _python_par_objs, _python_par_fields, _python_par_return_id, _python_par_raw, _python_par_using );

error_exit:;

    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_objs );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_return_id );
    Py_XDECREF( _python_par_raw );
    Py_XDECREF( _python_par_using );

    return NULL;
}

static PyObject *dparse_function_11_insert_query_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_11_insert_query_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_insert_query_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_prefetch_related_objects_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_result_cache, PyObject *_python_par_related_lookups )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_result_cache( _python_str_plain_result_cache, _python_par_result_cache );
    PyObjectLocalParameterVariableNoDel _python_var_related_lookups( _python_str_plain_related_lookups, _python_par_related_lookups );
    PyObjectLocalVariable _python_var_model( _python_str_plain_model );
    PyObjectLocalVariable _python_var_done_lookups( _python_str_plain_done_lookups );
    PyObjectLocalVariable _python_var_done_queries( _python_str_plain_done_queries );
    PyObjectLocalVariable _python_var_auto_lookups( _python_str_plain_auto_lookups );
    PyObjectLocalVariable _python_var_followed_descriptors( _python_str_plain_followed_descriptors );
    PyObjectLocalVariable _python_var_all_lookups( _python_str_plain_all_lookups );
    PyObjectLocalVariable _python_var_lookup( _python_str_plain_lookup );
    PyObjectLocalVariable _python_var_obj_list( _python_str_plain_obj_list );
    PyObjectLocalVariable _python_var_attrs( _python_str_plain_attrs );
    PyObjectLocalVariable _python_var_level( _python_str_plain_level );
    PyObjectLocalVariable _python_var_attr( _python_str_plain_attr );
    PyObjectLocalVariable _python_var_current_lookup( _python_str_plain_current_lookup );
    PyObjectLocalVariable _python_var_good_objects( _python_str_plain_good_objects );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_first_obj( _python_str_plain_first_obj );
    PyObjectLocalVariable _python_var_prefetcher( _python_str_plain_prefetcher );
    PyObjectLocalVariable _python_var_descriptor( _python_str_plain_descriptor );
    PyObjectLocalVariable _python_var_attr_found( _python_str_plain_attr_found );
    PyObjectLocalVariable _python_var_is_fetched( _python_str_plain_is_fetched );
    PyObjectLocalVariable _python_var_additional_prl( _python_str_plain_additional_prl );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_new_prl( _python_str_plain_new_prl );
    PyObjectLocalVariable _python_var_new_obj_list( _python_str_plain_new_obj_list );
    PyObjectLocalVariable _python_var_new_obj( _python_str_plain_new_obj );

    // Actual function code.
    static PyFrameObject *frame_function_12_prefetch_related_objects_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_12_prefetch_related_objects_of_module_django__db__models__query ) )
    {
        if ( frame_function_12_prefetch_related_objects_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_prefetch_related_objects_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_12_prefetch_related_objects_of_module_django__db__models__query );
        }

        frame_function_12_prefetch_related_objects_of_module_django__db__models__query = MAKE_FRAME( _codeobj_6465188a549bf2b8d2661cb9a8d8fdbf, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_12_prefetch_related_objects_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_12_prefetch_related_objects_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1519 );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_result_cache.asObject() ) ).asObject(), _python_int_0 ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1522 );
        _python_var_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_result_cache.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain___class__ ) );
        frame_guard.setLineNumber( 1527 );
        _python_var_done_lookups.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
        _python_var_done_queries.assign1( PyDict_New() );
        _python_var_auto_lookups.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 1531 );
        _python_var_followed_descriptors.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
        frame_guard.setLineNumber( 1533 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            _python_var_all_lookups.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_itertools.asObject0(), _python_str_plain_chain ) ), call2.assign( _python_var_related_lookups.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_auto_lookups.asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 1534 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_all_lookups.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1534 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_lookup.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1535 );
                {
                    PyObjectTempKeeper0 cmp4;
                    if ( ( cmp4.assign( _python_var_lookup.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp4.asObject0(), _python_var_done_lookups.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1537 );
                    CONSIDER_THREADING(); continue;
                }
                }
                frame_guard.setLineNumber( 1538 );
                {
                    PyObjectTempKeeper1 call6;
                    DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_done_lookups.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_lookup.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1542 );
                _python_var_obj_list.assign0( _python_var_result_cache.asObject() );
                frame_guard.setLineNumber( 1544 );
                {
                    PyObjectTempKeeper1 call8;
                    _python_var_attrs.assign1( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_lookup.asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _mvar_django__db__models__query_LOOKUP_SEP.asObject0() ) ) );
                }
                {
                    frame_guard.setLineNumber( 1545 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_attrs.asObject() ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 1545 );
                            PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_2 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                            {
                                frame_guard.setLineNumber( 1545 );
                                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_var_level.assign0( _python_tmp_element_1.asObject() );
                                _python_var_attr.assign0( _python_tmp_element_2.asObject() );
                            }
                        }
                        frame_guard.setLineNumber( 1547 );
                        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_obj_list.asObject() ) ).asObject(), _python_int_0 ) )
                        {
                            frame_guard.setLineNumber( 1548 );
                            break;
                        }
                        frame_guard.setLineNumber( 1550 );
                        {
                            PyObjectTempKeeper1 call13;
                            PyObjectTempKeeper0 slice10;
                            _python_var_current_lookup.assign1( ( call13.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_LOOKUP_SEP.asObject0(), _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( ( slice10.assign( _python_var_attrs.asObject() ), LOOKUP_SLICE( slice10.asObject0(), _python_int_0, PyObjectTemporary( BINARY_OPERATION_ADD( _python_var_level.asObject(), _python_int_pos_1 ) ).asObject() ) ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1551 );
                        {
                            PyObjectTempKeeper0 cmp17;
                            if ( ( cmp17.assign( _python_var_current_lookup.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp17.asObject0(), _python_var_done_queries.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 1553 );
                            {
                                PyObjectTempKeeper0 subscr15;
                                _python_var_obj_list.assign1( ( subscr15.assign( _python_var_done_queries.asObject() ), LOOKUP_SUBSCRIPT( subscr15.asObject0(), _python_var_current_lookup.asObject() ) ) );
                            }
                            frame_guard.setLineNumber( 1554 );
                            CONSIDER_THREADING(); continue;
                        }
                        }
                        _python_var_good_objects.assign0( Py_True );
                        {
                            frame_guard.setLineNumber( 1558 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_obj_list.asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1558 );
                                    PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_3 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                                    _python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                                }
                                frame_guard.setLineNumber( 1562 );
                                if ( (!( HAS_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__prefetched_objects_cache ) )) )
                                {
                                    frame_guard.setLineNumber( 1563 );
                                    try
                                    {
                                        frame_guard.setLineNumber( 1564 );
                                        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_obj.asObject(), _python_str_plain__prefetched_objects_cache );
                                    }
                                    catch ( PythonException &_exception )
                                    {
                                        if ( !_exception.hasTraceback() )
                                        {
                                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                        }
                                        else
                                        {
                                            _exception.addTraceback( frame_guard.getFrame0() );
                                        }

                                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                                        _exception.toExceptionHandler();

                                        if ( _exception.matches( PyExc_AttributeError ) )
                                        {
                                            frame_guard.detachFrame();
                                            _python_var_good_objects.assign0( Py_False );
                                            frame_guard.setLineNumber( 1571 );
                                            break;
                                        }
                                        else
                                        {
                                            PyTracebackObject *tb = _exception.getTraceback();
                                            frame_guard.setLineNumber( tb->tb_lineno );
                                            _exception.setTraceback( tb->tb_next );
                                            tb->tb_next = NULL;

                                            throw;
                                        }
                                    }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                        frame_guard.setLineNumber( 1572 );
                        if ( (!( CHECK_IF_TRUE( _python_var_good_objects.asObject() ) )) )
                        {
                            frame_guard.setLineNumber( 1573 );
                            break;
                        }
                        frame_guard.setLineNumber( 1579 );
                        _python_var_first_obj.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_obj_list.asObject(), _python_int_0, 0 ) );
                        {
                            frame_guard.setLineNumber( 1580 );
                            PyObject *_tmp_python_tmp_source_iter;
                            {
                                PyObjectTempKeeper0 call19;
                                PyObjectTempKeeper0 call20;
                                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call19.assign( _mvar_django__db__models__query_get_prefetcher.asObject0() ), call20.assign( _python_var_first_obj.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), call20.asObject0(), _python_var_attr.asObject() ) ) ).asObject() );
                            }
                            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                            PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
                            _python_var_prefetcher.assign0( _python_tmp_element_1.asObject() );
                            _python_var_descriptor.assign0( _python_tmp_element_2.asObject() );
                            _python_var_attr_found.assign0( _python_tmp_element_3.asObject() );
                            _python_var_is_fetched.assign0( _python_tmp_element_4.asObject() );
                        }
                        frame_guard.setLineNumber( 1582 );
                        if ( (!( CHECK_IF_TRUE( _python_var_attr_found.asObject() ) )) )
                        {
                            frame_guard.setLineNumber( 1583 );
                            {
                                PyObjectTempKeeper0 make_tuple22;
                                PyObjectTempKeeper1 make_tuple23;
                                {
                                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AttributeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_20f14441c8edad5ea7d9425aaf95fb2f, PyObjectTemporary( ( make_tuple22.assign( _python_var_attr.asObject() ), make_tuple23.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_first_obj.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ), MAKE_TUPLE3( make_tuple22.asObject0(), make_tuple23.asObject0(), _python_var_lookup.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                            }
                        }
                        frame_guard.setLineNumber( 1587 );
                        {
                            PyObjectTempKeeper0 cmp25;
                            if ( ( ( cmp25.assign( _python_var_level.asObject() ), RICH_COMPARE_BOOL_EQ( cmp25.asObject0(), PyObjectTemporary( BINARY_OPERATION_SUB( PyObjectTemporary( BUILTIN_LEN( _python_var_attrs.asObject() ) ).asObject(), _python_int_pos_1 ) ).asObject() ) ) && ( _python_var_prefetcher.asObject() == Py_None ) ) )
                        {
                            frame_guard.setLineNumber( 1591 );
                            {
                                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_c9ddfc837aee2e6736eb1a41cf3f533a, _python_var_lookup.asObject() ) ).asObject() ) ).asObject() ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                        }
                        }
                        frame_guard.setLineNumber( 1595 );
                        if ( ( ( _python_var_prefetcher.asObject() != Py_None ) && (!( CHECK_IF_TRUE( _python_var_is_fetched.asObject() ) )) ) )
                        {
                            {
                                frame_guard.setLineNumber( 1596 );
                                PyObject *_tmp_python_tmp_source_iter;
                                {
                                    PyObjectTempKeeper0 call27;
                                    PyObjectTempKeeper0 call28;
                                    PyObjectTempKeeper0 call29;
                                    _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call27.assign( _mvar_django__db__models__query_prefetch_one_level.asObject0() ), call28.assign( _python_var_obj_list.asObject() ), call29.assign( _python_var_prefetcher.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), call28.asObject0(), call29.asObject0(), _python_var_attr.asObject() ) ) ).asObject() );
                                }
                                PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_var_obj_list.assign0( _python_tmp_element_1.asObject() );
                                _python_var_additional_prl.assign0( _python_tmp_element_2.asObject() );
                            }
                            frame_guard.setLineNumber( 1601 );
                            {
                                PyObjectTempKeeper0 cmp37;
                                PyObjectTempKeeper0 cmp39;
                                if ( (!( ( ( cmp37.assign( _python_var_lookup.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp37.asObject0(), _python_var_auto_lookups.asObject() ) ) && ( cmp39.assign( _python_var_descriptor.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp39.asObject0(), _python_var_followed_descriptors.asObject() ) ) ) )) )
                            {
                                {
                                    frame_guard.setLineNumber( 1603 );
                                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_additional_prl.asObject() ) );
                                    while( true )
                                    {
                                        {
                                            frame_guard.setLineNumber( 1603 );
                                            PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                            if ( _tmp_unpack_4 == NULL )
                                            {
                                                break;
                                            }
                                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                                            _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                                        }
                                        frame_guard.setLineNumber( 1604 );
                                        {
                                            PyObjectTempKeeper1 call33;
                                            PyObjectTempKeeper0 make_list31;
                                            _python_var_new_prl.assign1( ( call33.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_LOOKUP_SEP.asObject0(), _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call33.asObject0(), PyObjectTemporary( ( make_list31.assign( _python_var_current_lookup.asObject() ), MAKE_LIST2( make_list31.asObject(), _python_var_f.asObject1() ) ) ).asObject() ) ) );
                                        }
                                        frame_guard.setLineNumber( 1605 );
                                        {
                                            PyObjectTempKeeper1 call35;
                                            DECREASE_REFCOUNT( ( call35.assign( LOOKUP_ATTRIBUTE( _python_var_auto_lookups.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), _python_var_new_prl.asObject() ) ) );
                                        }

                                       CONSIDER_THREADING();
                                    }
                                }
                                frame_guard.setLineNumber( 1606 );
                                {
                                        PyObject *tmp_identifier = _python_var_obj_list.asObject();
                                        PyObject *tmp_subscribed = _python_var_done_queries.asObject();
                                        SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, _python_var_current_lookup.asObject() );
                                }
                            }
                            }
                            frame_guard.setLineNumber( 1607 );
                            {
                                PyObjectTempKeeper1 call41;
                                DECREASE_REFCOUNT( ( call41.assign( LOOKUP_ATTRIBUTE( _python_var_followed_descriptors.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), _python_var_descriptor.asObject() ) ) );
                            }
                        }
                        else
                        {
                            _python_var_new_obj_list.assign1( PyList_New( 0 ) );
                            {
                                frame_guard.setLineNumber( 1617 );
                                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_obj_list.asObject() ) );
                                while( true )
                                {
                                    {
                                        frame_guard.setLineNumber( 1617 );
                                        PyObject *_tmp_unpack_5 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                        if ( _tmp_unpack_5 == NULL )
                                        {
                                            break;
                                        }
                                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_5 );
                                        _python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                                    }
                                    frame_guard.setLineNumber( 1618 );
                                    try
                                    {
                                        frame_guard.setLineNumber( 1619 );
                                        {
                                            PyObjectTempKeeper0 getattr43;
                                            _python_var_new_obj.assign1( ( getattr43.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr43.asObject0(), _python_var_attr.asObject(), NULL ) ) );
                                        }
                                    }
                                    catch ( PythonException &_exception )
                                    {
                                        if ( !_exception.hasTraceback() )
                                        {
                                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                        }
                                        else
                                        {
                                            _exception.addTraceback( frame_guard.getFrame0() );
                                        }

                                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                                        _exception.toExceptionHandler();

                                        if ( _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_exceptions.asObject0(), _python_str_plain_ObjectDoesNotExist ) ).asObject() ) )
                                        {
                                            frame_guard.detachFrame();
                                            frame_guard.setLineNumber( 1621 );
                                            CONSIDER_THREADING(); continue;
                                        }
                                        else
                                        {
                                            PyTracebackObject *tb = _exception.getTraceback();
                                            frame_guard.setLineNumber( tb->tb_lineno );
                                            _exception.setTraceback( tb->tb_next );
                                            tb->tb_next = NULL;

                                            throw;
                                        }
                                    }
                                    frame_guard.setLineNumber( 1622 );
                                    if ( ( _python_var_new_obj.asObject() == Py_None ) )
                                    {
                                        frame_guard.setLineNumber( 1623 );
                                        CONSIDER_THREADING(); continue;
                                    }
                                    frame_guard.setLineNumber( 1624 );
                                    {
                                        PyObjectTempKeeper1 call46;
                                        DECREASE_REFCOUNT( ( call46.assign( LOOKUP_ATTRIBUTE( _python_var_new_obj_list.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call46.asObject0(), _python_var_new_obj.asObject() ) ) );
                                    }

                                   CONSIDER_THREADING();
                                }
                            }
                            frame_guard.setLineNumber( 1625 );
                            _python_var_obj_list.assign0( _python_var_new_obj_list.asObject() );
                        }

                       CONSIDER_THREADING();
                    }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related_lookups.updateLocalsDict( _python_var_result_cache.updateLocalsDict( _python_var_new_obj.updateLocalsDict( _python_var_new_obj_list.updateLocalsDict( _python_var_new_prl.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_additional_prl.updateLocalsDict( _python_var_is_fetched.updateLocalsDict( _python_var_attr_found.updateLocalsDict( _python_var_descriptor.updateLocalsDict( _python_var_prefetcher.updateLocalsDict( _python_var_first_obj.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_good_objects.updateLocalsDict( _python_var_current_lookup.updateLocalsDict( _python_var_attr.updateLocalsDict( _python_var_level.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_obj_list.updateLocalsDict( _python_var_lookup.updateLocalsDict( _python_var_all_lookups.updateLocalsDict( _python_var_followed_descriptors.updateLocalsDict( _python_var_auto_lookups.updateLocalsDict( _python_var_done_queries.updateLocalsDict( _python_var_done_lookups.updateLocalsDict( _python_var_model.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_12_prefetch_related_objects_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_12_prefetch_related_objects_of_module_django__db__models__query );
           frame_function_12_prefetch_related_objects_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_12_prefetch_related_objects_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_result_cache = NULL;
    PyObject *_python_par_related_lookups = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related_objects() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_result_cache == key )
            {
                if (unlikely( _python_par_result_cache ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related_objects() got multiple values for keyword argument 'result_cache'" );
                    goto error_exit;
                }

                _python_par_result_cache = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related_lookups == key )
            {
                if (unlikely( _python_par_related_lookups ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related_objects() got multiple values for keyword argument 'related_lookups'" );
                    goto error_exit;
                }

                _python_par_related_lookups = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_result_cache, key ) )
            {
                if (unlikely( _python_par_result_cache ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related_objects() got multiple values for keyword argument 'result_cache'" );
                    goto error_exit;
                }

                _python_par_result_cache = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related_lookups, key ) )
            {
                if (unlikely( _python_par_related_lookups ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related_objects() got multiple values for keyword argument 'related_lookups'" );
                    goto error_exit;
                }

                _python_par_related_lookups = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prefetch_related_objects() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_related_objects() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_result_cache != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prefetch_related_objects() got multiple values for keyword argument 'result_cache'" );
             goto error_exit;
         }

        _python_par_result_cache = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_related_lookups != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prefetch_related_objects() got multiple values for keyword argument 'related_lookups'" );
             goto error_exit;
         }

        _python_par_related_lookups = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_12_prefetch_related_objects_of_module_django__db__models__query( self, _python_par_result_cache, _python_par_related_lookups );

error_exit:;

    Py_XDECREF( _python_par_result_cache );
    Py_XDECREF( _python_par_related_lookups );

    return NULL;
}

static PyObject *dparse_function_12_prefetch_related_objects_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_12_prefetch_related_objects_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_prefetch_related_objects_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_get_prefetcher_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_instance, PyObject *_python_par_attr )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_attr( _python_str_plain_attr, _python_par_attr );
    PyObjectLocalVariable _python_var_prefetcher( _python_str_plain_prefetcher );
    PyObjectLocalVariable _python_var_attr_found( _python_str_plain_attr_found );
    PyObjectLocalVariable _python_var_is_fetched( _python_str_plain_is_fetched );
    PyObjectLocalVariable _python_var_rel_obj_descriptor( _python_str_plain_rel_obj_descriptor );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );

    // Actual function code.
    _python_var_prefetcher.assign0( Py_None );
    _python_var_attr_found.assign0( Py_False );
    _python_var_is_fetched.assign0( Py_False );
    static PyFrameObject *frame_function_13_get_prefetcher_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_13_get_prefetcher_of_module_django__db__models__query ) )
    {
        if ( frame_function_13_get_prefetcher_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_get_prefetcher_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_13_get_prefetcher_of_module_django__db__models__query );
        }

        frame_function_13_get_prefetcher_of_module_django__db__models__query = MAKE_FRAME( _codeobj_1c3627569c04ea38aedda56714fcda65, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_13_get_prefetcher_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_13_get_prefetcher_of_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1645 );
        {
            PyObjectTempKeeper1 getattr1;
            _python_var_rel_obj_descriptor.assign1( ( getattr1.assign( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain___class__ ) ), BUILTIN_GETATTR( getattr1.asObject0(), _python_var_attr.asObject(), Py_None ) ) );
        }
        frame_guard.setLineNumber( 1646 );
        if ( ( _python_var_rel_obj_descriptor.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1647 );
            try
            {
                frame_guard.setLineNumber( 1648 );
                {
                    PyObjectTempKeeper0 getattr4;
                    _python_var_rel_obj.assign1( ( getattr4.assign( _python_var_instance.asObject() ), BUILTIN_GETATTR( getattr4.asObject0(), _python_var_attr.asObject(), NULL ) ) );
                }
                _python_var_attr_found.assign0( Py_True );
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( PyExc_AttributeError ) )
                {

                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        else
        {
            _python_var_attr_found.assign0( Py_True );
            frame_guard.setLineNumber( 1654 );
            if ( CHECK_IF_TRUE( _python_var_rel_obj_descriptor.asObject() ) )
            {
                frame_guard.setLineNumber( 1657 );
                if ( HAS_ATTRIBUTE( _python_var_rel_obj_descriptor.asObject(), _python_str_plain_get_prefetch_queryset ) )
                {
                    frame_guard.setLineNumber( 1658 );
                    _python_var_prefetcher.assign0( _python_var_rel_obj_descriptor.asObject() );
                    frame_guard.setLineNumber( 1659 );
                    {
                        PyObjectTempKeeper1 call7;
                        if ( CHECK_IF_TRUE( PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_rel_obj_descriptor.asObject(), _python_str_plain_is_cached ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_instance.asObject() ) ) ).asObject() ) )
                    {
                        _python_var_is_fetched.assign0( Py_True );
                    }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1665 );
                    {
                        PyObjectTempKeeper0 getattr9;
                        _python_var_rel_obj.assign1( ( getattr9.assign( _python_var_instance.asObject() ), BUILTIN_GETATTR( getattr9.asObject0(), _python_var_attr.asObject(), NULL ) ) );
                    }
                    frame_guard.setLineNumber( 1666 );
                    if ( HAS_ATTRIBUTE( _python_var_rel_obj.asObject(), _python_str_plain_get_prefetch_queryset ) )
                    {
                        frame_guard.setLineNumber( 1667 );
                        _python_var_prefetcher.assign0( _python_var_rel_obj.asObject() );
                    }
                }
            }
        }
        frame_guard.setLineNumber( 1668 );
        {
            PyObjectTempKeeper0 make_tuple12;
            PyObjectTempKeeper0 make_tuple13;
            PyObjectTempKeeper0 make_tuple14;
            return ( make_tuple12.assign( _python_var_prefetcher.asObject() ), make_tuple13.assign( _python_var_rel_obj_descriptor.asObject() ), make_tuple14.assign( _python_var_attr_found.asObject() ), MAKE_TUPLE4( make_tuple12.asObject0(), make_tuple13.asObject0(), make_tuple14.asObject0(), _python_var_is_fetched.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attr.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( _python_var_rel_obj_descriptor.updateLocalsDict( _python_var_is_fetched.updateLocalsDict( _python_var_attr_found.updateLocalsDict( _python_var_prefetcher.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_13_get_prefetcher_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_13_get_prefetcher_of_module_django__db__models__query );
           frame_function_13_get_prefetcher_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_13_get_prefetcher_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_attr = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prefetcher() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetcher() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attr == key )
            {
                if (unlikely( _python_par_attr ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetcher() got multiple values for keyword argument 'attr'" );
                    goto error_exit;
                }

                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetcher() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attr, key ) )
            {
                if (unlikely( _python_par_attr ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetcher() got multiple values for keyword argument 'attr'" );
                    goto error_exit;
                }

                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prefetcher() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetcher() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prefetcher() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prefetcher() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetcher() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetcher() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetcher() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetcher() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetcher() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prefetcher() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetcher() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetcher() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetcher() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetcher() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attr != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetcher() got multiple values for keyword argument 'attr'" );
             goto error_exit;
         }

        _python_par_attr = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_13_get_prefetcher_of_module_django__db__models__query( self, _python_par_instance, _python_par_attr );

error_exit:;

    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_attr );

    return NULL;
}

static PyObject *dparse_function_13_get_prefetcher_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_13_get_prefetcher_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_get_prefetcher_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_prefetch_one_level_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject *_python_par_instances, PyObject *_python_par_prefetcher, PyObject *_python_par_attname )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_instances( _python_str_plain_instances, _python_par_instances );
    PyObjectLocalParameterVariableNoDel _python_var_prefetcher( _python_str_plain_prefetcher, _python_par_prefetcher );
    PyObjectLocalParameterVariableNoDel _python_var_attname( _python_str_plain_attname, _python_par_attname );
    PyObjectLocalVariable _python_var_rel_qs( _python_str_plain_rel_qs );
    PyObjectLocalVariable _python_var_rel_obj_attr( _python_str_plain_rel_obj_attr );
    PyObjectLocalVariable _python_var_instance_attr( _python_str_plain_instance_attr );
    PyObjectLocalVariable _python_var_single( _python_str_plain_single );
    PyObjectLocalVariable _python_var_cache_name( _python_str_plain_cache_name );
    PyObjectLocalVariable _python_var_additional_prl( _python_str_plain_additional_prl );
    PyObjectLocalVariable _python_var_all_related_objects( _python_str_plain_all_related_objects );
    PyObjectLocalVariable _python_var_rel_obj_cache( _python_str_plain_rel_obj_cache );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );
    PyObjectLocalVariable _python_var_rel_attr_val( _python_str_plain_rel_attr_val );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_instance_attr_val( _python_str_plain_instance_attr_val );
    PyObjectLocalVariable _python_var_vals( _python_str_plain_vals );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );

    // Actual function code.
    static PyFrameObject *frame_function_14_prefetch_one_level_of_module_django__db__models__query = NULL;

    if ( isFrameUnusable( frame_function_14_prefetch_one_level_of_module_django__db__models__query ) )
    {
        if ( frame_function_14_prefetch_one_level_of_module_django__db__models__query )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_prefetch_one_level_of_module_django__db__models__query" );
#endif
            Py_DECREF( frame_function_14_prefetch_one_level_of_module_django__db__models__query );
        }

        frame_function_14_prefetch_one_level_of_module_django__db__models__query = MAKE_FRAME( _codeobj_f012a01a7787197c898137386179d7c7, _module_django__db__models__query );
    }

    FrameGuard frame_guard( frame_function_14_prefetch_one_level_of_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_function_14_prefetch_one_level_of_module_django__db__models__query ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1694 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_prefetcher.asObject(), _python_str_plain_get_prefetch_queryset ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_instances.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
            PyObjectTemporary _python_tmp_element_5( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 4 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 5 );
            _python_var_rel_qs.assign0( _python_tmp_element_1.asObject() );
            _python_var_rel_obj_attr.assign0( _python_tmp_element_2.asObject() );
            _python_var_instance_attr.assign0( _python_tmp_element_3.asObject() );
            _python_var_single.assign0( _python_tmp_element_4.asObject() );
            _python_var_cache_name.assign0( _python_tmp_element_5.asObject() );
        }
        frame_guard.setLineNumber( 1700 );
        _python_var_additional_prl.assign1( BUILTIN_GETATTR( _python_var_rel_qs.asObject(), _python_str_plain__prefetch_related_lookups, PyObjectTemporary( PyList_New( 0 ) ).asObject() ) );
        frame_guard.setLineNumber( 1701 );
        if ( CHECK_IF_TRUE( _python_var_additional_prl.asObject() ) )
        {
            frame_guard.setLineNumber( 1705 );
            SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_rel_qs.asObject(), _python_str_plain__prefetch_related_lookups );
        }
        frame_guard.setLineNumber( 1707 );
        _python_var_all_related_objects.assign1( TO_LIST( _python_var_rel_qs.asObject() ) );
        _python_var_rel_obj_cache.assign1( PyDict_New() );
        {
            frame_guard.setLineNumber( 1710 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_all_related_objects.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1710 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_rel_obj.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1711 );
                {
                    PyObjectTempKeeper0 call3;
                    _python_var_rel_attr_val.assign1( ( call3.assign( _python_var_rel_obj_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_rel_obj.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1712 );
                {
                    PyObjectTempKeeper1 call5;
                    PyObjectTempKeeper1 call8;
                    DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_rel_obj_cache.asObject(), _python_str_plain_setdefault ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_rel_attr_val.asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() ) ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_rel_obj.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        {
            frame_guard.setLineNumber( 1714 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_instances.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1714 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    _python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1715 );
                {
                    PyObjectTempKeeper0 call10;
                    _python_var_instance_attr_val.assign1( ( call10.assign( _python_var_instance_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_obj.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1716 );
                {
                    PyObjectTempKeeper1 call12;
                    _python_var_vals.assign1( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_rel_obj_cache.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_instance_attr_val.asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 1717 );
                if ( CHECK_IF_TRUE( _python_var_single.asObject() ) )
                {
                    frame_guard.setLineNumber( 1719 );
                    {
                        PyObjectTempKeeper0 setattr15;
                        PyObjectTempKeeper0 setattr16;
                        ( ( setattr15.assign( _python_var_obj.asObject() ), setattr16.assign( _python_var_cache_name.asObject() ), BUILTIN_SETATTR( setattr15.asObject0(), setattr16.asObject0(), PyObjectTemporary( ( CHECK_IF_TRUE( _python_var_vals.asObject() ) ? LOOKUP_SUBSCRIPT_CONST( _python_var_vals.asObject(), _python_int_0, 0 ) : INCREASE_REFCOUNT( Py_None ) ) ).asObject() ) ), Py_None );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1723 );
                    {
                        PyObjectTempKeeper0 getattr18;
                        _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr18.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr18.asObject0(), _python_var_attname.asObject(), NULL ) ) ).asObject(), _python_str_plain_all ) ).asObject() ) );
                    }
                    frame_guard.setLineNumber( 1724 );
                    {
                            PyObject *tmp_identifier = _python_var_vals.asObject();
                            SET_ATTRIBUTE( tmp_identifier, _python_var_qs.asObject(), _python_str_plain__result_cache );
                    }
                    frame_guard.setLineNumber( 1727 );
                    SET_ATTRIBUTE( Py_True, _python_var_qs.asObject(), _python_str_plain__prefetch_done );
                    frame_guard.setLineNumber( 1728 );
                    {
                            PyObject *tmp_identifier = _python_var_qs.asObject();
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__prefetched_objects_cache ) );
                            SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_cache_name.asObject() );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1729 );
        {
            PyObjectTempKeeper0 make_tuple21;
            return ( make_tuple21.assign( _python_var_all_related_objects.asObject() ), MAKE_TUPLE2( make_tuple21.asObject0(), _python_var_additional_prl.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attname.updateLocalsDict( _python_var_prefetcher.updateLocalsDict( _python_var_instances.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_vals.updateLocalsDict( _python_var_instance_attr_val.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_rel_attr_val.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( _python_var_rel_obj_cache.updateLocalsDict( _python_var_all_related_objects.updateLocalsDict( _python_var_additional_prl.updateLocalsDict( _python_var_cache_name.updateLocalsDict( _python_var_single.updateLocalsDict( _python_var_instance_attr.updateLocalsDict( _python_var_rel_obj_attr.updateLocalsDict( _python_var_rel_qs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_14_prefetch_one_level_of_module_django__db__models__query )
        {
           Py_DECREF( frame_function_14_prefetch_one_level_of_module_django__db__models__query );
           frame_function_14_prefetch_one_level_of_module_django__db__models__query = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14_prefetch_one_level_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_instances = NULL;
    PyObject *_python_par_prefetcher = NULL;
    PyObject *_python_par_attname = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prefetch_one_level() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_instances == key )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prefetcher == key )
            {
                if (unlikely( _python_par_prefetcher ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'prefetcher'" );
                    goto error_exit;
                }

                _python_par_prefetcher = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attname == key )
            {
                if (unlikely( _python_par_attname ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'attname'" );
                    goto error_exit;
                }

                _python_par_attname = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instances, key ) )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prefetcher, key ) )
            {
                if (unlikely( _python_par_prefetcher ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'prefetcher'" );
                    goto error_exit;
                }

                _python_par_prefetcher = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attname, key ) )
            {
                if (unlikely( _python_par_attname ))
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'attname'" );
                    goto error_exit;
                }

                _python_par_attname = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prefetch_one_level() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prefetch_one_level() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_instances != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'instances'" );
             goto error_exit;
         }

        _python_par_instances = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_prefetcher != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'prefetcher'" );
             goto error_exit;
         }

        _python_par_prefetcher = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_attname != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prefetch_one_level() got multiple values for keyword argument 'attname'" );
             goto error_exit;
         }

        _python_par_attname = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_14_prefetch_one_level_of_module_django__db__models__query( self, _python_par_instances, _python_par_prefetcher, _python_par_attname );

error_exit:;

    Py_XDECREF( _python_par_instances );
    Py_XDECREF( _python_par_prefetcher );
    Py_XDECREF( _python_par_attname );

    return NULL;
}

static PyObject *dparse_function_14_prefetch_one_level_of_module_django__db__models__query( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_14_prefetch_one_level_of_module_django__db__models__query( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_prefetch_one_level_of_module_django__db__models__query( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_10___or___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___or__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_218a7a06e335c17204d24a930d6bd0ce,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_insert_query_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_insert_query_of_module_django__db__models__query,
        dparse_function_11_insert_query_of_module_django__db__models__query,
        _python_str_plain_insert_query,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5094376dcb71eac4489b399c3d7d1e6f,
        INCREASE_REFCOUNT( _python_tuple_false_false_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_b9490a488d90f29881d7fa7e9e7853d1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    return Nuitka_Function_New(
        fparse_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_11_iterator_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6f4745e3b89edef15017b35980fa329f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_1b457b292da73928deded39d6eacb0ab
    );
}



static PyObject *MAKE_FUNCTION_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_12_aggregate_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_aggregate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c12da48fbaff7242da6d8b3fb87a5cfb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_97a27bd6ea2dc025694921f864cf2ffc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_prefetch_related_objects_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_prefetch_related_objects_of_module_django__db__models__query,
        dparse_function_12_prefetch_related_objects_of_module_django__db__models__query,
        _python_str_plain_prefetch_related_objects,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6465188a549bf2b8d2661cb9a8d8fdbf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_a81c7330999b49b8e83d313ca34c7712
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_13_count_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_count,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_910db0ccadac490cb81141647c26b84a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_da7334c5f0d5eaa9c61cb982612e7dc7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_get_prefetcher_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_get_prefetcher_of_module_django__db__models__query,
        dparse_function_13_get_prefetcher_of_module_django__db__models__query,
        _python_str_plain_get_prefetcher,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1c3627569c04ea38aedda56714fcda65,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_50accc14aaa916c95312eb65a4b213ce
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_14_get_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a02499381b3121685678f9b823575380,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_093053913855bf0f6604deb88decb49f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_prefetch_one_level_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_prefetch_one_level_of_module_django__db__models__query,
        dparse_function_14_prefetch_one_level_of_module_django__db__models__query,
        _python_str_plain_prefetch_one_level,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f012a01a7787197c898137386179d7c7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_33da4aa7beba5b64501808883f765429
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_15_create_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_create,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_04c5b03690149c43785aab0d6810255c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_feea7d872194e65875e3c3cf1569d09d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_bulk_create,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_600a752f0128bb9dd8fbd121b1febdb1,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_c5c50fc10168b43692c804ca4e0b70d1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_17_get_or_create_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_get_or_create,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_367b64db8c3659eb9fe394b4cb0447d1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_b6368dc988f85cdc5875374cd6d8e175
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_18__earliest_or_latest_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__earliest_or_latest,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_62e99b11b401f3541ceecdb4672da512,
        INCREASE_REFCOUNT( _python_tuple_none_str_chr_45_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_b0caf8ab6ce338889a234e2a47411d69
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_19_earliest_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_earliest,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f973342ff6f214e24309510c8c0c725f,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_1___init___of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b6a867abe32a7091695145965edb8d40,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_1___init___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5539304d961951d1150e7ee086f443b9,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query,
        dparse_function_1___init___of_class_3_EmptyQuerySet_of_module_django__db__models__query,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_05667cefaf432ed2b2f242c553eaef7a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_1___init___of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_34dfecc4ad78ec846741fb8966e4cee1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query,
        dparse_function_1___instancecheck___of_class_2_InstanceCheckMeta_of_module_django__db__models__query,
        _python_str_plain___instancecheck__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d5f91744d370c21e7dc5b20b04d9f95f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query(  )
{
    return Nuitka_Function_New(
        fparse_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query,
        dparse_function_1_iterator_of_class_5_ValuesListQuerySet_of_module_django__db__models__query,
        _python_str_plain_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f0017ef1436c03dd85bde445053bcc1b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query,
        dparse_function_1_iterator_of_class_6_DateQuerySet_of_module_django__db__models__query,
        _python_str_plain_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2cedca3d6d02ce3754301bcfab0177ac,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query,
        dparse_function_1_iterator_of_class_7_DateTimeQuerySet_of_module_django__db__models__query,
        _python_str_plain_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8150bda4c3ba02a6ffe33f62cb91a64b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_20_latest_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_latest,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c6c5bce16635a6e2f7559dc7248a0623,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_21_first_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_first,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_abce9abbf2eb47c94108bed3b24bbe19,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_b1baa87954a00a2d2d2f93c64318c5a2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_22_last_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_last,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1ca84df7b44eb80295975c83e299bf0a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_529e9197a2d06027878cd58c86a6fdf9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_23_in_bulk_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_in_bulk,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9ad1bc619bf4bf52aa510a83ffea9eac,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_631a73b1619d5af82f96746169cfcb5c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_24_delete_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_delete,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_80241b686312c81e1d1c400a388ae696,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_2f688cf7eca08a0e22f70f5b7429ade5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_25__raw_delete_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__raw_delete,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7d2fb9f4becb0e7890d02defc16b15e2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_849c9268f53fcd8fbc26a3aec79902f5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_26_update_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_update,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_996f090f88a3d2feafa2888ecdc0602c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_ebf288a4095a8ba4a988c71a185ee39a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_27__update_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__update,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e4764d96a3d8bfc3b9fcbcf83a0fdde1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_7c48eebb23c04ee65759b2928d1fcc5b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_28_exists_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_exists,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b7d2b4d58129cab476f1f03b65a1fec3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_29__prefetch_related_objects_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__prefetch_related_objects,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_980dbfb119a6357b2d78865a2e3435ba,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_2___deepcopy___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_132f95dd521980fb03218a4d12d3b8c0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_1d7a02bb95a512d17c8acc676db7ff14
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    return Nuitka_Function_New(
        fparse_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_2___iter___of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_05f758cd871449f9bbda25b1928c18a4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query,
        dparse_function_2__clone_of_class_5_ValuesListQuerySet_of_module_django__db__models__query,
        _python_str_plain__clone,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bdf4241f4b8d5ec0b3f0f9446b52f0e0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query,
        dparse_function_2__setup_query_of_class_6_DateQuerySet_of_module_django__db__models__query,
        _python_str_plain__setup_query,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9df3ac41c7fd540a91ecd66394d51708,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_3f3b3785f235abc50f27f933873023bd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query,
        dparse_function_2__setup_query_of_class_7_DateTimeQuerySet_of_module_django__db__models__query,
        _python_str_plain__setup_query,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5a5192f592623579a5108d2c7677fb00,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_3f3b3785f235abc50f27f933873023bd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    return Nuitka_Function_New(
        fparse_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_2_iterator_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_65a38c645fb5234b2133137ade436672,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_30_values_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_values,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ddccd34948d27b343da51bd25e2af25c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_31_values_list_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_values_list,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bfcb6171f490c432e1ceff13905ba8ef,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_32_dates_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_dates,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8773d5aad005c82d2cc4d5e45ab8fed5,
        INCREASE_REFCOUNT( _python_tuple_str_plain_ASC_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_48f3950aa8319cc6d305dac3e9a91409
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_33_datetimes_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_datetimes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_36059d61d77e5b12ba2d018c03f067ef,
        INCREASE_REFCOUNT( _python_tuple_str_plain_ASC_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_81f264bb4787d2ad8e80e6f98255f890
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_34_none_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_none,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d3b3bbf5b82097ea23186402f4970cf0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_3546989c631ba62ef542454c413077b4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_35_all_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_all,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d0fa93e8c65d8c71844c8d07d720514a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_33fb00d992ed05be7caf52452e2a39a1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_36_filter_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0c37e3053be3584b836affa0b759eea1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_0aec55542d476e386617ccacfc2ecb47
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_37_exclude_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_exclude,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7f23b46c5ca5beff75a64af38ed12458,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_3c01600a0ce16c7ac4281d2cec552cdb
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_38__filter_or_exclude_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__filter_or_exclude,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c233ddb913fb525bbf509afa4df412bf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_39_complex_filter_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_complex_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_aa566767683bb74709dd2e8cfd1d53f2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_ec90f9282742ecd347252fa172c8bcd4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_3___getstate___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___getstate__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a5e3d2565e42d1fb5b85e3380f87ac2b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_0760f040fec5de7c51169da66e31fb98
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_3___repr___of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_715e208055dd77c8c2f63e8627b51b57,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query,
        dparse_function_3__clone_of_class_6_DateQuerySet_of_module_django__db__models__query,
        _python_str_plain__clone,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_407f246e0e9a981a28bb3db40aab1bcc,
        INCREASE_REFCOUNT( _python_tuple_none_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query,
        dparse_function_3__clone_of_class_7_DateTimeQuerySet_of_module_django__db__models__query,
        _python_str_plain__clone,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_82b6cecc51ede2d0a64a5378ce400975,
        INCREASE_REFCOUNT( _python_tuple_none_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_3_delete_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain_delete,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_64b8c3e094b4719b2065eac53c270fe8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_40_select_for_update_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_select_for_update,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_06a5e98fd66bf3ae6073ceb9576d045a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_4bc0bbc70535b354b5814380857b78dd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_41_select_related_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_select_related,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e92564a5e701970b8fc94ce9bc70cbb6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_b6ab1ad6a1a4d7d52a8f24ab04c722ba
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_42_prefetch_related_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_prefetch_related,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2e0c692b4f62210462376310a8d5f9f3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_495cac2edb5fc575c671137e36353424
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_43_annotate_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_annotate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9e745d1be877e69232a14e71f9231591,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_e065830a2083fc21f51e16c38fe6d5c6
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_44_order_by_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_order_by,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d287bf6cfcb95665800f25760de9ed1a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_222b4498f69317122cdb3ca44cc7bcd2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_45_distinct_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_distinct,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ab34e317676a61f158ef559e6e3701a8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_b4341da0b3cbe464ed0430bb1234ad40
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_46_extra_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_extra,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d9aa15c1b94ebf72268a3278f463cb3b,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_3be12bc6ded7037471b064c29965ced4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_47_reverse_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_reverse,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_89df96b2ff7c9736f9ae112e556393f2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_675d5a7f2a588876002bc05041aabb62
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_48_defer_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_defer,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1f76d05e0120cfe0bc875bda1972c844,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_991f06ff4f2cdd9b7dc35f596a5acac1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_49_only_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_only,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e350f3f80e1b544170e4d27c5e969e58,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_60bda2bad1d4e14719a15498c6177773
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_4___getitem___of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ab60281153ecef7e124bde4d14bf9875,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_4___repr___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6db3bf9afb3d75da42aedd40d74263f3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_4__setup_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain__setup_query,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9060003478c5baf387eebdfa2473a7d3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_e25a301c0df09fd6f852a9158f5092b2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_50_using_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_using,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_239e92b36b71909de9b27980a57d9d75,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_f23ec2c97d88c0c1af0be38245340245
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_51_ordered_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_ordered,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8be295557039a07db7d2cc91148d26d5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_5571af6acf6506e56fca3debd1b542f9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_52_db_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain_db,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_04ead0509e03d21d65e5f9b887c21f9e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_913ee004ccd11de7a7f12773deed3356
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_53__batched_insert_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__batched_insert,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b8a978ce7a81a2e928404e705bf04515,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_c1b2f301619866b75f61b3ecd0247790
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_54__clone_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__clone,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e462fe299871d384b2f74e6b3d7750c9,
        INCREASE_REFCOUNT( _python_tuple_none_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_55__fetch_all_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__fetch_all,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_357250f4faa3279aea18dfb4ee74180f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_56__next_is_sticky_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__next_is_sticky,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_832bb5bede227eb290b2a405b68ee15f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_e8bab70283a67f94c493319a6234876a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_57__merge_sanity_check_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__merge_sanity_check,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_34e258b2d3950ded614de2ae0731edb6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_61ab90bb924f075b5025cbd8a90dcb0e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_58__merge_known_related_objects_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__merge_known_related_objects,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a1c87721cbe13392e655b16baf217c37,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_7c01ebbf4be00a23d23209837c6baf9b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_59__setup_aggregate_query_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__setup_aggregate_query,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_62d417537d065366baa430625b364d8b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_017e6291af31141f0e87c602df9da109
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_5___len___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d8b467bab231d85483ef124e58c4bd6b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_5__clone_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain__clone,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5d0751eac640794cedf6c19d22f5e199,
        INCREASE_REFCOUNT( _python_tuple_none_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_0efaa3337b7adbb80e4c946f6a83aa96
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_5_db_of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain_db,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d30d23117d682b46e30a9b28f4f781a0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_913ee004ccd11de7a7f12773deed3356
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_60__prepare_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__prepare,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7ca347c70ad5e30a9f888b26c95321d7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_61__as_sql_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain__as_sql,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_affba6d92edbdabb1f293cbaa4ccace5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_c93e107a85c309c5d3b74cd15f034365
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_6___iter___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ebc3e0d754b50b56ad95557ce5e6e073,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_b76be218daa93ab285d962186029cacf
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_6__merge_sanity_check_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain__merge_sanity_check,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_34ec10c288d0fef149b93fba0c1965e7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_6_using_of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain_using,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d455ea7ec18e3c97b0b6373c6827fa42,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_1db5b30a81a1f52b0d05aa95364f9306
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_7___nonzero___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___nonzero__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bcb59548eee19c475e834b01e579fb15,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_7__setup_aggregate_query_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain__setup_aggregate_query,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ae5a94150f2899048b6f85ae173cc546,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_017e6291af31141f0e87c602df9da109
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_7_columns_of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain_columns,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8eb69313cb78f00a253b071d0bf277e7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_c7582bd19cf41b71315c023046828caf
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_8___getitem___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_210215d858f0c531cc7cb6bc276b4609,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_bea5a3711f019eb36ce9f2d9d0379f14
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_8__as_sql_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain__as_sql,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_df384d2c207a73c9a9646dbb80de6e38,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_8311b1a93ee82f91533cbfd25d167b4d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_get_klass_info_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_get_klass_info_of_module_django__db__models__query,
        dparse_function_8_get_klass_info_of_module_django__db__models__query,
        _python_str_plain_get_klass_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8a2b7516bcfa9de18dd45cfa14c5585f,
        INCREASE_REFCOUNT( _python_tuple_int_0_int_0_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_9d6bab55711dde13662d4b99869a6e3e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query,
        dparse_function_8_model_fields_of_class_10_RawQuerySet_of_module_django__db__models__query,
        _python_str_plain_model_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f6e53d4e9ee5582b536881c5b33040db,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_0414de1132688ee4d35aa2fdafe07bef
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_function_9___and___of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_plain___and__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0500dfcea754476e33c4a87ef39926a4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        dparse_function_9__prepare_of_class_4_ValuesQuerySet_of_module_django__db__models__query,
        _python_str_plain__prepare,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ccec8596cde5eb6665a7220109a43cb9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_261ca2c78fe4b07ddbd69376d7dc475a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_get_cached_row_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_get_cached_row_of_module_django__db__models__query,
        dparse_function_9_get_cached_row_of_module_django__db__models__query,
        _python_str_plain_get_cached_row,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_86a7135e0e849791d58f3722f29157a6,
        INCREASE_REFCOUNT( _python_tuple_int_0_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        _python_str_digest_58b57c2199902c85adb5b7439b8ebcf2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query,
        dparse_lambda_1_lambda_of_function_16_bulk_create_of_class_1_QuerySet_of_module_django__db__models__query,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b099778ecf5fd1140a6ba606572cdcb8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__query,
        Py_None
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.db.models.query",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__db__models__query )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__db__models__query );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__db__models__query" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__db__models__query = Py_InitModule4(
        "django.db.models.query",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__db__models__query = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__db__models__query = (PyDictObject *)((PyModuleObject *)_module_django__db__models__query)->md_dict;

    assertObject( _module_django__db__models__query );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_7724c9571b8badb7e606430d6fe9b7eb, _module_django__db__models__query );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__db__models__query );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__db__models__query != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain___doc__, _python_str_digest_3bb61220d64311ceb77f6f67078ffc60 );
    UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_91d11ac61008d71580d50f72c8a78476 );
    PyFrameObject *frame_module_django__db__models__query = MAKE_FRAME( _codeobj_120bc4e51d9b5bf84edfa8805a722e01, _module_django__db__models__query );

    FrameGuard frame_guard( frame_module_django__db__models__query );
    try
    {
        assert( Py_REFCNT( frame_module_django__db__models__query ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 5 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_copy, IMPORT_MODULE( _python_str_plain_copy, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 6 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_itertools, IMPORT_MODULE( _python_str_plain_itertools, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 7 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_sys, IMPORT_MODULE( _python_str_plain_sys, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 8 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_warnings, IMPORT_MODULE( _python_str_plain_warnings, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 10 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_settings, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_262bd828f67160809670905d543ae3a0, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_settings_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_settings ) );
        frame_guard.setLineNumber( 11 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_exceptions, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_7fde38a6b8ad78c8ebb1bdff593c9e48, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_exceptions_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_exceptions ) );
        frame_guard.setLineNumber( 12 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_connections, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_74ef43b7c3afe205855359e4538bc75d_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_connections ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_router, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_74ef43b7c3afe205855359e4538bc75d_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_router ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_transaction, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_74ef43b7c3afe205855359e4538bc75d_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_transaction ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_DatabaseError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_74ef43b7c3afe205855359e4538bc75d_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_DatabaseError ) );
        frame_guard.setLineNumber( 13 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_LOOKUP_SEP, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cfeccc6ee565189b79407570398b67dd, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_LOOKUP_SEP_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_LOOKUP_SEP ) );
        frame_guard.setLineNumber( 14 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_AutoField, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_AutoField_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_AutoField ) );
        frame_guard.setLineNumber( 15 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_Q, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_f82462a610d5c70ca3e4df549972e4d2, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_43632c786fe7fff6c1877817b14a3e95_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Q ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_select_related_descend, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_f82462a610d5c70ca3e4df549972e4d2, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_43632c786fe7fff6c1877817b14a3e95_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_select_related_descend ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_deferred_class_factory, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_f82462a610d5c70ca3e4df549972e4d2, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_43632c786fe7fff6c1877817b14a3e95_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_deferred_class_factory ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_InvalidQuery, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_f82462a610d5c70ca3e4df549972e4d2, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_43632c786fe7fff6c1877817b14a3e95_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_InvalidQuery ) );
        frame_guard.setLineNumber( 17 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_Collector, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8638e65d7a0f1d4a4dd67c303bb33fe0, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_Collector_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Collector ) );
        frame_guard.setLineNumber( 18 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_sql, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_sql_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_sql ) );
        frame_guard.setLineNumber( 19 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_partition, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_17c58b9ed63e22a2fe75ba31286ba1f7, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_partition_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_partition ) );
        frame_guard.setLineNumber( 20 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_six_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_six ) );
        frame_guard.setLineNumber( 21 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_timezone, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__db__models__query)->md_dict, ((PyModuleObject *)_module_django__db__models__query)->md_dict, _python_list_str_plain_timezone_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_timezone ) );
        UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_REPR_OUTPUT_SIZE, _python_int_pos_20 );
        frame_guard.setLineNumber( 27 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_EmptyResultSet, LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_sql.asObject0(), _python_str_plain_EmptyResultSet ) );
        {
            frame_guard.setLineNumber( 30 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_QuerySet_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_QuerySet, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_QuerySet, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 914 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_type ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_2_InstanceCheckMeta_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call5;
                PyObjectTempKeeper0 call7;
                _tmp_python_tmp_class = ( call5.assign( _python_tmp_metaclass.asObject() ), call7.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_str_plain_InstanceCheckMeta, call7.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_InstanceCheckMeta, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 918 );
            PyObject *_tmp_python_tmp_bases;
            {
                PyObjectTempKeeper1 call9;
                _tmp_python_tmp_bases = MAKE_TUPLE1( PyObjectTemporary( ( call9.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__query_six.asObject0(), _python_str_plain_with_metaclass ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _mvar_django__db__models__query_InstanceCheckMeta.asObject0() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_bases( _tmp_python_tmp_bases );
            PyObjectTemporary _python_tmp_class_dict( impl_class_3_EmptyQuerySet_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 call13;
                _tmp_python_tmp_class = ( call11.assign( _python_tmp_metaclass.asObject() ), call13.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_str_plain_EmptyQuerySet, call13.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_EmptyQuerySet, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 927 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__query_QuerySet.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_4_ValuesQuerySet_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call15;
                PyObjectTempKeeper0 call17;
                _tmp_python_tmp_class = ( call15.assign( _python_tmp_metaclass.asObject() ), call17.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_str_plain_ValuesQuerySet, call17.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_ValuesQuerySet, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1063 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__query_ValuesQuerySet.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_5_ValuesListQuerySet_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call19;
                PyObjectTempKeeper0 call21;
                _tmp_python_tmp_class = ( call19.assign( _python_tmp_metaclass.asObject() ), call21.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_str_plain_ValuesListQuerySet, call21.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_ValuesListQuerySet, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1100 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__query_QuerySet.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_6_DateQuerySet_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call23;
                PyObjectTempKeeper0 call25;
                _tmp_python_tmp_class = ( call23.assign( _python_tmp_metaclass.asObject() ), call25.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_str_plain_DateQuerySet, call25.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_DateQuerySet, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1125 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__query_QuerySet.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_7_DateTimeQuerySet_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call27;
                PyObjectTempKeeper0 call29;
                _tmp_python_tmp_class = ( call27.assign( _python_tmp_metaclass.asObject() ), call29.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_str_plain_DateTimeQuerySet, call29.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_DateTimeQuerySet, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_get_klass_info, MAKE_FUNCTION_function_8_get_klass_info_of_module_django__db__models__query(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_get_cached_row, MAKE_FUNCTION_function_9_get_cached_row_of_module_django__db__models__query(  ) );
        {
            frame_guard.setLineNumber( 1366 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_10_RawQuerySet_of_module_django__db__models__query(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__query___metaclass__.isInitialized( false ) ? _mvar_django__db__models__query___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call31;
                PyObjectTempKeeper0 call33;
                _tmp_python_tmp_class = ( call31.assign( _python_tmp_metaclass.asObject() ), call33.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), _python_str_plain_RawQuerySet, call33.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_RawQuerySet, _python_tmp_class.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__db__models__query)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }
    UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_insert_query, MAKE_FUNCTION_function_11_insert_query_of_module_django__db__models__query(  ) );
    UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_prefetch_related_objects, MAKE_FUNCTION_function_12_prefetch_related_objects_of_module_django__db__models__query(  ) );
    UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_get_prefetcher, MAKE_FUNCTION_function_13_get_prefetcher_of_module_django__db__models__query(  ) );
    UPDATE_STRING_DICT1( _moduledict_django__db__models__query, (Nuitka_StringObject *)_python_str_plain_prefetch_one_level, MAKE_FUNCTION_function_14_prefetch_one_level_of_module_django__db__models__query(  ) );

   return MOD_RETURN_VALUE( _module_django__db__models__query );
}
